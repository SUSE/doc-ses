<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="ceph-hardening-meassures-confidentiality">
 <title>Confidentiality</title>

  <para>
    Confidentiality is a common requirement. There are diffent ways of ensuring data stays confidential at different times of its lifecycle
  </para>

 <sect1>
 <title>Data at rest</title>
  <para>
    The data stored in OSDs is not encrypted by default. If you have high confidentiality requirements it is recommended that you
    encrypt the storage that you provide &productname; for use. This protects the data if a disk is stolen or when you decommission disk drives.
  </para>

  <para>
    The easiest way to do this is to enable disk encryption directly when you install the system. The SUSE installer allows you to 
    create encrypted partitions. 
  </para>

  <para>
    Alternatively you can use cryptsetup to encrypt individual partitions:
    <command>cryptsetup LuksFormat --key-size 256 /dev/sda1</command> allows you to create an encrypted partition that you can open with
    <command>cryptsetup luksOpen /dev/sda1 osd_data</command>. The resulting osd_data device can then be given to &productname; to store data that will
    be transparently encrypted.
  </para>

  <para>
    This only protects data if the disk is offline. To protect data at rest when the system is running you can use client-side encryption.
   <itemizedlist>
   <listitem>
    <para>
      For RDB you can encrypt the block device at the client with e.g. cryptsetup. 
    </para>
   </listitem>
   <listitem>
    <para>
      For cephfs you can you file level encryption, e.g. EncFS.
    </para>
   </listitem>
   <listitem>
    <para>
      For radosgw you need to encrypt the data in the application before storing it via the REST interface.
      <!-- FIXME there's a way to do this transparently in ceph, coulnd't find good docu -->
      <!-- https://docs.ceph.com/docs/master/radosgw/encryption/ -->
      <!-- I only found a way to store the key in the centralized config database, which is not recommended -->
    </para>
   </listitem>
  </itemizedlist>
  With this the data is encrypted on the client and is never available in cleartext on &productname;. This also protects in case the transport protocol is either not encrypted
  or an attacker manages to circumvent the transport encryption.
  </para>
 </sect1>

 <sect1>
 <title>Data in flight</title>
  <para>
When creating services on you &productname; cluster you should enable encryption if possible. E.g. radosgw can communicate via HTTP or HTTPs. Configure it to use HTTPs and 
use certificates that can be checked by the client.
  </para>

  <para>
If possible don't use self signed certificates but either use certificates
    signed by trusted authorities or create you own PKI to issue trusted certificates. Using self signed certificates is better than
    using plaintext protocols, but it can still allow attackers to get between the communicating nodes.
  </para>

  <para>
    To secure the communication within the &productname; cluster you have several options:
   <itemizedlist>
   <listitem>
    <para>
      You can use a dedicated network that is not reachable externally. Depending on your security needs and regulatory requirements that can be 
      acceptable.
    </para>
   </listitem>
   <listitem>
    <para>
      You encrypt the links connecting the &productname; machines with an external mechanism, e.g. use IPsec to setup secure tunnels between the machines that
      takes care of encryption.
    </para>
   </listitem>
   <listitem>
    <para>
      You use the encryption capabilities in msgr2.
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <para>
On fresh &productname; installs msgr2 is available, which also allows for transport encryption for data.
Unfortunately many clients still don't support this, but Ceph clients using librbd starting with Nautilus can already benefit from this.
  </para>
 
  <para>
    The previous message protocol had no guarantee of data authenticity or data encryption. msgr2 uses port 3300, port 6789 is used for the old version.
    When you want to make sure that only msgr2 is used you can block 6789 to guarantee that the old protocol will not be used (FIXME, need to verify).
  </para>

  <para>
    The default configuration allows &productname; to use CRC mode for msgr2. You can check this with:
    <screen>
    $ for option_name in ms_cluster_mode ms_service_mode ms_client_mode; do 
        echo -n "$option_name: "
        ceph config get mon $option_name
      done
    ms_cluster_mode: crc secure
    ms_service_mode: crc secure
    ms_client_mode: crc secure
  </screen>
  Currently only clients build on librbd support secure mode, but the kernel client doesn't. You can set secure mode only for the cluster internal communication
  by setting ms_cluster_mode to secure. If you have a client landscape that allows you to enforce secure mode you can also set ms_service_mode and ms_client_mode
  to secure.
  </para>

  <para>
    This might cause performance issues for your setup, so you need to test this first. If you run into performance issues you can enable secure mode only
    for select daemons. E.g. ms_mon_cluster_mode allows you to force secure mode for Ceph monitors while keeping a different setting for other services.
  </para>
 </sect1>

</chapter>

