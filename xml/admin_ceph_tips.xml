<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="storage-tips">
 <title>Hints and Tips</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/maintenance/ses5.5/xml/</dm:editurl>
   <dm:translation>yes</dm:translation>
   <dm:release>SES 5</dm:release>
  </dm:docmanager>
 </info>
 <para>
  The chapter provides information to help you enhance performance of your
  &ceph; cluster and provides tips how to set the cluster up.
 </para>
 <sect1 xml:id="tips-orphaned-partitions">
  <title>Identifying Orphaned Partitions</title>

  <para>
   To identify possibly orphaned journal/WAL/DB devices, follow these steps:
  </para>

  <procedure>
   <step>
    <para>
     Pick the device that may have orphaned partitions and save the list of its
     partitions to a file:
    </para>
<screen>
&prompt.sminion;ls /dev/sdd?* &gt; /tmp/partitions
</screen>
   </step>
   <step>
    <para>
     Run <command>readlink</command> against all block.wal, block.db, and
     journal devices, and compare the output to the previously saved list of
     partitions:
    </para>
<screen>
&prompt.sminion;readlink -f /var/lib/ceph/osd/ceph-*/{block.wal,block.db,journal} \
 | sort | comm -23 /tmp/partitions -
</screen>
    <para>
     The output is the list of partitions that are <emphasis>not</emphasis>
     used by &ceph;.
    </para>
   </step>
   <step>
    <para>
     Remove the orphaned partitions that do not belong to &ceph; with your
     preferred command (for example <command>fdisk</command>,
     <command>parted</command>, or <command>sgdisk</command>).
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="tips-scrubbing">
  <title>Adjusting Scrubbing</title>

  <para>
   By default, &ceph; performs light scrubbing (find more details in
   <xref linkend="scrubbing"/>) daily and deep scrubbing weekly.
   <emphasis>Light</emphasis> scrubbing checks object sizes and checksums to
   ensure that placement groups are storing the same object data.
   <emphasis>Deep</emphasis> scrubbing checks an objectâ€™s content with that
   of its replicas to ensure that the actual contents are the same. The price
   for checking data integrity is increased I/O load on the cluster during the
   scrubbing procedure.
  </para>

  <para>
   The default settings allow &osd;s to initiate scrubbing at inappropriate
   times, such as during periods of heavy loads. Customers may experience
   latency and poor performance when scrubbing operations conflict with their
   operations. &ceph; provides several scrubbing settings that can limit
   scrubbing to periods with lower loads or during off-peak hours.
  </para>

  <para>
   If the cluster experiences high loads during the day and low loads late at
   night, consider restricting scrubbing to night time hours, such as 11pm till
   6am:
  </para>

<screen>
[osd]
osd_scrub_begin_hour = 23
osd_scrub_end_hour = 6
</screen>

  <para>
   If time restriction is not an effective method of determining a scrubbing
   schedule, consider using the <option>osd_scrub_load_threshold</option>
   option. The default value is 0.5, but it could be modified for low load
   conditions:
  </para>

<screen>
[osd]
osd_scrub_load_threshold = 0.25
</screen>
 </sect1>
 <sect1 xml:id="tips-stopping-osd-without-rebalancing">
  <title>Stopping OSDs without Rebalancing</title>

  <para>
   You may need to stop OSDs for maintenance periodically. If you do not want
   CRUSH to automatically rebalance the cluster in order to avoid huge data
   transfers, set the cluster to <literal>noout</literal> first:
  </para>

<screen>
&prompt.sminion;ceph osd set noout
</screen>

  <para>
   When the cluster is set to <literal>noout</literal>, you can begin stopping
   the OSDs within the failure domain that requires maintenance work:
  </para>

<screen>
&prompt.sminion;systemctl stop ceph-osd@<replaceable>OSD_NUMBER</replaceable>.service
</screen>

  <para>
   Find more information in
   <xref linkend="ceph-operating-services-individual"/>.
  </para>

  <para>
   After you complete the maintenance, start OSDs again:
  </para>

<screen>
&prompt.sminion;systemctl start ceph-osd@<replaceable>OSD_NUMBER</replaceable>.service
</screen>

  <para>
   After OSD services are started, unset the cluster from
   <literal>noout</literal>:
  </para>

<screen>
&prompt.cephuser;ceph osd unset noout
</screen>
 </sect1>
 <sect1 xml:id="Cluster-Time-Setting">
  <title>Time Synchronization of Nodes</title>

  <para>
   &ceph; requires precise time synchronization between all nodes.
  </para>

  <para>
   We recommend synchronizing all &ceph; cluster nodes with at least three
   reliable time sources that are located on the internal network. The internal
   time sources can point to a public time server or have their own time
   source.
  </para>

  <important>
   <title>Public Time Servers</title>
   <para>
    Do not synchronize all &ceph; cluster nodes directly with remote public
    time servers. With such a configuration, each node in the cluster has its
    own NTP daemon that communicates continually over the Internet with a set
    of three or four time servers that may provide slightly different time.
    This solution introduces a large degree of latency variability that makes
    it difficult or impossible to keep the clock drift under 0.05 seconds which
    is what the &ceph; monitors require.
   </para>
  </important>

  <para>
   For details how to set up the NTP server refer to
   <link xlink:href="https://documentation.suse.com/sles/12-SP5/single-html/SLES-admin/#cha-netz-xntp">&sls;
   Administration Guide</link>.
  </para>

  <para>
   Then to change the time on your cluster, do the following:
  </para>

  <important>
   <title>Setting Time</title>
   <para>
    You may face a situation when you need to set the time back, for example if
    the time changes from the summer to the standard time. We do not recommend
    to move the time backward for a longer period than the cluster is down.
    Moving the time forward does not cause any trouble.
   </para>
  </important>

  <procedure>
   <title>Time Synchronization on the Cluster</title>
   <step>
    <para>
     Stop all clients accessing the &ceph; cluster, especially those using
     iSCSI.
    </para>
   </step>
   <step>
    <para>
     Shut down your &ceph; cluster. On each node run:
    </para>
<screen>&prompt.root;systemctl stop ceph.target</screen>
    <note>
     <para>
      If you use &ceph; and &ocloud;, stop also the &ocloud;.
     </para>
    </note>
   </step>
   <step>
    <para>
     Verify that your NTP server is set up correctly&mdash;all ntpd daemons get
     their time from a source or sources in the local network.
    </para>
   </step>
   <step>
    <para>
     Set the correct time on your NTP server.
    </para>
   </step>
   <step>
    <para>
     Verify that NTP is running and working properly, on all nodes run:
    </para>
<screen>&prompt.root;systemctl status ntpd.service</screen>
    <para>
     or
    </para>
<screen>&prompt.root;ntpq -p</screen>
   </step>
   <step>
    <para>
     Start all monitoring nodes and verify that there is no clock skew:
    </para>
<screen>&prompt.root;systemctl start <replaceable>target</replaceable></screen>
   </step>
   <step>
    <para>
     Start all OSD nodes.
    </para>
   </step>
   <step>
    <para>
     Start other &ceph; services.
    </para>
   </step>
   <step>
    <para>
     Start the &ocloud; if you have it.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="storage-bp-cluster-mntc-unbalanced">
  <title>Checking for Unbalanced Data Writing</title>

  <para>
   When data is written to OSDs evenly, the cluster is considered balanced.
   Each OSD within a cluster is assigned its <emphasis>weight</emphasis>. The
   weight is a relative number and tells &ceph; how much of the data should be
   written to the related OSD. The higher the weight, the more data will be
   written. If an OSD has zero weight, no data will be written to it. If the
   weight of an OSD is relatively high compared to other OSDs, a large portion
   of the data will be written there, which makes the cluster unbalanced.
  </para>

  <para>
   Unbalanced clusters have poor performance, and in the case that an OSD with
   a high weight suddenly crashes, a lot of data needs to be moved to other
   OSDs, which slows down the cluster as well.
  </para>

  <para>
   To avoid this, you should regularly check OSDs for the amount of data
   writing. If the amount is between 30% and 50% of the capacity of a group of
   OSDs specified by a given rule set, you need to reweight the OSDs. Check for
   individual disks and find out which of them fill up faster than the others
   (or are generally slower), and lower their weight. The same is valid for
   OSDs where not enough data is written&mdash;you can increase their weight to
   have &ceph; write more data to them. In the following example, you will find
   out the weight of an OSD with ID 13, and reweight it from 3 to 3.05:
  </para>

<screen>$ ceph osd tree | grep osd.13
 13  3                   osd.13  up  1

 $ ceph osd crush reweight osd.13 3.05
 reweighted item id 13 name 'osd.13' to 3.05 in crush map

 $ ceph osd tree | grep osd.13
 13  3.05                osd.13  up  1</screen>

  <para/>

  <tip>
   <title>OSD Reweight by Utilization</title>
   <para>
    The <command>ceph osd reweight-by-utilization</command>
    <replaceable>threshold</replaceable> command automates the process of
    reducing the weight of OSDs which are heavily overused. By default it will
    adjust the weights downward on OSDs which reached 120% of the average
    usage, but if you include threshold it will use that percentage instead.
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="storage-tips-ceph-btrfs-subvol">
  <title>Btrfs Sub-volume for /var/lib/ceph</title>

  <para>
   &sle; by default is installed on a Btrfs partition. The directory
   <filename>/var/lib/ceph</filename> should be excluded from Btrfs snapshots
   and rollbacks, especially when a MON is running on the node. &deepsea;
   provides the <literal>fs</literal> runner that can set up a sub-volume for
   this path.
  </para>

  <sect2 xml:id="storage-tips-ceph-btrfs-subvol-req-new">
   <title>Requirements for new Installation</title>
   <para>
    If you are setting up the cluster the first time, the following
    requirements must be met before you can use the &deepsea; runner:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      &salt; and &deepsea; are properly installed and working according to this
      documentation.
     </para>
    </listitem>
    <listitem>
     <para>
      <command>salt-run state.orch ceph.stage.0</command> has been invoked to
      synchronize all the &salt; and &deepsea; modules to the minions.
     </para>
    </listitem>
    <listitem>
     <para>
      &ceph; is not yet installed, thus ceph.stage.3 has not yet been run and
      <filename>/var/lib/ceph</filename> does not yet exist.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="storage-tips-ceph-btrfs-subvol-req-existing">
   <title>Requirements for Existing Installation</title>
   <para>
    If your cluster is already installed, the following requirements must be
    met before you can use the &deepsea; runner:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Nodes are upgraded to &productname; &productnumber; and cluster is under
      &deepsea; control.
     </para>
    </listitem>
    <listitem>
     <para>
      &ceph; cluster is up and healthy.
     </para>
    </listitem>
    <listitem>
     <para>
      Upgrade process has synchronized &salt; and &deepsea; modules to all
      minion nodes.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="storage-tips-ceph-btrfs-subvol-automatic">
   <title>Automatic Setup</title>
   <procedure>
    <step>
     <para>
      On the &smaster; run:
     </para>
<screen>&prompt.smaster;<command>salt-run</command> state.orch ceph.migrate.subvolume</screen>
     <para>
      On nodes without an existing <filename>/var/lib/ceph</filename>
      directory, this will, one node at a time:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        create <filename>/var/lib/ceph</filename> as a
        <literal>@/var/lib/ceph</literal> Btrfs sub-volume.
       </para>
      </listitem>
      <listitem>
       <para>
        mount the new sub-volume and update <filename>/etc/fstab</filename>
        appropriately.
       </para>
      </listitem>
      <listitem>
       <para>
        disable copy-on-write for <filename>/var/lib/ceph</filename>.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      On nodes with an existing &ceph; installation, this will, one node at a
      time:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        terminate running &ceph; processes.
       </para>
      </listitem>
      <listitem>
       <para>
        unmount OSDs on the node.
       </para>
      </listitem>
      <listitem>
       <para>
        create <literal>@/var/lib/ceph</literal> Btrfs sub-volume and migrate
        existing <filename>/var/lib/ceph</filename> data.
       </para>
      </listitem>
      <listitem>
       <para>
        mount the new sub-volume and update <filename>/etc/fstab</filename>
        appropriately.
       </para>
      </listitem>
      <listitem>
       <para>
        disable copy-on-write for <filename>/var/lib/ceph/*</filename>,
        omitting <filename>/var/lib/ceph/osd/*</filename>.
       </para>
      </listitem>
      <listitem>
       <para>
        re-mount OSDs.
       </para>
      </listitem>
      <listitem>
       <para>
        re-start Ceph daemons.
       </para>
      </listitem>
     </itemizedlist>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="storage-tips-ceph-btrfs-subvol-manually">
   <title>Manual Setup</title>
   <para>
    This uses the new <literal>fs</literal> runner.
   </para>
   <procedure>
    <step>
     <para>
      Inspects the state of <filename>/var/lib/ceph</filename> on all nodes and
      print suggestions about how to proceed:
     </para>
<screen>&prompt.smaster;<command>salt-run</command> fs.inspect_var</screen>
     <para>
      This will return one of the following commands:
     </para>
<screen>salt-run fs.create_var
salt-run fs.migrate_var
salt-run fs.correct_var_attrs</screen>
    </step>
    <step>
     <para>
      Run the command that was returned in the previous step.
     </para>
     <para>
      If an error occurs on one of the nodes, the execution for other nodes
      will stop as well and the runner will try to revert performed changes.
      Consult the log files on the minions with the problem to determine the
      problem. The runner can be re-run after the problem has been solved.
     </para>
    </step>
   </procedure>
   <para>
    The command <command>salt-run fs.help</command> provides a list of all
    runner and module commands for the <literal>fs</literal> module.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="storage-bp-srv-maint-fds-inc">
  <title>Increasing File Descriptors</title>

  <para>
   For OSD daemons, the read/write operations are critical to keep the &ceph;
   cluster balanced. They often need to have many files open for reading and
   writing at the same time. On the OS level, the maximum number of
   simultaneously open files is called 'maximum number of file descriptors'.
  </para>

  <para>
   To prevent OSDs from running out of file descriptors, you can override the
   OS default value and specify the number in
   <filename>/etc/ceph/ceph.conf</filename>, for example:
  </para>

<screen>max_open_files = 131072</screen>

  <para>
   After you change <option>max_open_files</option>, you need to restart the
   OSD service on the relevant &ceph; node.
  </para>
 </sect1>
 <sect1 xml:id="bp-osd-on-exisitng-partitions">
  <title>How to Use Existing Partitions for OSDs Including OSD Journals</title>

  <important>
   <para>
    This section describes an advanced topic that only storage experts and
    developers should examine. It is mostly needed when using non-standard OSD
    journal sizes. If the OSD partition's size is less than 10GB, its initial
    weight is rounded to 0 and because no data are therefore placed on it, you
    should increase its weight. We take no responsibility for overfilled
    journals.
   </para>
  </important>

  <para>
   If you need to use existing disk partitions as an OSD node, the OSD journal
   and data partitions need to be in a GPT partition table.
  </para>

  <para>
   You need to set the correct partition types to the OSD partitions so that
   <systemitem>udev</systemitem> recognizes them correctly and sets their
   ownership to <literal>ceph:ceph</literal>.
  </para>

  <para>
   For example, to set the partition type for the journal partition
   <filename>/dev/vdb1</filename> and data partition
   <filename>/dev/vdb2</filename>, run the following:
  </para>

<screen>&prompt.root;sgdisk --typecode=1:45b0969e-9b03-4f30-b4c6-b4b80ceff106 /dev/vdb
&prompt.root;sgdisk --typecode=2:4fbd7e29-9d25-41b8-afd0-062c0ceff05d /dev/vdb</screen>

  <tip>
   <para>
    The &ceph; partition table types are listed in
    <filename>/usr/lib/udev/rules.d/95-ceph-osd.rules</filename>:
   </para>
<screen>cat /usr/lib/udev/rules.d/95-ceph-osd.rules
# OSD_UUID
ACTION=="add", SUBSYSTEM=="block", \
  ENV{DEVTYPE}=="partition", \
  ENV{ID_PART_ENTRY_TYPE}=="4fbd7e29-9d25-41b8-afd0-062c0ceff05d", \
  OWNER:="ceph", GROUP:="ceph", MODE:="660", \
  RUN+="/usr/sbin/ceph-disk --log-stdout -v trigger /dev/$name"
ACTION=="change", SUBSYSTEM=="block", \
  ENV{ID_PART_ENTRY_TYPE}=="4fbd7e29-9d25-41b8-afd0-062c0ceff05d", \
  OWNER="ceph", GROUP="ceph", MODE="660"

# JOURNAL_UUID
ACTION=="add", SUBSYSTEM=="block", \
  ENV{DEVTYPE}=="partition", \
  ENV{ID_PART_ENTRY_TYPE}=="45b0969e-9b03-4f30-b4c6-b4b80ceff106", \
  OWNER:="ceph", GROUP:="ceph", MODE:="660", \
  RUN+="/usr/sbin/ceph-disk --log-stdout -v trigger /dev/$name"
ACTION=="change", SUBSYSTEM=="block", \
  ENV{ID_PART_ENTRY_TYPE}=="45b0969e-9b03-4f30-b4c6-b4b80ceff106", \
  OWNER="ceph", GROUP="ceph", MODE="660"
[...]</screen>
  </tip>
 </sect1>
 <sect1 xml:id="storage-admin-integration">
  <title>Integration with Virtualization Software</title>

  <sect2 xml:id="storage-bp-integration-kvm">
   <title>Storing &kvm; Disks in &ceph; Cluster</title>
   <para>
    You can create a disk image for &kvm;-driven virtual machine, store it in a
    &ceph; pool, optionally convert the content of an existing image to it, and
    then run the virtual machine with <command>qemu-kvm</command> making use of
    the disk image stored in the cluster. For more detailed information, see
    <xref linkend="cha-ceph-kvm"/>.
   </para>
  </sect2>

  <sect2 xml:id="storage-bp-integration-libvirt">
   <title>Storing &libvirt; Disks in &ceph; Cluster</title>
   <para>
    Similar to &kvm; (see <xref linkend="storage-bp-integration-kvm"/>), you
    can use &ceph; to store virtual machines driven by &libvirt;. The advantage
    is that you can run any &libvirt;-supported virtualization solution, such
    as &kvm;, &xen;, or LXC. For more information, see
    <xref linkend="cha-ceph-libvirt"/>.
   </para>
  </sect2>

  <sect2 xml:id="storage-bp-integration-xen">
   <title>Storing &xen; Disks in &ceph; Cluster</title>
   <para>
    One way to use &ceph; for storing &xen; disks is to make use of &libvirt;
    as described in <xref linkend="cha-ceph-libvirt"/>.
   </para>
   <para>
    Another option is to make &xen; talk to the <systemitem>rbd</systemitem>
    block device driver directly:
   </para>
   <procedure>
    <step>
     <para>
      If you have no disk image prepared for &xen;, create a new one:
     </para>
<screen>&prompt.cephuser;rbd create myimage --size 8000 --pool mypool</screen>
    </step>
    <step>
     <para>
      List images in the pool <literal>mypool</literal> and check if your new
      image is there:
     </para>
<screen>&prompt.cephuser;rbd list mypool</screen>
    </step>
    <step>
     <para>
      Create a new block device by mapping the <literal>myimage</literal> image
      to the <systemitem>rbd</systemitem> kernel module:
     </para>
<screen>&prompt.cephuser;rbd map --pool mypool myimage</screen>
     <tip>
      <title>User Name and Authentication</title>
      <para>
       To specify a user name, use <option>--id
       <replaceable>user-name</replaceable></option>. Moreover, if you use
       <systemitem>cephx</systemitem> authentication, you must also specify a
       secret. It may come from a keyring or a file containing the secret:
      </para>
<screen>&prompt.cephuser;rbd map --pool rbd myimage --id admin --keyring /path/to/keyring</screen>
      <para>
       or
      </para>
<screen>&cephuser;rbd map --pool rbd myimage --id admin --keyfile /path/to/file</screen>
     </tip>
    </step>
    <step>
     <para>
      List all mapped devices:
     </para>
<screen><command>rbd showmapped</command>
 id pool   image   snap device
 0  mypool myimage -    /dev/rbd0</screen>
    </step>
    <step>
     <para>
      Now you can configure &xen; to use this device as a disk for running a
      virtual machine. You can for example add the following line to the
      <command>xl</command>-style domain configuration file:
     </para>
<screen>disk = [ '/dev/rbd0,,sda', '/dev/cdrom,,sdc,cdrom' ]</screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="storage-bp-net-firewall">
  <title>Firewall Settings for &ceph;</title>

  <warning>
   <title>&deepsea; Stages Fail with Firewall</title>
   <para>
    &deepsea; deployment stages fail when firewall is active (and even
    configured). To pass the stages correctly, you need to either turn the
    firewall off by running
   </para>
<screen>
&prompt.root;systemctl stop SuSEfirewall2.service
</screen>
   <para>
    or set the <option>FAIL_ON_WARNING</option> option to 'False' in
    <filename>/srv/pillar/ceph/stack/global.yml</filename>:
   </para>
<screen>
FAIL_ON_WARNING: False
</screen>
  </warning>

  <para>
   We recommend protecting the network cluster communication with SUSE
   Firewall. You can edit its configuration by selecting
   <menuchoice><guimenu>&yast;</guimenu><guimenu>Security and
   Users</guimenu><guimenu>Firewall</guimenu><guimenu>Allowed
   Services</guimenu></menuchoice>.
  </para>

  <para>
   Following is a list of &ceph; related services and numbers of the ports that
   they normally use:
  </para>

  <variablelist>
   <varlistentry>
    <term>&mon;</term>
    <listitem>
     <para>
      Enable the <guimenu>Ceph MON</guimenu> service or port 6789 (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&osd; or &mds;</term>
    <listitem>
     <para>
      Enable the <guimenu>Ceph OSD/MDS</guimenu> service, or ports 6800-7300
      (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&igw;</term>
    <listitem>
     <para>
      Open port 3260 (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&rgw;</term>
    <listitem>
     <para>
      Open the port where &rgw; communication occurs. It is set in
      <filename>/etc/ceph.conf</filename> on the line starting with
      <literal>rgw frontends =</literal>. Default is 80 for HTTP and 443 for
      HTTPS (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&ganesha;</term>
    <listitem>
     <para>
      By default, &ganesha; uses ports 2049 (NFS service, TCP) and 875 (rquota
      support, TCP). Refer to <xref linkend="ganesha-nfsport"/> for more
      information on changing the default &ganesha; ports.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Apache based services, such as &oa;, &smt;, or &susemgr;</term>
    <listitem>
     <para>
      Open ports 80 for HTTP and 443 for HTTPS (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>SSH</term>
    <listitem>
     <para>
      Open port 22 (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NTP</term>
    <listitem>
     <para>
      Open port 123 (UDP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&salt;</term>
    <listitem>
     <para>
      Open ports 4505 and 4506 (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Grafana</term>
    <listitem>
     <para>
      Open port 3000 (TCP).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Prometheus</term>
    <listitem>
     <para>
      Open port 9100 (TCP).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="storage-bp-network-test">
  <title>Testing Network Performance</title>

  <para>
   To test the network performance the &deepsea; <literal>net</literal> runner
   provides the following commands.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     A simple ping to all nodes:
    </para>
<screen>&prompt.smaster;<command>salt-run</command> net.ping
Succeeded: 9 addresses from 9 minions average rtt 1.35 ms</screen>
   </listitem>
   <listitem>
    <para>
     A jumbo ping to all nodes:
    </para>
<screen>&prompt.smaster;<command>salt-run</command> net.jumbo_ping
Succeeded: 9 addresses from 9 minions average rtt 2.13 ms</screen>
   </listitem>
   <listitem>
    <para>
     A bandwidth test:
    </para>
<screen>&prompt.smaster;<command>salt-run</command> net.iperf
Fastest 2 hosts:
    |_
      - 192.168.58.106
      - 2981 Mbits/sec
    |_
      - 192.168.58.107
      - 2967 Mbits/sec
Slowest 2 hosts:
    |_
      - 192.168.58.102
      - 2857 Mbits/sec
    |_
      - 192.168.58.103
      - 2842 Mbits/sec</screen>
    <tip>
     <title>Stop 'iperf3' Processes Manually</title>
     <para>
      When running a test using the <command>net.iperf</command> runner, the
      'iperf3' server processes that are started do not stop automatically when
      a test is completed. To stop the processes, use the following runner:
     </para>
<screen>&prompt.smaster;salt '*' multi.kill_iperf_cmd</screen>
    </tip>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="storage-bd-replacing-disk">
  <title>Replacing Storage Disk</title>

  <para>
   If you need to replace a storage disk in a &ceph; cluster, you can do so
   during the cluster's full operation. The replacement will cause temporary
   increase in data transfer.
  </para>

  <para>
   If the disk fails entirely, &ceph; needs to rewrite at least the same amount
   of data as the capacity of the failed disk is. If the disk is properly
   evacuated and then re-added to avoid loss of redundancy during the process,
   the amount of rewritten data will be twice as big. If the new disk has a
   different size as the replaced one, it will cause some additional data to be
   redistributed to even out the usage of all OSDs.
  </para>
 </sect1>
</chapter>
