<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-ceph-gw">
<!-- ============================================================== -->
 <title>&ceph; &ogw;</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/maintenance/ses5.5/xml/</dm:editurl>
   <dm:maintainer>tbazant@suse.com</dm:maintainer>
   <dm:status>editing</dm:status>
   <dm:deadline/>
   <dm:priority/>
   <dm:translation>yes</dm:translation>
   <dm:languages/>
   <dm:release>SES 5</dm:release>
  </dm:docmanager>
 </info>
 <para>
  This chapter introduces details about administration tasks related to &ogw;,
  such as checking status of the service, managing accounts, multisite
  gateways, or LDAP authentication.
 </para>
 <sect1 xml:id="sec-ceph-rgw-limits">
  <title>&ogw; Restrictions and Naming Limitations</title>

  <para>
   Following is a list of important &ogw; limits:
  </para>

  <sect2 xml:id="ogw-limits-bucket">
   <title>Bucket Limitations</title>
   <para>
    When approaching &ogw; via the S3 API, bucket names are limited to
    DNS-compliant names with a dash character '-' allowed. When approaching
    &ogw; via the &swift; API, you may use any combination of UTF-8 supported
    characters except for a slash character '/'. The maximum length of a bucket
    name is 255 characters. Bucket names must be unique.
   </para>
   <tip>
    <title>Use DNS-compliant Bucket Names</title>
    <para>
     Although you may use any UTF-8 based bucket name via the &swift; API, it
     is recommended to name buckets with regard to the S3 naming limitations to
     avoid problems accessing the same bucket via the S3 API.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="ogw-limits-object">
   <title>Stored Object Limitations</title>
   <variablelist>
    <varlistentry>
     <term>Maximum number of object per user</term>
     <listitem>
      <para>
       No restriction by default (limited by ~ 2^63).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Maximum number of object per bucket</term>
     <listitem>
      <para>
       No restriction by default (limited by ~ 2^63).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Maximum size of an object to upload / store</term>
     <listitem>
      <para>
       Single uploads are restricted to 5GB. Use multipart for larger object
       sizes. The maximum number of multipart chunks is 10000.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ogw-limits-http">
   <title>HTTP Header Limitations</title>
   <para>
    HTTP header and request limitation depend on the Web front-end used. The
    default CivetWeb restricts the number of HTTP headers to 64 headers, and
    the size of the HTTP header to 16kB.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-deploy">
  <title>Deploying the &ogw;</title>

  <para>
   The recommended way of deploying the &cogw; is via the &deepsea;
   infrastructure by adding the relevant <literal>role-rgw [...]</literal>
   line(s) into the <filename>policy.cfg</filename> file on the &smaster;, and
   running required &deepsea; stages.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     To include the &ogw; during the &ceph; cluster deployment process, refer
     to <xref linkend="ceph-install-stack"/> and
     <xref linkend="policy-configuration"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     To add the &ogw; role to an already deployed cluster, refer to
     <xref linkend="salt-adding-services"/>.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="ceph-rgw-operating">
  <title>Operating the &ogw; Service</title>

  <para>
   &ogw; service is operated with the <command>systemctl</command> command. You
   need to have &rootuser; privileges to operate the &ogw; service. Note that
   <replaceable>gateway_host</replaceable> is the host name of the server whose
   &ogw; instance you need to operate.
  </para>

  <para>
   The following subcommands are supported for the &ogw; service:
  </para>

  <variablelist>
   <varlistentry>
    <term>systemctl status ceph-radosgw@rgw.<replaceable>gateway_host</replaceable></term>
    <listitem>
     <para>
      Prints the status information of the service.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl start ceph-radosgw@rgw.<replaceable>gateway_host</replaceable></term>
    <listitem>
     <para>
      Starts the service if it is not already running.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl restart ceph-radosgw@rgw.<replaceable>gateway_host</replaceable></term>
    <listitem>
     <para>
      Restarts the service.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl stop ceph-radosgw@rgw.<replaceable>gateway_host</replaceable></term>
    <listitem>
     <para>
      Stops the running service.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl enable ceph-radosgw@rgw.<replaceable>gateway_host</replaceable></term>
    <listitem>
     <para>
      Enables the service so that it is automatically started on system
      start-up.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl disable ceph-radosgw@rgw.<replaceable>gateway_host</replaceable></term>
    <listitem>
     <para>
      Disables the service so that it is not automatically started on system
      start-up.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-ceph-rgw-configuration">
  <title>Configuration Parameters</title>

  <para>
   You can influence the &ogw; behavior by a number of options in the
   <filename>ceph.conf</filename> file under the section named
  </para>

<screen>
[client.radosgw.<replaceable>INSTANCE_NAME</replaceable>]
</screen>

  <para>
   If an option is not specified, its default value is used. A complete list of
   the &ogw; options follows:
  </para>

<!-- 2018-08-13 tbazant: copy'n'pasted from http://docs.ceph.com/docs/master/radosgw/config-ref/ -->

  <variablelist>
   <title>General Settings</title>
   <varlistentry>
    <term>rgw frontends</term>
    <listitem>
     <para>
      Configures the HTTP front end(s). Specify multiple front ends in a
      comma-delimited list. Each front end configuration may include a list of
      options separated by spaces, where each option is in the form
      “key=value” or “key”. Default is
     </para>
<screen>
rgw frontends = civetweb port=7480
</screen>
     <note>
      <title><option>tcp_nodelay</option></title>
      <para>
       This option may affect the transfer rate of sending TCP packets,
       depending on the data chunk sizes. If set to '1', the socket option will
       disable Nagle's algorithm on the connection. Therefore packets will be
       sent as soon as possible instead of waiting for a full buffer or timeout
       to occur.
      </para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw data</term>
    <listitem>
     <para>
      Sets the location of the data files for the &ogw;. Default is
      <filename>/var/lib/ceph/radosgw/<replaceable>CLUSTER_ID</replaceable></filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw enable apis</term>
    <listitem>
     <para>
      Enables the specified APIs. Default is 's3, swift, swift_auth, admin All
      APIs'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw cache enabled</term>
    <listitem>
     <para>
      Enables or disables the &ogw; cache. Default is 'true'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw cache lru size</term>
    <listitem>
     <para>
      The number of entries in the &ogw; cache. Default is 10000.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw socket path</term>
    <listitem>
     <para>
      The socket path for the domain socket.
      <option>FastCgiExternalServer</option> uses this socket. If you do not
      specify a socket path, the &ogw; will not run as an external server. The
      path you specify here needs to be the same as the path specified in the
      <filename>rgw.conf</filename> file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw fcgi socket backlog</term>
    <listitem>
     <para>
      The socket backlog for fcgi. Default is 1024.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw host</term>
    <listitem>
     <para>
      The host for the &ogw; instance. It can be an IP address or a hostname.
      Default is 0.0.0.0
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw port</term>
    <listitem>
     <para>
      The port number where the instance listens for requests. If not
      specified, the &ogw; runs external FastCGI.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw dns name</term>
    <listitem>
     <para>
      The DNS name of the served domain.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw script uri</term>
    <listitem>
     <para>
      The alternative value for the SCRIPT_URI if not set in the request.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw request uri</term>
    <listitem>
     <para>
      The alternative value for the REQUEST_URI if not set in the request.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw print continue</term>
    <listitem>
     <para>
      Enable 100-continue if it is operational. Default is 'true'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw remote addr param</term>
    <listitem>
     <para>
      The remote address parameter. For example, the HTTP field containing the
      remote address, or the X-Forwarded-For address if a reverse proxy is
      operational. Default is REMOTE_ADDR.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw op thread timeout</term>
    <listitem>
     <para>
      The timeout in seconds for open threads. Default is 600.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw op thread suicide timeout</term>
    <listitem>
     <para>
      The time timeout in seconds before the &ogw; process dies. Disabled if
      set to 0 (default).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw thread pool size</term>
    <listitem>
     <para>
      Number of threads for the CivetWeb server. Increase to a higher value if
      you need to serve more requests. Defaults to 100 threads.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw num rados handles</term>
    <listitem>
     <para>
      The number of RADOS cluster handles
<!-- (refer to
      <link
       xlink:href="http://docs.ceph.com/docs/master/rados/api/librados-intro/#step-2-configuring-a-cluster-handle"/>)
      -->
      for &ogw;. Having a configurable number of RADOS handles results in
      significant performance boost for all types of workloads. Each &ogw;
      worker thread now gets to pick a RADOS handle for its lifetime. Default
      is 1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw num control oids</term>
    <listitem>
     <para>
      The number of notification objects used for cache synchronization between
      different rgw instances. Default is 8.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw init timeout</term>
    <listitem>
     <para>
      The number of seconds before the &ogw; gives up on initialization.
      Default is 30.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw mime types file</term>
    <listitem>
     <para>
      The path and location of the MIME types. Used for Swift auto-detection of
      object types. Default is <filename>/etc/mime.types</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw gc max objs</term>
    <listitem>
     <para>
      The maximum number of objects that may be handled by garbage collection
      in one garbage collection processing cycle. Default is 32.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw gc obj min wait</term>
    <listitem>
     <para>
      The minimum wait time before the object may be removed and handled by
      garbage collection processing. Default is 2 * 3600.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw gc processor max time</term>
    <listitem>
     <para>
      The maximum time between the beginning of two consecutive garbage
      collection processing cycles. Default is 3600.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw gc processor period</term>
    <listitem>
     <para>
      The cycle time for garbage collection processing. Default is 3600.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw s3 success create obj status</term>
    <listitem>
     <para>
      The alternate success status response for <literal>create-obj</literal>.
      Default is 0.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw resolve cname</term>
    <listitem>
     <para>
      Whether the &ogw; should use DNS CNAME record of the request host name
      field (if host name is not equal to the &ogw; DNS name). Default is
      'false'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw obj stripe size</term>
    <listitem>
     <para>
      The size of an object stripe for &ogw; objects. Default is 4 &lt;&lt; 20.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw extended http attrs</term>
    <listitem>
     <para>
      Add a new set of attributes that can be set on an entity (for example a
      user, a bucket or an object). These extra attributes can be set through
      HTTP header fields when putting the entity or modifying it using POST
      method. If set, these attributes will return as HTTP fields when
      requesting GET/HEAD on the entity. Default is 'content_foo, content_bar,
      x-foo-bar'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw exit timeout secs</term>
    <listitem>
     <para>
      Number of seconds to wait for a process before exiting unconditionally.
      Default is 120.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw get obj window size</term>
    <listitem>
     <para>
      The window size in bytes for a single object request. Default is '16
      &lt;&lt; 20'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw get obj max req size</term>
    <listitem>
     <para>
      The maximum request size of a single GET operation sent to the Ceph
      Storage Cluster. Default is 4 &lt;&lt; 20.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw relaxed s3 bucket names</term>
    <listitem>
     <para>
      Enables relaxed S3 bucket names rules for US region buckets. Default is
      'false'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw list buckets max chunk</term>
    <listitem>
     <para>
      The maximum number of buckets to retrieve in a single operation when
      listing user buckets. Default is 1000.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw override bucket index max shards</term>
    <listitem>
     <para>
      Represents the number of shards for the bucket index object. Setting 0
      (default) indicates there is no sharding. It is not recommended to set a
      value too large (for example 1000) as it increases the cost for bucket
      listing. This variable should be set in the client or global sections so
      that it is automatically applied to <command>radosgw-admin</command>
      commands.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw curl wait timeout ms</term>
    <listitem>
     <para>
      The timeout in milliseconds for certain <command>curl</command> calls.
      Default is 1000.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw copy obj progress</term>
    <listitem>
     <para>
      Enables output of object progress during long copy operations. Default is
      'true'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw copy obj progress every bytes</term>
    <listitem>
     <para>
      The minimum bytes between copy progress output. Default is 1024 * 1024.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw admin entry</term>
    <listitem>
     <para>
      The entry point for an admin request URL. Default is 'admin'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw content length compat</term>
    <listitem>
     <para>
      Enable compatibility handling of FCGI requests with both CONTENT_LENGTH
      AND HTTP_CONTENT_LENGTH set. Default is 'false'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw bucket quota ttl</term>
    <listitem>
     <para>
      The amount of time in seconds that cached quota information is trusted.
      After this timeout, the quota information will be re-fetched from the
      cluster. Default is 600.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw user quota bucket sync interval</term>
    <listitem>
     <para>
      The amount of time in seconds for which the bucket quota information is
      accumulated before syncing to the cluster. During this time, other &ogw;
      instances will not see the changes in the bucket quota stats related to
      operations on this instance. Default is 180.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw user quota sync interval</term>
    <listitem>
     <para>
      The amount of time in seconds for which user quota information is
      accumulated before syncing to the cluster. During this time, other &ogw;
      instances will not see the changes in the user quota stats related to
      operations on this instance. Default is 180.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw bucket default quota max objects</term>
    <listitem>
     <para>
      Default maximum number of objects per bucket. It is set on new users if
      no other quota is specified, and has no effect on existing users. This
      variable should be set in the client or global sections so that it is
      automatically applied to <command>radosgw-admin</command> commands.
      Default is -1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw bucket default quota max size</term>
    <listitem>
     <para>
      Default maximum capacity per bucket in bytes. It is set on new users if
      no other quota is specified, and has no effect on existing users. Default
      is -1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw user default quota max objects</term>
    <listitem>
     <para>
      Default maximum number of objects for a user. This includes all objects
      in all buckets owned by the user. It is set on new users if no other
      quota is specified, and has no effect on existing users. Default is -1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw user default quota max size</term>
    <listitem>
     <para>
      The value for user maximum size quota in bytes set on new users if no
      other quota is specified. It has no effect on existing users. Default is
      -1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw verify ssl</term>
    <listitem>
     <para>
      Verify SSL certificates while making requests. Default is 'true'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw max chunk size</term>
    <listitem>
     <para>
      Maximum size of a chunk of data that will be read in a single operation.
      Increasing the value to 4MB (4194304) will provide better performance
      when processing large objects. Default is 128kB (131072).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <title>Multisite Settings</title>
   <varlistentry>
    <term>rgw zone</term>
    <listitem>
     <para>
      The name of the zone for the gateway instance. If no zone is set, a
      cluster-wide default can be configured with the <command>radosgw-admin
      zone default</command> command.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw zonegroup</term>
    <listitem>
     <para>
      The name of the zonegroup for the gateway instance. If no zonegroup is
      set, a cluster-wide default can be configured with the
      <command>radosgw-admin zonegroup default</command> command.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw realm</term>
    <listitem>
     <para>
      The name of the realm for the gateway instance. If no realm is set, a
      cluster-wide default can be configured with the<command>radosgw-admin
      realm default</command> command.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw run sync thread</term>
    <listitem>
     <para>
      If there are other zones in the realm to synchronize from, spawn threads
      to handle the synchronization of data and metadata. Default is 'true'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw data log window</term>
    <listitem>
     <para>
      The data log entries window in seconds. Default is 30/
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw data log changes size</term>
    <listitem>
     <para>
      The number of in-memory entries to hold for the data changes log. Default
      is 1000.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw data log obj prefix</term>
    <listitem>
     <para>
      The object name prefix for the data log. Default is 'data_log'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw data log num shards</term>
    <listitem>
     <para>
      The number of shards (objects) on which to keep the data changes log.
      Default is 128.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw md log max shards</term>
    <listitem>
     <para>
      The maximum number of shards for the metadata log. Default is 64.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <title>&swift; Settings</title>
   <varlistentry>
    <term>rgw enforce swift acls</term>
    <listitem>
     <para>
      Enforces the Swift Access Control List (ACL) settings. Default is 'true'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw swift token expiration</term>
    <listitem>
     <para>
      The time in seconds for expiring a Swift token. Default is 24 * 3600.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw swift url</term>
    <listitem>
     <para>
      The URL for the Ceph Object Gateway Swift API.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw swift url prefix</term>
    <listitem>
     <para>
      The URL prefix for the Swift StorageURL that goes in front of the
      “/v1” part. This allows to run several Gateway instances on the same
      host. For compatibility, setting this configuration variable to empty
      causes the default “/swift” to be used. Use explicit prefix “/”
      to start StorageURL at the root.
     </para>
     <warning>
      <para>
       Setting this option to “/” will not work if S3 API is enabled. Keep
       in mind that disabling S3 will make impossible to deploy the &ogw; in
       the multisite configuration!
      </para>
     </warning>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw swift auth url</term>
    <listitem>
     <para>
      Default URL for verifying v1 authentication tokens when the internal
      Swift authentication is not used.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw swift auth entry</term>
    <listitem>
     <para>
      The entry point for a Swift authentication URL. Default is 'auth'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw swift versioning enabled</term>
    <listitem>
     <para>
      Enables the Object Versioning of OpenStack Object Storage API. This
      allows clients to put the <literal>X-Versions-Location</literal>
      attribute on containers that should be versioned. The attribute specifies
      the name of container storing archived versions. It must be owned by the
      same user that the versioned container due to access control verification
      - ACLs are <emphasis>not</emphasis> taken into consideration. Those
      containers cannot be versioned by the S3 object versioning mechanism.
      Default is 'false'.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <title>Logging Settings</title>
   <varlistentry>
    <term>rgw log nonexistent bucket</term>
    <listitem>
     <para>
      Enables the &ogw; to log a request for a non-existent bucket. Default is
      'false'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw log object name</term>
    <listitem>
     <para>
      The logging format for an object name. See the manual page <command>man 1
      date</command> for details about format specifiers. Default is
      '%Y-%m-%d-%H-%i-%n'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw log object name utc</term>
    <listitem>
     <para>
      Whether a logged object name includes a UTC time. If set to 'false'
      (default), it uses the local time.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw usage max shards</term>
    <listitem>
     <para>
      The maximum number of shards for usage logging. Default is 32.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw usage max user shards</term>
    <listitem>
     <para>
      The maximum number of shards used for a single user’s usage logging.
      Default is 1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw enable ops log</term>
    <listitem>
     <para>
      Enable logging for each successful &ogw; operation. Default is 'false'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw enable usage log</term>
    <listitem>
     <para>
      Enable the usage log. Default is 'false'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw ops log rados</term>
    <listitem>
     <para>
      Whether the operations log should be written to the Ceph Storage Cluster
      back end. Default is 'true'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw ops log socket path</term>
    <listitem>
     <para>
      The Unix domain socket for writing operations logs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw ops log data backlog</term>
    <listitem>
     <para>
      The maximum data backlog data size for operations logs written to a Unix
      domain socket. Default is 5 &lt;&lt; 20.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw usage log flush threshold</term>
    <listitem>
     <para>
      The number of dirty merged entries in the usage log before flushing
      synchronously. Default is 1024.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw usage log tick interval</term>
    <listitem>
     <para>
      Flush pending usage log data every 'n' seconds. Default is 30.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw log http headers</term>
    <listitem>
     <para>
      Comma-delimited list of HTTP headers to include in log entries. Header
      names are case insensitive, and use the full header name with words
      separated by underscores. For example 'http_x_forwarded_for,
      http_x_special_k'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw intent log object name</term>
    <listitem>
     <para>
      The logging format for the intent log object name. See the manual page
      <command>man 1 date</command> for details about format specifiers.
      Default is '%Y-%m-%d-%i-%n'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw intent log object name utc</term>
    <listitem>
     <para>
      Whether the intent log object name includes a UTC time. If set to 'false'
      (default), it uses the local time.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <title>Keystone Settings</title>
   <varlistentry>
    <term>rgw keystone url</term>
    <listitem>
     <para>
      The URL for the Keystone server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone api version</term>
    <listitem>
     <para>
      The version (2 or 3) of OpenStack Identity API that should be used for
      communication with the Keystone server. Default is 2.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone admin domain</term>
    <listitem>
     <para>
      The name of the OpenStack domain with the administrator privilege when
      using OpenStack Identity API v3.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone admin project</term>
    <listitem>
     <para>
      The name of the OpenStack project with the administrator privilege when
      using OpenStack Identity API v3. If not set, the value of the
      <command>rgw keystone admin tenant</command> will be used instead.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone admin token</term>
    <listitem>
     <para>
      The Keystone administrator token (shared secret). In the &ogw;,
      authentication with the administrator token has priority over
      authentication with the administrator credentials (options <option>rgw
      keystone admin user</option>, <option>rgw keystone admin
      password</option>, <option>rgw keystone admin tenant</option>,
      <option>rgw keystone admin project</option>, and <option>rgw keystone
      admin domain</option>). Administrator token feature is considered as
      deprecated.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone admin tenant</term>
    <listitem>
     <para>
      The name of the OpenStack tenant with the administrator privilege
      (Service Tenant) when using OpenStack Identity API v2.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone admin user</term>
    <listitem>
     <para>
      The name of the OpenStack user with the administrator privilege for
      Keystone authentication (Service User) when using OpenStack Identity API
      v2.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone admin password</term>
    <listitem>
     <para>
      The password for the OpenStack administrator user when using OpenStack
      Identity API v2.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone accepted roles</term>
    <listitem>
     <para>
      The roles required to serve requests. Default is 'Member, admin'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone token cache size</term>
    <listitem>
     <para>
      The maximum number of entries in each Keystone token cache. Default is
      10000.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone revocation interval</term>
    <listitem>
     <para>
      The number of seconds between token revocation checks. Default is 15 *
      60.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw keystone verify ssl</term>
    <listitem>
     <para>
      Verify SSL certificates while making token requests to keystone. Default
      is 'true'.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-ceph-rgw-configuration-notes">
   <title>Additional Notes</title>
   <variablelist>
    <varlistentry>
     <term>rgw dns name</term>
     <listitem>
      <para>
       If the parameter <literal>rgw dns name</literal> is added to the
       <filename>ceph.conf</filename>, make sure that the S3 client is
       configured to direct requests at the endpoint specified by <literal>rgw
       dns name</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-access">
  <title>Managing &ogw; Access</title>

  <para>
   You can communicate with &ogw; using either S3- or &swift;-compatible
   interface. S3 interface is compatible with a large subset of the Amazon S3
   RESTful API. &swift; interface is compatible with a large subset of the
   &ostack; &swift; API.
  </para>

  <para>
   Both interfaces require you to create a specific user, and install the
   relevant client software to communicate with the gateway using the user's
   secret key.
  </para>

  <sect2 xml:id="accessing-ragos-gateway">
   <title>Accessing &ogw;</title>
   <sect3>
    <title>S3 Interface Access</title>
    <para>
     To access the S3 interface, you need a REST client.
     <command>S3cmd</command> is a command line S3 client. You can find it in
     the
     <link
      xlink:href="https://build.opensuse.org/package/show/Cloud:Tools/s3cmd">OpenSUSE
     Build Service</link>. The repository contains versions for both &sle; and
     &opensuse; based distributions.
    </para>
    <para>
     If you want to test your access to the S3 interface, you can also write a
     small a Python script. The script will connect to &ogw;, create a new
     bucket, and list all buckets. The values for
     <option>aws_access_key_id</option> and
     <option>aws_secret_access_key</option> are taken from the values of
     <option>access_key</option> and <option>secret_key</option> returned by
     the <command>radosgw_admin</command> command from
     <xref linkend="adding-s3-swift-users"/>.
    </para>
    <procedure>
     <step>
      <para>
       Install the <systemitem>python-boto</systemitem> package:
      </para>
<screen>&prompt.root;zypper in python-boto</screen>
     </step>
     <step>
      <para>
       Create a new Python script called <filename>s3test.py</filename> with
       the following content:
       <remark role="fixme">Provide script in RPM? Is it really necessary to create pool? This script is not necessary at all, remove it from documentation?</remark>
      </para>
<screen>import boto
import boto.s3.connection
access_key = '11BS02LGFB6AL6H1ADMW'
secret_key = 'vzCEkuryfn060dfee4fgQPqFrncKEIkh3ZcdOANY'
conn = boto.connect_s3(
aws_access_key_id = access_key,
aws_secret_access_key = secret_key,
host = '{hostname}',
is_secure=False,
calling_format = boto.s3.connection.OrdinaryCallingFormat(),
)
bucket = conn.create_bucket('my-new-bucket')
for bucket in conn.get_all_buckets():
  print "{name}\t{created}".format(
  name = bucket.name,
  created = bucket.creation_date,
  )</screen>
      <para>
       Replace <literal>{hostname}</literal> with the host name of the host
       where you configured &ogw; service, for example
       <literal>gateway_host</literal>.
      </para>
     </step>
     <step>
      <para>
       Run the script:
      </para>
<screen>python s3test.py</screen>
      <para>
       The script outputs something like the following:
      </para>
<screen>my-new-bucket 2015-07-22T15:37:42.000Z</screen>
     </step>
    </procedure>
   </sect3>
   <sect3>
    <title>Swift Interface Access</title>
    <para>
     To access &ogw; via Swift interface, you need the <command>swift</command>
     command line client. Its manual page <command>man 1 swift</command> tells
     you more about its command line options.
    </para>
    <para>
     The package is included in the 'Public Cloud' module for &sle; 12 SP3.
     Before installing the package, you need to activate the module and refresh
     the software repository:
    </para>
<screen>&prompt.root;SUSEConnect -p sle-module-public-cloud/12/x86_64
sudo zypper refresh</screen>
    <para>
     To install the <command>swift</command> command, run the following:
    </para>
<screen>&prompt.root;zypper in python-swiftclient</screen>
    <para>
     The swift access uses the following syntax:
    </para>
<screen>&prompt.cephuser;swift -A http://<replaceable>IP_ADDRESS</replaceable>/auth/1.0 \
-U example_user:swift -K '<replaceable>swift_secret_key</replaceable>' list</screen>
    <para>
     Replace <replaceable>IP_ADDRESS</replaceable> with the IP address of the
     gateway server, and <replaceable>swift_secret_key</replaceable> with its
     value from the output of the <command>radosgw-admin key create</command>
     command executed for the <systemitem>swift</systemitem> user in
     <xref linkend="adding-s3-swift-users"/>.
    </para>
    <para>
     For example:
    </para>
<screen>&prompt.cephuser;swift -A http://gateway.example.com/auth/1.0 -U example_user:swift \
-K 'r5wWIxjOCeEO7DixD1FjTLmNYIViaC6JVhi3013h' list</screen>
    <para>
     The output is:
    </para>
<screen>my-new-bucket</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="s3-swift-accounts-managment">
   <title>Managing S3 and &swift; Accounts</title>
   <sect3 xml:id="adding-s3-swift-users">
    <title>Adding S3 and &swift; Users</title>
    <para>
     You need to create a user, access key and secret to enable end users to
     interact with the gateway. There are two types of users: a
     <emphasis>user</emphasis> and <emphasis>subuser</emphasis>. While
     <emphasis>users</emphasis> are used when interacting with the S3
     interface, <emphasis>subusers</emphasis> are users of the &swift;
     interface. Each subuser is associated to a user.
    </para>
    <para>
     Users can also be added via the &deepsea; file
     <filename>rgw.sls</filename>. For an example, see
     <xref linkend="ceph-nfsganesha-customrole-rgw-multiusers"/>.
    </para>
    <para>
     To create a &swift; user, follow the steps:
    </para>
    <procedure>
     <step>
      <para>
       To create a &swift; user&mdash;which is a <emphasis>subuser</emphasis>
       in our terminology&mdash;you need to create the associated
       <emphasis>user</emphasis> first.
      </para>
<screen>&prompt.cephuser;radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>
      <para>
       For example:
      </para>
<screen>&prompt.cephuser;radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>
     </step>
     <step>
      <para>
       To create a subuser (&swift; interface) for the user, you must specify
       the user ID (--uid=<replaceable>username</replaceable>), a subuser ID,
       and the access level for the subuser.
      </para>
<screen>&prompt.cephuser;radosgw-admin subuser create --uid=<replaceable>uid</replaceable> \
 --subuser=<replaceable>uid</replaceable> \
 --access=[ <replaceable>read | write | readwrite | full</replaceable> ]</screen>
      <para>
       For example:
      </para>
<screen>&prompt.cephuser;radosgw-admin subuser create --uid=example_user \
 --subuser=example_user:swift --access=full</screen>
     </step>
     <step>
      <para>
       Generate a secret key for the user.
      </para>
<screen>&prompt.cephuser;radosgw-admin key create \
   --gen-secret \
   --subuser=example_user:swift \
   --key-type=swift</screen>
     </step>
     <step>
      <para>
       Both commands will output JSON-formatted data showing the user state.
       Notice the following lines, and remember the
       <literal>secret_key</literal> value:
      </para>
<screen>"swift_keys": [
   { "user": "example_user:swift",
     "secret_key": "r5wWIxjOCeEO7DixD1FjTLmNYIViaC6JVhi3013h"}],</screen>
     </step>
    </procedure>
    <para/>
    <para>
     When accessing &ogw; through the S3 interface you need to create a S3 user
     by running:
    </para>
<screen>&prompt.cephuser;radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>
    <para>
     For example:
    </para>
<screen>&prompt.cephuser;radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>
    <para>
     The command also creates the user's access and secret key. Check its
     output for <literal>access_key</literal> and <literal>secret_key</literal>
     keywords and their values:
    </para>
<screen>[...]
 "keys": [
       { "user": "example_user",
         "access_key": "11BS02LGFB6AL6H1ADMW",
         "secret_key": "vzCEkuryfn060dfee4fgQPqFrncKEIkh3ZcdOANY"}],
 [...]</screen>
   </sect3>
   <sect3 xml:id="removing-s3-swift-users">
    <title>Removing S3 and &swift; Users</title>
    <para>
     The procedure for deleting users is similar for S3 and &swift; users. But
     in case of &swift; users you may need to delete the user including its
     subusers.
    </para>
    <para>
     To remove a S3 or &swift; user (including all its subusers), specify
     <option>user rm</option> and the user ID in the following command:
    </para>
<screen>&prompt.cephuser;radosgw-admin user rm --uid=example_user</screen>
    <para>
     To remove a subuser, specify <option>subuser rm</option> and the subuser
     ID.
    </para>
<screen>&prompt.cephuser;radosgw-admin subuser rm --uid=example_user:swift</screen>
    <para>
     You can make use of the following options:
    </para>
    <variablelist>
     <varlistentry>
      <term>--purge-data</term>
      <listitem>
       <para>
        Purges all data associated to the user ID.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>--purge-keys</term>
      <listitem>
       <para>
        Purges all keys associated to the user ID.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <tip>
     <title>Removing a Subuser</title>
     <para>
      When you remove a subuser, you are removing access to the Swift
      interface. The user will remain in the system.
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="changing-s3-swift-users-password">
    <title>Changing S3 and &swift; User Access and Secret Keys</title>
    <para>
     The <literal>access_key</literal> and <literal>secret_key</literal>
     parameters identify the &ogw; user when accessing the gateway. Changing
     the existing user keys is the same as creating new ones, as the old keys
     get overwritten.
    </para>
    <para>
     For S3 users, run the following:
    </para>
<screen>&prompt.cephuser;radosgw-admin key create --uid=<replaceable>example_user</replaceable> --key-type=s3 --gen-access-key --gen-secret</screen>
    <para>
     For &swift; users, run the following:
    </para>
<screen>&prompt.cephuser;radosgw-admin key create --subuser=<replaceable>example_user</replaceable>:swift --key-type=swift --gen-secret</screen>
    <variablelist>
     <varlistentry>
      <term><option>--key-type=<replaceable>type</replaceable></option></term>
      <listitem>
       <para>
        Specifies the type of key. Either <literal>swift</literal> or
        <literal>s3</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--gen-access-key</option></term>
      <listitem>
       <para>
        Generates a random access key (for S3 user by default).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--gen-secret</option></term>
      <listitem>
       <para>
        Generates a random secret key.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--secret=<replaceable>key</replaceable></option></term>
      <listitem>
       <para>
        Specifies a secret key, for example manually generated.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="user-quota-managment">
    <title>User Quota Management</title>
    <para>
     The &ceph; &ogw; enables you to set quotas on users and buckets owned by
     users. Quotas include the maximum number of objects in a bucket and the
     maximum storage size in megabytes.
    </para>
    <para>
     Before you enable a user quota, you first need to set its parameters:
    </para>
<screen>&prompt.cephuser;radosgw-admin quota set --quota-scope=user --uid=<replaceable>example_user</replaceable> \
 --max-objects=1024 --max-size=1024</screen>
    <variablelist>
     <varlistentry>
      <term><option>--max-objects</option></term>
      <listitem>
       <para>
        Specifies the maximum number of objects. A negative value disables the
        check.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--max-size</option></term>
      <listitem>
       <para>
        Specifies the maximum number of bytes. A negative value disables the
        check.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--quota-scope</option></term>
      <listitem>
       <para>
        Sets the scope for the quota. The options are <literal>bucket</literal>
        and <literal>user</literal>. Bucket quotas apply to buckets a user
        owns. User quotas apply to a user.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Once you set a user quota, you may enable it:
    </para>
<screen>&prompt.cephuser;radosgw-admin quota enable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>
    <para>
     To disable a quota:
    </para>
<screen>&prompt.cephuser;radosgw-admin quota disable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>
    <para>
     To list quota settings:
    </para>
<screen>&prompt.cephuser;radosgw-admin user info --uid=<replaceable>example_user</replaceable></screen>
    <para>
     To update quota statistics:
    </para>
<screen>&prompt.cephuser;radosgw-admin user stats --uid=<replaceable>example_user</replaceable> --sync-stats</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-https">
  <title>Enabling HTTPS/SSL for &ogw;s</title>

  <para>
   To enable the default &ogw; role to communicate securely using SSL, you need
   to either have a CA issued certificate, or create a self-signed one. There
   are two ways to configure &ogw; with HTTPS enabled&mdash;a simple way that
   makes use of the default settings, and an advanced way that lets you fine
   tune HTTPS related settings.
  </para>

  <sect2 xml:id="ogw-selfcert">
   <title>Create a Self-Signed Certificate</title>
   <tip>
    <para>
     Skip this section if you already have a valid certificate signed by CA.
    </para>
   </tip>
   <para>
    By default, &deepsea; expects the certificate file in
    <filename>/srv/salt/ceph/rgw/cert/rgw.pem</filename> on the &smaster;. It
    will then distribute the certificate to
    <filename>/etc/ceph/rgw.pem</filename> on the &sminion; with the &ogw;
    role, where &ceph; reads it.
   </para>
   <para>
    The following procedure describes how to generate a self-signed SSL
    certificate on the &smaster; node.
   </para>
   <procedure>
    <step>
     <para>
      If you need your &ogw; to be known by additional subject identities, add
      them to the <option>subjectAltName</option> option in the
      <literal>[v3_req]</literal> section of the
      <filename>/etc/ssl/openssl.cnf</filename> file:
     </para>
<screen>
[...]
[ v3_req ]
subjectAltName = DNS:server1.example.com DNS:server2.example.com
[...]
</screen>
     <tip>
      <title>IP Addresses in <option>subjectAltName</option></title>
      <para>
       To use IP addresses instead of domain names in the
       <option>subjectAltName</option> option, replace the example line with
       the following:
      </para>
<screen>
subjectAltName = IP:10.0.0.10 IP:10.0.0.11
</screen>
     </tip>
    </step>
    <step>
     <para>
      Create the key and the certificate using <command>openssl</command>.
      Enter all data you need to include in your certificate. We recommend
      entering the FQDN as the common name. Before signing the certificate,
      verify that 'X509v3 Subject Alternative Name:' is included in requested
      extensions, and that the resulting certificate has "X509v3 Subject
      Alternative Name:" set.
     </para>
<screen>
&prompt.smaster;openssl req -x509 -nodes -days 1095 \
 -newkey rsa:4096 -keyout rgw.key -out /srv/salt/ceph/rgw/cert/rgw.pem
</screen>
    </step>
    <step>
     <para>
      Append the key to the certificate file:
     </para>
<screen>
&prompt.smaster;cat rgw.key >> /srv/salt/ceph/rgw/cert/rgw.pem
</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ogw-ssl-simple">
   <title>Simple HTTPS Configuration</title>
   <para>
    By default, &ceph; on the &ogw; node reads the
    <filename>/etc/ceph/rgw.pem</filename> certificate, and uses port 443 for
    secure SSL communication. If you do not need to change these values, follow
    these steps:
   </para>
   <procedure>
    <step>
     <para>
      Edit <filename>/srv/pillar/ceph/stack/global.yml</filename> and add the
      following line:
     </para>
<screen>
rgw_init: default-ssl
</screen>
    </step>
    <step>
     <para>
      Copy the default &ogw; SSL configuration to the
      <filename>ceph.conf.d</filename> subdirectory:
     </para>
<screen>
&prompt.smaster;cp /srv/salt/ceph/configuration/files/rgw-ssl.conf \
 /srv/salt/ceph/configuration/files/ceph.conf.d/rgw.conf
</screen>
    </step>
    <step>
     <para>
      Run &deepsea; Stages 2, 3, and 4 to apply the changes:
     </para>
<screen>
&prompt.smaster;salt-run state.orch ceph.stage.2
&prompt.smaster;salt-run state.orch ceph.stage.3
&prompt.smaster;salt-run state.orch ceph.stage.4
</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ogw-ssl-advanced">
   <title>Advanced HTTPS Configuration</title>
   <para>
    If you need to change the default values for SSL settings of the &ogw;,
    follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      Edit <filename>/srv/pillar/ceph/stack/global.yml</filename> and add the
      following line:
     </para>
<screen>
rgw_init: default-ssl
</screen>
    </step>
    <step>
     <para>
      Copy the default &ogw; SSL configuration to the
      <filename>ceph.conf.d</filename> subdirectory:
     </para>
<screen>
&prompt.smaster;cp /srv/salt/ceph/configuration/files/rgw-ssl.conf \
 /srv/salt/ceph/configuration/files/ceph.conf.d/rgw.conf
</screen>
    </step>
    <step>
     <para>
      Edit
      <filename>/srv/salt/ceph/configuration/files/ceph.conf.d/rgw.conf</filename>
      and change the default options, such as port number or path to the SSL
      certificate, to reflect your setup.
     </para>
    </step>
    <step>
     <para>
      Run &deepsea; Stage 3 and 4 to apply the changes:
     </para>
<screen>
&prompt.smaster;salt-run state.orch ceph.stage.3
&prompt.smaster;salt-run state.orch ceph.stage.4
</screen>
    </step>
   </procedure>
   <tip xml:id="rgw-civetweb-multiport">
    <title>Binding to Multiple Ports</title>
    <para>
     The CivetWeb server can bind to multiple ports. This is useful if you need
     to access a single &ogw; instance with both SSL and non-SSL connections.
     When specifying the ports, separate their numbers by a plus sign '+'. A
     two-port configuration line example follows:
    </para>
<screen>[client.{{ client }}]
rgw_frontends = civetweb port=80+443s ssl_certificate=/etc/ceph/rgw.pem</screen>
   </tip>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-sync">
  <title>Sync Modules</title>

  <para>
   The <emphasis>multisite</emphasis> functionality of &ogw; introduced in
   Jewel allows to create multiple zones and mirror data and metadata between
   them. <emphasis>Sync Modules</emphasis> are built atop of the multisite
   framework that allows for forwarding data and metadata to a different
   external tier. A sync module allows for a set of actions to be performed
   whenever a change in data occurs (metadata ops like bucket or user creation
   etc. are also regarded as changes in data). As the rgw multisite changes are
   eventually consistent at remote sites, changes are propagated
   asynchronously. This would allow for unlocking use cases such as backing up
   the object storage to an external cloud cluster or a custom backup solution
   using tape drives, indexing metadata in Elasticsearch etc.
  </para>

  <sect2 xml:id="ceph-rgw-sync-zones">
   <title>Synchronizing Zones</title>
   <para>
    A sync module configuration is local to a zone. The sync module determines
    whether the zone exports data or can only consume data that was modified in
    another zone. As of luminous the supported sync plug-ins are
    <literal>elasticsearch</literal>, <literal>rgw</literal>, which is the
    default sync plug-in that synchronizes data between the zones and
    <literal>log</literal> which is a trivial sync plug-in that logs the
    metadata operation that happens in the remote zones. The following sections
    are written with the example of a zone using
    <literal>elasticsearch</literal> sync module. The process would be similar
    for configuring any other sync plug-in.
   </para>
   <note>
    <title>Default Sync Plugin</title>
    <para>
     <literal>rgw</literal> is the default sync plug-in and there is no need to
     explicitly configure this.
    </para>
   </note>
   <sect3 xml:id="ceph-rgw-sync-zones-req">
    <title>Requirements and Assumptions</title>
    <para>
     Let us assume a simple multisite configuration as described in
     <xref linkend="ceph-rgw-fed"/> consisting of the 2 zones
     <literal>us-east</literal> and <literal>us-west</literal>. Now we add a
     third zone <literal>us-east-es</literal> which is a zone that only
     processes metadata from the other sites. This zone can be in the same or a
     different &ceph; cluster than <literal>us-east</literal>. This zone would
     only consume metadata from other zones and &ogw;s in this zone will not
     serve any end user requests directly.
    </para>
   </sect3>
   <sect3 xml:id="ceph-rgw-sync-zones-configure">
    <title>Configuring Sync Modules</title>
    <procedure>
     <step>
      <para>
       Create the third zone similar to the ones described in
       <xref linkend="ceph-rgw-fed"/>, for example
      </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> zone create --rgw-zonegroup=us --rgw-zone=us-east-es \
--access-key={system-key} --secret={secret} --endpoints=http://rgw-es:80
      </screen>
     </step>
     <step>
      <para>
       A sync module can be configured for this zone via the following
      </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --tier-type={tier-type} \
--tier-config={set of key=value pairs}
      </screen>
     </step>
     <step>
      <para>
       For example in the <literal>elasticsearch</literal> sync module
      </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --tier-type=elasticsearch \
--tier-config=endpoint=http://localhost:9200,num_shards=10,num_replicas=1
      </screen>
      <para>
       For the various supported tier-config options refer to
       <xref linkend="ceph-rgw-sync-elastic"/>.
      </para>
     </step>
     <step>
      <para>
       Finally update the period
      </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> period update --commit
      </screen>
     </step>
     <step>
      <para>
       Now start the radosgw in the zone
      </para>
<screen>
&prompt.root;<command>systemctl</command> start ceph-radosgw@rgw.`hostname -s`
&prompt.root;<command>systemctl</command> enable ceph-radosgw@rgw.`hostname -s`
      </screen>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-sync-elastic">
   <title>Storing Metadata in Elasticsearch</title>
   <para>
    This sync module writes the metadata from other zones to Elasticsearch. As
    of luminous this is JSON of data fields we currently store in
    Elasticsearch.
   </para>
<screen>
{
  "_index" : "rgw-gold-ee5863d6",
  "_type" : "object",
  "_id" : "34137443-8592-48d9-8ca7-160255d52ade.34137.1:object1:null",
  "_score" : 1.0,
  "_source" : {
    "bucket" : "testbucket123",
    "name" : "object1",
    "instance" : "null",
    "versioned_epoch" : 0,
    "owner" : {
      "id" : "user1",
      "display_name" : "user1"
    },
    "permissions" : [
      "user1"
    ],
    "meta" : {
      "size" : 712354,
      "mtime" : "2017-05-04T12:54:16.462Z",
      "etag" : "7ac66c0f148de9519b8bd264312c4d64"
    }
  }
}
   </screen>
   <sect3 xml:id="ceph-rgw-sync-elastic-config">
    <title>Elasticsearch Tier Type Configuration Parameters</title>
    <variablelist>
     <varlistentry>
      <term>endpoint</term>
      <listitem>
       <para>
        Specifies the Elasticsearch server endpoint to access.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>num_shards</term>
      <listitem>
       <para>
        <emphasis>(integer)</emphasis> The number of shards that Elasticsearch
        will be configured with on data sync initialization. Note that this
        cannot be changed after initialization. Any change here requires
        rebuild of the Elasticsearch index and reinitialization of the data
        sync process.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>num_replicas</term>
      <listitem>
       <para>
        <emphasis>(integer)</emphasis> The number of the replicas that
        Elasticsearch will be configured with on data sync initialization.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>explicit_custom_meta</term>
      <listitem>
       <para>
        <emphasis>(true | false)</emphasis> Specifies whether all user custom
        metadata will be indexed, or whether user will need to configure (at
        the bucket level) what customer metadata entries should be indexed.
        This is false by default
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>index_buckets_list</term>
      <listitem>
       <para>
        <emphasis>(comma separated list of strings)</emphasis> If empty, all
        buckets will be indexed. Otherwise, only buckets specified here will be
        indexed. It is possible to provide bucket prefixes (for example
        'foo*'), or bucket suffixes (for example '*bar').
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>approved_owners_list</term>
      <listitem>
       <para>
        <emphasis>(comma separated list of strings)</emphasis> If empty,
        buckets of all owners will be indexed (subject to other restrictions),
        otherwise, only buckets owned by specified owners will be indexed.
        Suffixes and prefixes can also be provided.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>override_index_path</term>
      <listitem>
       <para>
        <emphasis>(string)</emphasis> if not empty, this string will be used as
        the Elasticsearch index path. Otherwise the index path will be
        determined and generated on sync initialization.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ceph-rgw-sync-elastic-query">
    <title>Metadata Queries</title>
    <para>
     Since the Elasticsearch cluster now stores object metadata, it is
     important that the Elasticsearch endpoint is not exposed to the public and
     only accessible to the cluster administrators. For exposing metadata
     queries to the end user itself this poses a problem since we'd want the
     user to only query their metadata and not of any other users, this would
     require the Elasticsearch cluster to authenticate users in a way similar
     to RGW does which poses a problem.
    </para>
    <para>
     As of Luminous RGW in the metadata master zone can now service end user
     requests. This allows for not exposing the Elasticsearch endpoint in
     public and also solves the authentication and authorization problem since
     RGW itself can authenticate the end user requests. For this purpose RGW
     introduces a new query in the bucket APIs that can service Elasticsearch
     requests. All these requests must be sent to the metadata master zone.
    </para>
    <variablelist>
     <varlistentry>
      <term>Get an Elasticsearch Query</term>
      <listitem>
<screen>
GET /<replaceable>BUCKET</replaceable>?query={query-expr}
       </screen>
       <para>
        request params:
       </para>
       <itemizedlist>
        <listitem>
         <para>
          max-keys: max number of entries to return
         </para>
        </listitem>
        <listitem>
         <para>
          marker: pagination marker
         </para>
        </listitem>
       </itemizedlist>
<screen>
expression := [(]&lt;arg&gt; &lt;op&gt; &lt;value&gt; [)][&lt;and|or&gt; ...]
       </screen>
       <para>
        op is one of the following: &lt;, &lt;=, ==, &gt;=, &gt;
       </para>
       <para>
        For example:
       </para>
<screen>
GET /?query=name==foo
       </screen>
       <para>
        Will return all the indexed keys that user has read permission to, and
        are named 'foo'. The output will be a list of keys in XML that is
        similar to the S3 list buckets response.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Configure custom metadata fields</term>
      <listitem>
       <para>
        Define which custom metadata entries should be indexed (under the
        specified bucket), and what are the types of these keys. If explicit
        custom metadata indexing is configured, this is needed so that rgw will
        index the specified custom metadata values. Otherwise it is needed in
        cases where the indexed metadata keys are of a type other than string.
       </para>
<screen>
POST /<replaceable>BUCKET</replaceable>?mdsearch
x-amz-meta-search: &lt;key [; type]&gt; [, ...]
       </screen>
       <para>
        Multiple metadata fields must be comma separated, a type can be forced
        for a field with a `;`. The currently allowed types are
        string(default), integer and date, for example, if you want to index a
        custom object metadata x-amz-meta-year as int, x-amz-meta-date as type
        date and x-amz-meta-title as string, you would do
       </para>
<screen>
POST /mybooks?mdsearch
x-amz-meta-search: x-amz-meta-year;int, x-amz-meta-release-date;date, x-amz-meta-title;string
       </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Delete custom metadata configuration</term>
      <listitem>
       <para>
        Delete custom metadata bucket configuration.
       </para>
<screen>
DELETE /<replaceable>BUCKET</replaceable>?mdsearch
       </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Get custom metadata configuration</term>
      <listitem>
       <para>
        Retrieve custom metadata bucket configuration.
       </para>
<screen>
GET /<replaceable>BUCKET</replaceable>?mdsearch
       </screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-ldap">
  <title>LDAP Authentication</title>

  <para>
   Apart from the default local user authentication, &ogw; can use LDAP server
   services to authenticate users as well.
  </para>

  <sect2 xml:id="ceph-rgw-ldap-how-works">
   <title>Authentication Mechanism</title>
   <para>
    The &ogw; extracts the user's LDAP credentials from a token. A search
    filter is constructed from the user name. The &ogw; uses the configured
    service account to search the directory for a matching entry. If an entry
    is found, the &ogw; attempts to bind to the found distinguished name with
    the password from the token. If the credentials are valid, the bind will
    succeed, and the &ogw; grants access.
   </para>
   <para>
    You can limit the allowed users by setting the base for the search to a
    specific organizational unit or by specifying a custom search filter, for
    example requiring specific group membership, custom object classes, or
    attributes.
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-reqs">
   <title>Requirements</title>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>LDAP or Active Directory</emphasis>: A running LDAP instance
      accessible by the &ogw;.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Service account</emphasis>: LDAP credentials to be used by the
      &ogw; with search permissions.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>User account</emphasis>: At least one user account in the LDAP
      directory.
     </para>
    </listitem>
   </itemizedlist>
   <important>
    <title>Do Not Overlap LDAP and Local Users</title>
    <para>
     You should not use the same user names for local users and for users being
     authenticated by using LDAP. The &ogw; cannot distinguish them and it
     treats them as the same user.
    </para>
   </important>
   <tip>
    <title>Sanity Checks</title>
    <para>
     Use the <command>ldapsearch</command> utility to verify the service
     account or the LDAP connection. For example:
    </para>
<screen>&prompt.cephuser;ldapsearch -x -D "uid=ceph,ou=system,dc=example,dc=com" -W \
-H ldaps://example.com -b "ou=users,dc=example,dc=com" 'uid=*' dn</screen>
    <para>
     Make sure to use the same LDAP parameters as in the &ceph; configuration
     file to eliminate possible problems.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-config">
   <title>Configure &ogw; to Use LDAP Authentication</title>
   <para>
    The following parameters in the <filename>/etc/ceph/ceph.conf</filename>
    configuration file are related to the LDAP authentication:
   </para>
   <variablelist>
    <varlistentry>
     <term><option>rgw_ldap_uri</option></term>
     <listitem>
      <para>
       Specifies the LDAP server to use. Make sure to use the
       <literal>ldaps://<replaceable>fqdn</replaceable>:<replaceable>port</replaceable></literal>
       parameter to avoid transmitting the plain text credentials openly.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_binddn</option></term>
     <listitem>
      <para>
       The Distinguished Name (DN) of the service account used by the &ogw;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_secret</option></term>
     <listitem>
      <para>
       The password for the service account.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rgw_ldap_searchdn</term>
     <listitem>
      <para>
       Specifies the base in the directory information tree for searching
       users. This might be your users organizational unit or some more
       specific Organizational Unit (OU).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_dnattr</option></term>
     <listitem>
      <para>
       The attribute being used in the constructed search filter to match a
       user name. Depending on your Directory Information Tree (DIT) this would
       probably be <literal>uid</literal> or <literal>cn</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_search_filter</option></term>
     <listitem>
      <para>
       If not specified, the &ogw; automatically constructs the search filter
       with the <option>rgw_ldap_dnattr</option> setting. Use this parameter to
       narrow the list of allowed users in very flexible ways. Consult
       <xref linkend="ceph-rgw-ldap-filter"/> for details.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-filter">
   <title>Using a Custom Search Filter to Limit User Access</title>
   <para>
    There are two ways you can use the <option>rgw_search_filter</option>
    parameter.
   </para>
   <sect3>
    <title>Partial Filter to Further Limit the Constructed Search Filter</title>
    <para>
     An example of a partial filter:
    </para>
<screen>"objectclass=inetorgperson"</screen>
    <para>
     The &ogw; will generate the search filter as usual with the user name from
     the token and the value of <option>rgw_ldap_dnattr</option>. The
     constructed filter is then combined with the partial filter from the
     <option>rgw_search_filter</option> attribute. Depending on the user name
     and the settings the final search filter may become:
    </para>
<screen>"(&amp;(uid=hari)(objectclass=inetorgperson))"</screen>
    <para>
     In that case, user 'hari' will only be granted access if he is found in
     the LDAP directory, has an object class of 'inetorgperson', and did
     specify a valid password.
    </para>
   </sect3>
   <sect3>
    <title>Complete Filter</title>
    <para>
     A complete filter must contain a <option>USERNAME</option> token which
     will be substituted with the user name during the authentication attempt.
     The <option>rgw_ldap_dnattr</option> parameter is not used anymore in this
     case. For example, to limit valid users to a specific group, use the
     following filter:
    </para>
<screen>"(&amp;(uid=USERNAME)(memberOf=cn=ceph-users,ou=groups,dc=mycompany,dc=com))"</screen>
    <note>
     <title><literal>memberOf</literal> Attribute</title>
     <para>
      Using the <literal>memberOf</literal> attribute in LDAP searches requires
      server side support from you specific LDAP server implementation.
     </para>
    </note>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-token">
   <title>Generating an Access Token for LDAP authentication</title>
   <para>
    The <command>radosgw-token</command> utility generates the access token
    based on the LDAP user name and password. It outputs a base-64 encoded
    string which is the actual access token. Use your favorite S3 client (refer
    to <xref linkend="accessing-ragos-gateway"/>) and specify the token as the
    access key and use an empty secret key.
   </para>
<screen>&prompt.cephuser;export RGW_ACCESS_KEY_ID="<replaceable>username</replaceable>"
&prompt.cephuser;export RGW_SECRET_ACCESS_KEY="<replaceable>password</replaceable>"
&prompt.cephuser;radosgw-token --encode --ttype=ldap</screen>
   <important>
    <title>Clear Text Credentials</title>
    <para>
     The access token is a base-64 encoded JSON structure and contains the LDAP
     credentials as a clear text.
    </para>
   </important>
   <note>
    <title>Active Directory</title>
    <para>
     For Active Directory, use the <option>--ttype=ad</option> parameter.
    </para>
   </note>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-bucket-sharding">
  <title>Bucket Index Sharding</title>

  <para>
   The &ogw; stores bucket index data in an index pool, which defaults to
   <literal>.rgw.buckets.index</literal>. If you put too many (hundreds of
   thousands) objects into a single bucket and the quota for maximum number of
   objects per bucket (<option>rgw bucket default quota max objects</option>)
   is not set, the performance of the index pool may degrade. <emphasis>Bucket
   index sharding</emphasis> prevents such performance decreases and allows a
   high number of objects per bucket.
  </para>

  <sect2 xml:id="ogw-bucket-reshard">
   <title>Bucket Index Resharding</title>
   <para>
    If a bucket has grown large and its initial configuration is not sufficient
    anymore, the bucket's index pool needs to be resharded. You can either use
    automatic online bucket index resharding (refer to
    <xref linkend="ogw-bucket-sharding-dyn"/>, or reshard the bucket index
    offline manually (refer to <xref linkend="ogw-bucket-sharding-re"/>.
   </para>
   <sect3 xml:id="ogw-bucket-sharding-dyn">
    <title>Dynamic Resharding</title>
    <para>
     Since &productname; &productnumber;, we support online bucket resharding. It detects if
     the number of objects per bucket reaches a certain threshold, and
     automatically increases the number of shards used by the bucket index.
     This process reduces the number of entries in each bucket index shard.
    </para>
    <para>
     The detection process runs:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       When new objects are added to the bucket.
      </para>
     </listitem>
     <listitem>
      <para>
       In a background process that periodically scans all the buckets. This is
       needed in order to deal with existing buckets that are not being
       updated.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     A bucket that requires resharding is added to the
     <option>reshard_log</option> queue and will be scheduled to be resharded
     later. The reshard threads run in the background and execute the scheduled
     resharding, one at a time.
    </para>
    <variablelist>
     <title>Configuring Dynamic Resharding</title>
     <varlistentry>
      <term><option>rgw_dynamic_resharding</option></term>
      <listitem>
       <para>
        Enables or disables dynamic bucket index resharding. Possible values
        are 'true' or 'false'. Defaults to 'true'.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_reshard_num_logs</option></term>
      <listitem>
       <para>
        Number of shards for the resharding log. Defaults to 16.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_reshard_bucket_lock_duration</option></term>
      <listitem>
       <para>
        Duration of lock on the bucket object during resharding. Defaults to
        120 seconds.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_max_objs_per_shard</option></term>
      <listitem>
       <para>
        Maximum number of objects per bucket index shard. Defaults to 100000
        objects.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_reshard_thread_interval</option></term>
      <listitem>
       <para>
        Maximum time between rounds of reshard thread processing. Defaults to
        600 seconds.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <important>
     <title>Multisite Configurations</title>
     <para>
      Dynamic resharding is not supported in multisite environment. It is
      disabled by default since &ceph; 12.2.2, but we recommend you to double
      check the setting.
     </para>
    </important>
    <variablelist>
     <title>Commands to Administer the Resharding Process</title>
     <varlistentry>
      <term>Add a bucket to the resharding queue:</term>
      <listitem>
<screen>
&prompt.cephuser;radosgw-admin reshard add \
 --bucket <replaceable>BUCKET_NAME</replaceable> \
 --num-shards <replaceable>NEW_NUMBER_OF_SHARDS</replaceable>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>List resharding queue:</term>
      <listitem>
<screen>
&prompt.cephuser;radosgw-admin reshard list
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Process / schedule a bucket resharding:</term>
      <listitem>
<screen>
&prompt.cephuser;radosgw-admin reshard process
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Display the bucket resharding status:</term>
      <listitem>
<screen>
&prompt.cephuser;radosgw-admin reshard status --bucket <replaceable>BUCKET_NAME</replaceable>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Cancel pending bucket resharding:</term>
      <listitem>
<screen>
&prompt.cephuser;radosgw-admin reshard cancel --bucket <replaceable>BUCKET_NAME</replaceable>
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ogw-bucket-sharding-re">
    <title>Manual Resharding</title>
    <para>
     Dynamic resharding mentioned in <xref linkend="ogw-bucket-sharding-dyn"/>
     is supported only for simple &ogw; configurations. For multisite
     configurations, use manual resharding described in this section.
    </para>
    <para>
     To reshard the bucket index manually offline, use the following command:
    </para>
<screen>
&prompt.cephuser;radosgw-admin bucket reshard
</screen>
    <para>
     The <command>bucket reshard</command> command performs the following:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Creates a new set of bucket index objects for the specified object.
      </para>
     </listitem>
     <listitem>
      <para>
       Spreads all objects entries of these index objects.
      </para>
     </listitem>
     <listitem>
      <para>
       Creates a new bucket instance.
      </para>
     </listitem>
     <listitem>
      <para>
       Links the new bucket instance with the bucket so that all new index
       operations go through the new bucket indexes.
      </para>
     </listitem>
     <listitem>
      <para>
       Prints the old and the new bucket ID to the standard output.
      </para>
     </listitem>
    </itemizedlist>
    <procedure>
     <title>Resharding the Bucket Index Pool</title>
     <step>
      <para>
       Make sure that all operations to the bucket are stopped.
      </para>
     </step>
     <step>
      <para>
       Back up the original bucket index:
      </para>
<screen>
&prompt.cephuser;radosgw-admin bi list \
 --bucket=<replaceable>BUCKET_NAME</replaceable> \
 &gt; <replaceable>BUCKET_NAME</replaceable>.list.backup
</screen>
     </step>
     <step>
      <para>
       Reshard the bucket index:
      </para>
<screen>
 &prompt.cephuser;radosgw-admin reshard \
 --bucket=<replaceable>BUCKET_NAME</replaceable> \
 --num-shards=<replaceable>NEW_SHARDS_NUMBER</replaceable>
</screen>
      <tip>
       <title>Old Bucket ID</title>
       <para>
        As part of its output, this command also prints the new and the old
        bucket ID. Note the old bucket ID down; you will need it to purge the
        old bucket index objects.
       </para>
      </tip>
     </step>
     <step>
      <para>
       Verify that the objects are listed correctly by comparing the old bucket
       index listing with the new one. Then purge the old bucket index objects:
      </para>
<screen>
&prompt.cephuser;radosgw-admin bi purge
 --bucket=<replaceable>BUCKET_NAME</replaceable>
 --bucket-id=<replaceable>OLD_BUCKET_ID</replaceable>
</screen>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="ogw-bucket-sharding-new">
   <title>Bucket Index Sharding for New Buckets</title>
   <para>
    There are two options that affect bucket index sharding:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Use the <option>rgw_override_bucket_index_max_shards</option> option for
      simple configurations.
     </para>
    </listitem>
    <listitem>
     <para>
      Use the <option>bucket_index_max_shards</option> option for multisite
      configurations.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Setting the options to <literal>0</literal> disables bucket index sharding.
    A value greater than <literal>0</literal> enables bucket index sharding and
    sets the maximum number of shards.
   </para>
   <para>
    The following formula helps you calculate the recommended number of shards:
   </para>
<screen>
number_of_objects_expected_in_a_bucket / 100000
</screen>
   <para>
    Be aware that the maximum number of shards is 7877.
   </para>
   <sect3>
    <title>Simple Configurations</title>
    <procedure>
     <step>
      <para>
       Open the &ceph; configuration file and add or modify the following
       option:
      </para>
<screen>
rgw_override_bucket_index_max_shards = 12
</screen>
      <tip>
       <title>All or One &ogw; Instances</title>
       <para>
        To configure bucket index sharding for all instances of the &ogw;,
        include <option>rgw_override_bucket_index_max_shards</option> in the
        <literal>[global]</literal> section.
       </para>
       <para>
        To configure bucket index sharding only for a particular instance of
        the &ogw;, include
        <option>rgw_override_bucket_index_max_shards</option> in the related
        instance section.
       </para>
      </tip>
     </step>
     <step>
      <para>
       Restart the &ogw;. See <xref linkend="ceph-rgw-operating"/> for more
       details.
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3>
    <title>Multisite Configurations</title>
    <para>
     Multisite configurations can have a different index pool to manage
     failover. To configure a consistent shard count for zones in one zone
     group, set the <option>bucket_index_max_shards</option> option in the zone
     group's configuration:
    </para>
    <procedure>
     <step>
      <para>
       Export the zone group configuration to the
       <filename>zonegroup.json</filename> file:
      </para>
<screen>
&prompt.cephuser;radosgw-admin zonegroup get &gt; zonegroup.json
</screen>
     </step>
     <step>
      <para>
       Edit the <filename>zonegroup.json</filename> file and set the
       <option>bucket_index_max_shards</option> option for each named zone.
      </para>
     </step>
     <step>
      <para>
       Reset the zone group:
      </para>
<screen>
&prompt.cephuser;radosgw-admin zonegroup set &lt; zonegroup.json
</screen>
     </step>
     <step>
      <para>
       Update the period:
      </para>
<screen>
&prompt.cephuser;radosgw-admin period update --commit
</screen>
     </step>
    </procedure>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-keystone">
  <title>Integrating &okeystone;</title>

  <para>
   &okeystone; is an identity service for the &ostack; product. You can
   integrate the &ogw; with &keystone; to set up a gateway that accepts a
   &keystone; authentication token. A user authorized by &keystone; to access
   the gateway will be verified on the &cogw; side and automatically created if
   needed. The &ogw; queries &keystone; periodically for a list of revoked
   tokens.
  </para>

  <sect2 xml:id="ogw-keystone-ostack">
   <title>Configuring &ostack;</title>
   <para>
    Before configuring the &cogw;, you need to configure the &okeystone; to
    enable the &swift; service and point it to the &cogw;:
   </para>
   <procedure>
    <step>
     <para>
      <emphasis>Set the &swift; service.</emphasis> To use &ostack; to validate
      &swift; users, first create the &swift; service:
     </para>
<screen>
&prompt.cephuser;openstack service create \
 --name=swift \
 --description="Swift Service" \
 object-store
</screen>
    </step>
    <step>
     <para>
      <emphasis>Set the endpoints.</emphasis> After you create the &swift;
      service, point to the &cogw;. Replace
      <replaceable>REGION_NAME</replaceable> with the name of the gateway’s
      zone group name or region name.
     </para>
<screen>
&prompt.cephuser;openstack endpoint create --region <replaceable>REGION_NAME</replaceable> \
 --publicurl   "http://radosgw.example.com:8080/swift/v1" \
 --adminurl    "http://radosgw.example.com:8080/swift/v1" \
 --internalurl "http://radosgw.example.com:8080/swift/v1" \
 swift
</screen>
    </step>
    <step>
     <para>
      <emphasis>Verify the settings.</emphasis> After you create the &swift;
      service and set the endpoints, show the endpoints to verify that all the
      settings are correct.
     </para>
<screen>
&prompt.cephuser;openstack endpoint show object-store
</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ogw-keystone-ogw">
   <title>Configuring the &cogw;</title>
   <sect3>
    <title>Configure SSL Certificates</title>
    <para>
     The &cogw; queries &keystone; periodically for a list of revoked tokens.
     These requests are encoded and signed. &keystone; may be also configured
     to provide self-signed tokens, which are also encoded and signed. You need
     to configure the gateway so that it can decode and verify these signed
     messages. Therefore, the OpenSSL certificates that &keystone; uses to
     create the requests need to be converted to the 'nss db' format:
    </para>
<screen>
&prompt.root;mkdir /var/ceph/nss
&prompt.root;openssl x509 -in /etc/keystone/ssl/certs/ca.pem \
 -pubkey | certutil -d /var/ceph/nss -A -n ca -t "TCu,Cu,Tuw"
&rootuser;openssl x509 -in /etc/keystone/ssl/certs/signing_cert.pem \
 -pubkey | certutil -A -d /var/ceph/nss -n signing_cert -t "P,P,P"
</screen>
    <para>
     To allow &cogw; to interact with &okeystone;, &okeystone; can use a
     self-signed SSL certificate. Either install &keystone;’s SSL certificate
     on the node running the &cogw;, or alternatively set the value of the
     option <option>rgw keystone verify ssl</option> to 'false'. Setting
     <option>rgw keystone verify ssl</option> to 'false' means that the gateway
     will not attempt to verify the certificate.
    </para>
   </sect3>
   <sect3>
    <title>Configure the &ogw;'s Options</title>
    <para>
     You can configure &keystone; integration using the following options:
    </para>
    <variablelist>
     <varlistentry>
      <term><option>rgw keystone api version</option></term>
      <listitem>
       <para>
        Version of the &keystone; API. Valid options are 2 or 3. Defaults to 2.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone url</option></term>
      <listitem>
       <para>
        The URL and port number of the administrative RESTful API on the
        &keystone; server. Follows the pattern
        <replaceable>SERVER_URL:PORT_NUMBER</replaceable>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin token</option></term>
      <listitem>
       <para>
        The token or shared secret that is configured internally in &keystone;
        for administrative requests.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone accepted roles</option></term>
      <listitem>
       <para>
        The roles required to serve requests. Defaults to 'Member, admin'.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone accepted admin roles</option></term>
      <listitem>
       <para>
        The list of roles allowing a user to gain administrative privileges.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone token cache size</option></term>
      <listitem>
       <para>
        The maximum number of entries in the &keystone; token cache.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone revocation interval</option></term>
      <listitem>
       <para>
        The number of seconds before checking revoked tokens. Defaults to 15 *
        60.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone implicit tenants</option></term>
      <listitem>
       <para>
        Create new users in their own tenants of the same name. Defaults to
        'false'.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw s3 auth use keystone</option></term>
      <listitem>
       <para>
        If set to 'true', the &cogw; will authenticate users using &keystone;.
        Defaults to 'false'.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>nss db path</option></term>
      <listitem>
       <para>
        The path to the NSS database.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     It is also possible to configure the &keystone; service tenant, user &amp;
     password for keystone (for v2.0 version of the &ostack; Identity API),
     similar to the way &ostack; services tend to be configured. This way you
     can avoid setting the shared secret <option>rgw keystone admin
     token</option> in the configuration file, which should be disabled in
     production environments. The service tenant credentials should have admin
     privileges, for more details refer to the
     <link xlink:href="https://docs.openstack.org/keystone/latest/#setting-up-projects-users-and-roles">official
     &okeystone; documentation</link>. The related configuration options
     follow:
    </para>
    <variablelist>
     <varlistentry>
      <term><option>rgw keystone admin user</option></term>
      <listitem>
       <para>
        The &keystone; administrator user name.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin password</option></term>
      <listitem>
       <para>
        The keystone administrator user password.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin tenant</option></term>
      <listitem>
       <para>
        The &keystone; version 2.0 administrator user tenant.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     A &cogw; user is mapped to a &keystone; tenant. A &keystone; user has
     different roles assigned to it, possibly on more than a single tenant.
     When the &cogw; gets the ticket, it looks at the tenant and the user roles
     that are assigned to that ticket, and accepts or rejects the request
     according to the setting of the <option>rgw keystone accepted
     roles</option> option.
    </para>
    <tip>
     <title>Mapping to &ostack; Tenants</title>
     <para>
      Although &swift; tenants are mapped to the &ogw; user by default, they
      can be also mapped to &ostack; tenants via the <option>rgw keystone
      implicit tenants</option> option. This will make containers use the
      tenant namespace instead of the S3 like global namespace that the &ogw;
      defaults to. We recommend deciding on the mapping method at the planning
      stage to avoid confusion. The reason is that toggling the option later
      affects only newer requests which get mapped under a tenant, while older
      buckets created before still continue to be in a global namespace.
     </para>
    </tip>
    <para>
     For version 3 of the &ostack; Identity API, you should replace the
     <option>rgw keystone admin tenant</option> option with:
    </para>
    <variablelist>
     <varlistentry>
      <term><option>rgw keystone admin domain</option></term>
      <listitem>
       <para>
        The &keystone; administrator user domain.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin project</option></term>
      <listitem>
       <para>
        The &keystone; administrator user project.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-fed">
<!-- https://github.com/theanalyst/ceph/blob/doc/multisite-rgw/doc/radosgw/multisite.rst -->

  <title>Multisite &ogw;s</title>

  <variablelist>
   <varlistentry>
    <term>Zone</term>
    <listitem>
     <para>
      A logical grouping of one or more &ogw; instances. There must be one zone
      designated as the <emphasis>master</emphasis> zone in a
      <emphasis>zonegroup</emphasis>, which handles all bucket and user
      creation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Zonegroup</term>
    <listitem>
     <para>
      A zonegroup consists of multiple zones. There should be a master
      zonegroup that will handle changes to the system configuration.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Zonegroup map</term>
    <listitem>
     <para>
      A configuration structure that holds the map of the entire system, for
      example which zonegroup is the master, relationships between different
      zone groups, and certain configuration options such as storage policies.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Realm</term>
    <listitem>
     <para>
      A container for zone groups. This allows for separation of zone groups
      between clusters. It is possible to create multiple realms, making it
      easier to run completely different configurations in the same cluster.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Period</term>
    <listitem>
     <para>
      A period holds the configuration structure for the current state of the
      realm. Every period contains a unique ID and an epoch. Every realm has an
      associated current period, holding the current state of configuration of
      the zone groups and storage policies. Any configuration change for a
      non-master zone will increment the period's epoch. Changing the master
      zone to a different zone will trigger the following changes:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        A new period is generated with a new period ID and epoch of 1.
       </para>
      </listitem>
      <listitem>
       <para>
        Realm's current period is updated to point to the newly generated
        period ID.
       </para>
      </listitem>
      <listitem>
       <para>
        Realm's epoch is incremented.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   You can configure each &ogw; to participate in a federated architecture,
   working in an active zone configuration while allowing for writes to
   non-master zones.
  </para>

  <sect2 xml:id="ceph-rgw-fed-term">
   <title>Terminology</title>
   <para>
    A description of terms specific to a federated architecture follows:
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-intro">
   <title>Example Cluster Setup</title>
   <para>
    In this example, we will focus on creating a single zone group with three
    separate zones, which actively synchronize their data. Two zones belong to
    the same cluster, while the third belongs to a different one. There is no
    synchronization agent involved in mirroring data changes between the
    &ogw;s. This allows for a much simpler configuration scheme and
    active-active configurations. Note that metadata operations&mdash;such as
    creating a new user&mdash;still need to go through the master zone.
    However, data operations&mdash;such as creation of buckets and
    objects&mdash;can be handled by any of the zones.
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-keys">
   <title>System Keys</title>
   <para>
    While configuring zones, &ogw; expects creation of an S3-compatible system
    user together with their access and secret keys. This allows another &ogw;
    instance to pull the configuration remotely with the access and secret
    keys. For more information on creating S3 users, see
    <xref linkend="adding-s3-swift-users"/>.
   </para>
   <tip>
    <para>
     It is useful to generate the access and secret keys before the zone
     creation itself because it makes scripting and use of configuration
     management tools easier later on.
    </para>
   </tip>
   <para>
    For the purpose of this example, let us assume that the access and secret
    keys are set in the environment variables:
   </para>
<screen># SYSTEM_ACCESS_KEY=1555b35654ad1656d805
# SYSTEM_SECRET_KEY=h7GhxuBLTrlhVUyxSPUKUV8r/2EI4ngqJxD7iBdBYLhwluN30JaT3Q==</screen>
   <para>
    Generally, access keys consist of 20 alphanumeric characters, while secret
    keys consist of 40 alphanumeric characters (they can contain +/= characters
    as well). You can generate these keys in the command line:
   </para>
<screen># SYSTEM_ACCESS_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
# SYSTEM_SECRET_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 40 | head -n 1)</screen>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-naming">
   <title>Naming Conventions</title>
   <para>
    This example describes the process of setting up a master zone. We will
    assume a zonegroup called <literal>us</literal> spanning the United States,
    which will be our master zonegroup. This will contain two zones written in
    a <replaceable>zonegroup</replaceable>-<replaceable>zone</replaceable>
    format. This is our convention only and you can choose a format that you
    prefer. In summary:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Master zonegroup: United States <literal>us</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      Master zone: United States, East Region 1: <literal>us-east-1</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      Secondary zone: United States, East Region 2:
      <literal>us-east-2</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      Secondary zone: United States, West Region: <literal>us-west</literal>
     </para>
    </listitem>
   </itemizedlist>
   <para>
    This will be a part of a larger realm named <literal>gold</literal>. The
    <literal>us-east-1</literal> and <literal>us-east-2</literal> zones are
    part of the same &ceph; cluster, <literal>us-east-1</literal> being the
    primary one. <literal>us-west</literal> is in a different &ceph; cluster.
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-pools">
   <title>Default Pools</title>
   <para>
    When configured with the appropriate permissions, &ogw; creates default
    pools on its own. The <literal>pg_num</literal> and
    <literal>pgp_num</literal> values are taken from the
    <filename>ceph.conf</filename> configuration file. Pools related to a zone
    by default follow the convention of
    <replaceable>zone-name</replaceable>.<replaceable>pool-name</replaceable>.
    For example for the <literal>us-east-1</literal> zone, it will be the
    following pools:
   </para>
<screen>.rgw.root
us-east-1.rgw.control
us-east-1.rgw.data.root
us-east-1.rgw.gc
us-east-1.rgw.log
us-east-1.rgw.intent-log
us-east-1.rgw.usage
us-east-1.rgw.users.keys
us-east-1.rgw.users.email
us-east-1.rgw.users.swift
us-east-1.rgw.users.uid
us-east-1.rgw.buckets.index
us-east-1.rgw.buckets.data
us-east-1.rgw.meta</screen>
   <para>
    These pools can be created in other zones as well, by replacing
    <literal>us-east-1</literal> with the appropriate zone name.
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-realm">
   <title>Creating a Realm</title>
   <para>
    Configure a realm called <literal>gold</literal> and make it the default
    realm:
   </para>
<screen>&prompt.cephuser;radosgw-admin realm create --rgw-realm=gold --default
{
  "id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "name": "gold",
  "current_period": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "epoch": 1
}</screen>
   <para>
    Note that every realm has an ID, which allows for flexibility such as
    renaming the realm later if needed. The <literal>current_period</literal>
    changes whenever we change anything in the master zone. The
    <literal>epoch</literal> is incremented when there is a change in the
    master zone's configuration which results in a change of the current
    period.
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-deldefzonegrp">
   <title>Deleting the Default Zonegroup</title>
   <para>
    The default installation of &ogw; creates the default zonegroup called
    <literal>default</literal>. Because we no longer need the default
    zonegroup, remove it.
   </para>
<screen>&prompt.cephuser;radosgw-admin zonegroup delete --rgw-zonegroup=default</screen>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-createmasterzonegrp">
   <title>Creating a Master Zonegroup</title>
   <para>
    Create a master zonegroup called <literal>us</literal>. The zonegroup will
    manage the zonegroup map and propagate changes to the rest of the system.
    By marking the zonegroup as default, you allow explicitly mentioning the
    rgw-zonegroup switch for later commands.
   </para>
<screen>&prompt.cephuser;radosgw-admin zonegroup create --rgw-zonegroup=us \
--endpoints=http://rgw1:80 --master --default
{
  "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "name": "us",
  "api_name": "us",
  "is_master": "true",
  "endpoints": [
      "http:\/\/rgw1:80"
  ],
  "hostnames": [],
  "hostnames_s3website": [],
  "master_zone": "",
  "zones": [],
  "placement_targets": [],
  "default_placement": "",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   <para>
    Alternatively, you can mark a zonegroup as default with the following
    command:
   </para>
<screen>&prompt.cephuser;radosgw-admin zonegroup default --rgw-zonegroup=us</screen>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-masterzone">
   <title>Creating a Master Zone</title>
   <para>
    Now create a default zone and add it to the default zonegroup. Note that
    you will use this zone for metadata operations such as user creation:
   </para>
<screen>&prompt.cephuser;radosgw-admin zone create --rgw-zonegroup=us --rgw-zone=us-east-1 \
--endpoints=http://rgw1:80 --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "name": "us-east-1",
  "domain_root": "us-east-1/gc.rgw.data.root",
  "control_pool": "us-east-1/gc.rgw.control",
  "gc_pool": "us-east-1/gc.rgw.gc",
  "log_pool": "us-east-1/gc.rgw.log",
  "intent_log_pool": "us-east-1/gc.rgw.intent-log",
  "usage_log_pool": "us-east-1/gc.rgw.usage",
  "user_keys_pool": "us-east-1/gc.rgw.users.keys",
  "user_email_pool": "us-east-1/gc.rgw.users.email",
  "user_swift_pool": "us-east-1/gc.rgw.users.swift",
  "user_uid_pool": "us-east-1/gc.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-east-1/gc.rgw.buckets.index",
              "data_pool": "us-east-1/gc.rgw.buckets.data",
              "data_extra_pool": "us-east-1/gc.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-east-1/gc.rgw.meta",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   <para>
    Note that the <option>--rgw-zonegroup</option> and
    <option>--default</option> switches add the zone to a zonegroup and make it
    the default zone. Alternatively, the same can also be done with the
    following commands:
   </para>
<screen>&prompt.cephuser;radosgw-admin zone default --rgw-zone=us-east-1
&prompt.cephuser;radosgw-admin zonegroup add --rgw-zonegroup=us --rgw-zone=us-east-1</screen>
   <sect3 xml:id="ceph-rgw-fed-masterzone-createuser">
    <title>Creating System Users</title>
    <para>
     To access zone pools, you need to create a system user. Note that you will
     need these keys when configuring the secondary zone as well.
    </para>
<screen>&prompt.cephuser;radosgw-admin user create --uid=zone.user \
--display-name="Zone User" --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> \
--secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable> --system</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-masterzone-updateperiod">
    <title>Update the Period</title>
    <para>
     Because you changed the master zone configuration, you need to commit the
     changes for them to take effect in the realm configuration structure.
     Initially, the period looks like this:
    </para>
<screen>&prompt.cephuser;radosgw-admin period get
{
  "id": "09559832-67a4-4101-8b3f-10dfcd6b2707", "epoch": 1, "predecessor_uuid": "", "sync_status": [], "period_map":
  {
    "id": "09559832-67a4-4101-8b3f-10dfcd6b2707", "zonegroups": [], "short_zone_ids": []
  }, "master_zonegroup": "", "master_zone": "", "period_config":
  {
     "bucket_quota": {
     "enabled": false, "max_size_kb": -1, "max_objects": -1
     }, "user_quota": {
       "enabled": false, "max_size_kb": -1, "max_objects": -1
     }
  }, "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7", "realm_name": "gold", "realm_epoch": 1
}</screen>
    <para>
     Update the period and commit the changes:
    </para>
<screen>&prompt.cephuser;radosgw-admin period update --commit
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 1,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [ "[...]"
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "false",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }
              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          }
      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-masterzone-startrgw">
    <title>Start the &ogw;</title>
    <para>
     You need to mention the &ogw; zone and port options in the configuration
     file before starting the &ogw;. For more information on &ogw; and its
     configuration, see <xref linkend="cha-ceph-gw"/>. The configuration
     section of &ogw; should look similar to this:
    </para>
<screen>[client.rgw.us-east-1]
rgw_frontends="civetweb port=80"
rgw_zone=us-east-1</screen>
    <para>
     Start the &ogw;:
    </para>
<screen>&prompt.root;systemctl start ceph-radosgw@rgw.us-east-1</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-secondaryzone">
   <title>Creating a Secondary Zone</title>
   <para>
    In the same cluster, create and configure the secondary zone named
    <literal>us-east-2</literal>. You can execute all the following commands in
    the node hosting the master zone itself.
   </para>
   <para>
    To create the secondary zone, use the same command as when you created the
    primary zone, except dropping the master flag:
   </para>
<screen>&prompt.cephuser;radosgw-admin zone create --rgw-zonegroup=us --endpoints=http://rgw2:80 \
--rgw-zone=us-east-2 --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
  "name": "us-east-2",
  "domain_root": "us-east-2.rgw.data.root",
  "control_pool": "us-east-2.rgw.control",
  "gc_pool": "us-east-2.rgw.gc",
  "log_pool": "us-east-2.rgw.log",
  "intent_log_pool": "us-east-2.rgw.intent-log",
  "usage_log_pool": "us-east-2.rgw.usage",
  "user_keys_pool": "us-east-2.rgw.users.keys",
  "user_email_pool": "us-east-2.rgw.users.email",
  "user_swift_pool": "us-east-2.rgw.users.swift",
  "user_uid_pool": "us-east-2.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-east-2.rgw.buckets.index",
              "data_pool": "us-east-2.rgw.buckets.data",
              "data_extra_pool": "us-east-2.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-east-2.rgw.meta",
  "realm_id": "815d74c2-80d6-4e63-8cfc-232037f7ff5c"
}</screen>
   <sect3 xml:id="ceph-rgw-fed-secondzone-updateperiod">
    <title>Update the Period</title>
    <para>
     Inform all the gateways of the new change in the system map by doing a
     period update and committing the changes:
    </para>
<screen>&prompt.cephuser;radosgw-admin period update --commit
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 2,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [ "[...]"
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "false",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                  {
                      "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
                      "name": "us-east-2",
                      "endpoints": [
                          "http:\/\/rgw2:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }

              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          },
          {
              "key": "950c1a43-6836-41a2-a161-64777e07e8b8",
              "val": 4276257543
          }

      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-secondzone-startrgw">
    <title>Start the &ogw;</title>
    <para>
     Adjust the configuration of the &ogw; for the secondary zone, and start
     it:
    </para>
<screen>[client.rgw.us-east-2]
rgw_frontends="civetweb port=80"
rgw_zone=us-east-2</screen>
<screen>&prompt.cephuser;sudo systemctl start ceph-radosgw@rgw.us-east-2</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-seccluster">
   <title>Adding &ogw; to the Second Cluster</title>
   <para>
    The second &ceph; cluster belongs to the same zonegroup as the initial one,
    but may be geographically located elsewhere.
   </para>
   <sect3 xml:id="ceph-rgw-fed-seccluster-realm">
    <title>Default Realm and Zonegroup</title>
    <para>
     Since you already created the realm for the first gateway, pull the realm
     here and make it the default here:
    </para>
<screen>&prompt.cephuser;radosgw-admin realm pull --url=http://rgw1:80 \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "name": "gold",
  "current_period": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 2
}
&prompt.cephuser;radosgw-admin realm default --rgw-realm=gold</screen>
    <para>
     Get the configuration from the master zone by pulling the period:
    </para>
<screen>&prompt.cephuser;radosgw-admin period pull --url=http://rgw1:80 \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable></screen>
    <para>
     Set the default zonegroup to the already created <literal>us</literal>
     zonegroup:
    </para>
<screen>&prompt.cephuser;radosgw-admin zonegroup default --rgw-zonegroup=us</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-seccluster-seczone">
    <title>Secondary Zone Configuration</title>
    <para>
     Create a new zone named <literal>us-west</literal> with the same system
     keys:
    </para>
<screen>&prompt.cephuser;radosgw-admin zone create --rgw-zonegroup=us --rgw-zone=us-west \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable> \
--endpoints=http://rgw3:80 --default
{
  "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
  "name": "us-west",
  "domain_root": "us-west.rgw.data.root",
  "control_pool": "us-west.rgw.control",
  "gc_pool": "us-west.rgw.gc",
  "log_pool": "us-west.rgw.log",
  "intent_log_pool": "us-west.rgw.intent-log",
  "usage_log_pool": "us-west.rgw.usage",
  "user_keys_pool": "us-west.rgw.users.keys",
  "user_email_pool": "us-west.rgw.users.email",
  "user_swift_pool": "us-west.rgw.users.swift",
  "user_uid_pool": "us-west.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-west.rgw.buckets.index",
              "data_pool": "us-west.rgw.buckets.data",
              "data_extra_pool": "us-west.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-west.rgw.meta",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-seccluster-period">
    <title>Update the Period</title>
    <para>
     To propagate the zonegroup map changes, we update and commit the period:
    </para>
<screen>&prompt.cephuser;radosgw-admin period update --commit --rgw-zone=us-west
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 3,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [
      "", # truncated
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                                  {
                      "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
                      "name": "us-east-2",
                      "endpoints": [
                          "http:\/\/rgw2:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                  {
                      "id": "d9522067-cb7b-4129-8751-591e45815b16",
                      "name": "us-west",
                      "endpoints": [
                          "http:\/\/rgw3:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }
              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          },
          {
              "key": "950c1a43-6836-41a2-a161-64777e07e8b8",
              "val": 4276257543
          },
          {
              "key": "d9522067-cb7b-4129-8751-591e45815b16",
              "val": 329470157
          }
      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
    <para>
     Note that the period epoch number has incremented, indicating a change in
     the configuration.
    </para>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-seccluster-rgwstart">
    <title>Start the &ogw;</title>
    <para>
     This is similar to starting the &ogw; in the first zone. The only
     difference is that the &ogw; zone configuration should reflect the
     <literal>us-west</literal> zone name:
    </para>
<screen>[client.rgw.us-west]
rgw_frontends="civetweb port=80"
rgw_zone=us-west</screen>
    <para>
     Start the second &ogw;:
    </para>
<screen>&prompt.root;systemctl start ceph-radosgw@rgw.us-west</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-failover">
   <title>Failover and Disaster Recovery</title>
   <para>
    If the master zone should fail, failover to the secondary zone for disaster
    recovery.
   </para>
   <procedure>
    <step>
     <para>
      Make the secondary zone the master and default zone. For example:
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default
     </screen>
     <para>
      By default, Ceph Object Gateway will run in an active-active
      configuration. If the cluster was configured to run in an active-passive
      configuration, the secondary zone is a read-only zone. Remove the
      --read-only status to allow the zone to receive write operations. For
      example:
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default \
--read-only=False
     </screen>
    </step>
    <step>
     <para>
      Update the period to make the changes take effect.
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      Finally, restart the Ceph Object Gateway.
     </para>
<screen>
&prompt.root;<command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
   </procedure>
   <para>
    If the former master zone recovers, revert the operation.
   </para>
   <procedure>
    <step>
     <para>
      From the recovered zone, pull the period from the current master zone.
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> period pull --url={url-to-master-zone-gateway} \
--access-key={access-key} --secret={secret}
     </screen>
    </step>
    <step>
     <para>
      Make the recovered zone the master and default zone.
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default
     </screen>
    </step>
    <step>
     <para>
      Update the period to make the changes take effect.
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      Then, restart the Ceph Object Gateway in the recovered zone.
     </para>
<screen>
&prompt.root;<command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
    <step>
     <para>
      If the secondary zone needs to be a read-only configuration, update the
      secondary zone.
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --read-only
     </screen>
    </step>
    <step>
     <para>
      Update the period to make the changes take effect.
     </para>
<screen>
&prompt.cephuser;<command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      Finally, restart the Ceph Object Gateway in the secondary zone.
     </para>
<screen>
&prompt.root;<command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-haproxy">
  <title>Load Balancing the &ogw; Servers with &haproxy;</title>

  <para>
   You can use the &haproxy; load balancer to distribute all requests across
   multiple &ogw; back-end servers. Refer to
   <link
    xlink:href="https://documentation.suse.com/sle-ha/12-SP5/single-html/SLE-HA-guide/#sec-ha-lb-haproxy"/>
   for more details on configuring &haproxy;.
  </para>

  <para>
   Following is a simple configuration of &haproxy; for balancing &ogw; nodes
   using round robin as the balancing algorithm:
  </para>

<screen>
&prompt.cephuser;cat /etc/haproxy/haproxy.cfg
[...]
frontend <replaceable>https_frontend</replaceable>
bind *:443 crt <replaceable>path-to-cert.pem</replaceable> [ciphers: ... ]
default_backend rgw

backend rgw
mode http
balance roundrobin
server rgw_server1 <replaceable>rgw-endpoint1</replaceable> weight 1 maxconn 100 check
server rgw_server2 <replaceable>rgw-endpoint2</replaceable> weight 1 maxconn 100 check
[...]
</screen>
 </sect1>
</chapter>
