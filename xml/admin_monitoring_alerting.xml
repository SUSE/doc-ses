<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"  xml:id="monitoring-alerting">
 <title>Monitoring and Alerting</title>
 <para>
  In &productname; &productnumber;, &cephadm; deploys a monitoring and alerting stack. Users have
  to define the services (such as &prometheus;, &alertmanager;, and &grafana;) that they
  want to deploy with &cephadm;. When multiple services of the same type are deployed,
  a highly-available setup is deployed.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <emphasis role="bold">&prometheus;</emphasis> is the monitoring and alerting
    toolkit.
   </para>
 </listitem>
 <listitem>
  <para>
   <emphasis role="bold">&alertmanager;</emphasis> handles alerts sent by
   the &prometheus; server.
  </para>
 </listitem>
  <listitem>
   <para>
    <emphasis role="bold">&grafana;</emphasis> is the visualization and alerting
    software.
   </para>
  </listitem>
  <listitem>
   <para>
    The <systemitem class="daemon">prometheus-node_exporter</systemitem>
    is the service running on all &sminion;s.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  The &prometheus; configuration and <emphasis>scrape</emphasis> targets
  (exporting daemons) are setup automatically by &cephadm;. &cephadm; also
  deploys a list of default alerts, for example <literal>health
  error</literal>, <literal>10% OSDs down</literal>, or <literal>pgs
  inactive</literal>.
 </para>

 <sect1 xml:id="monitoring-cephadm-config">
   <title>Configuring Monitoring and Alerting</title>
   <para>
     &cephadm; uses a configuration file to deploy the relevant services
     for monitoring and alerting. See <xref linkend="cephadm-service-and-placement-specs"/>
     for more information on creating service and placement specifications.
   </para>
   <para>
     For example:
   </para>
<screen>
  ---
  service_type: prometheus
  placement:
    hosts:
      - host1
  ---
  service_type: grafana
  placement:
    hosts:
      - host2
  ---
  service_type: alertmanager
  placement:
    hosts:
      - host1
  ---
  service_type: node-exporter
  placement:
    host_pattern: "*"
  ---
</screen>
   <note>
     <para>
       The configuration file is just one of two ways to deploy and configure
       the monitoring stack. You can also use the the &ceph; &mgr; modules.
       See <xref linkend="cha-mgr-modules"/> for more information.
<!-- Note to self: Let's include a chapter in this section that matches https://docs.ceph.com/docs/master/cephadm/monitoring/#deploying-monitoring-with-cephadm -->
     </para>
   </note>
 </sect1>

<sect1 xml:id="grafana">
  <title>&grafana;</title>
  <para>
    All traffic is encrypted through &grafana;. You can either supply your
    own SSL certs or create self-signed one.</para>
  <para>&grafana; uses the following variables:</para>
  <itemizedlist>
    <listitem>
      <para>
        <emphasis role="bold"><literal>ssl_cert</literal></emphasis>
      </para>
    </listitem>
    <listitem>
      <para>
        <emphasis role="bold"><literal>ssl_key</literal></emphasis>
      </para>
    </listitem>
  </itemizedlist>
  <para>For more information on supplying your own SSL certificates, see <xref linkend="cert-sign-CA"/>
    or for creating your own, see <xref linkend="self-sign-certificates"/>.
  </para>
</sect1>

 <sect1 xml:id="prometheus">
   <title>&prometheus;</title>
  <para>
    <!-- Add intro about prometheus
  https://docs.ceph.com/docs/master/mgr/prometheus/ (see below for variable list)-->
    We recommend that the node exporter is present on all nodes. This can be
    done using the <filename>monitoring.yaml</filename> configuration above
    with the <literal>node-exporter</literal> service type.
    The &prometheus; &mgr; module is a module inside &ceph; that extends &ceph;'s
    functionality. The module reads (meta-)data from &ceph; about its state
    and health, providing the (scraped) data in a consumable format to &prometheus;.</para>
  <para>
    The &prometheus; &mgr; module needs to be enabled using the following
    command:
  </para>
<screen>
&prompt.cephuser;ceph mgr module enable prometheus
</screen>
  <note>
    <para>
      Ensure this command is run before &prometheus; is deployed. If the
      <command>ceph mgr module enable prometheus</command> was not run
      before deployment, you must redeploy &prometheus;:
    </para>
<screen>
&prompt.cephuser;ceph orch redeploy prometheus
</screen>
  </note>
  <para>&prometheus; uses the following variables:</para>
    <itemizedlist>
    <listitem>
     <para>
      <emphasis role="bold"><literal>scrape_interval</literal></emphasis>:
       change the scrape interval, how often an exporter is to be scraped.
     </para>
   </listitem>
   </itemizedlist>
   <sect2 xml:id="prometheus-security-model">
     <title>Security Model</title>
     <para>
       &prometheus;' security model presumes that untrusted users have access to the
       &prometheus; HTTP endpoint and logs. Untrusted users have access to all the
       (meta)data &prometheus; collects that is contained in the database, plus a
       variety of operational and debugging information.
     </para>
     <para>
       However, &prometheus;' HTTP API is limited to read-only operations.
       Configurations can not be changed using the API and secrets are not
       exposed. Moreover, &prometheus; has some built-in measures to mitigate the
       impact of denial of service attacks.
     </para>
   </sect2>
 </sect1>

 <sect1 xml:id="alerting-alertmanager">
  <title>&alertmanager;</title>
  <para>
   The &alertmanager; handles alerts sent by the &prometheus; server. It takes
   care of deduplicating, grouping, and routing them to the correct receiver.
   Alerts can also be silenced using the &alertmanager;.
<!--Cephadm overwrites the alertmanagers configuration - P.S to figure it out -->
  </para>
<!--  <sect2>
   <title>SNMP Trap Receiver</title>
   <para>
    If you want to get notified about &prometheus; alerts via SNMP traps, then
    you can install the &prometheus; &alertmanager; SNMP trap receiver via
    &cephadm;. To do so you need to enable it in the Pillar under the
    <option>monitoring:alertmanager_receiver_snmp:enabled</option> key. The
    configuration of the receiver must be set under the
    <option>monitoring:alertmanager_receiver_snmp:config</option> key.
   </para>
   <example>
    <title>SNMP Trap Configuration</title>
<screen>
monitoring:
 alertmanager:
   receiver:
      snmp:
        enabled: True
        config:
          host: localhost
          port: 9099
          snmp_host: snmp.foo-bar.com
          snmp_community: private
          metrics: True
</screen>
     <para>
      Refer to the receiver manual at
      <link xlink:href="https://github.com/SUSE/prometheus-webhook-snmp#global-configuration-file" />.
      for more details about the configuration options.
     </para>
    </example>
  </sect2>-->
</sect1>
</chapter>
