<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-storage-cephx">
 <title>Authentication with &cephx;</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/master/xml/</dm:editurl>
   <dm:maintainer>tbazant@suse.com</dm:maintainer>
   <dm:status>editing</dm:status>
   <dm:deadline/>
   <dm:priority/>
   <dm:translation>yes</dm:translation>
   <dm:languages/>
   <dm:release>SES 6</dm:release>
  </dm:docmanager>
 </info>
 <para>
  To identify clients and protect against man-in-the-middle attacks, &ceph;
  provides its &cephx; authentication system. <emphasis>Clients</emphasis> in
  this context are either human users&mdash;such as the admin user&mdash;or
  &ceph;-related services/daemons, for example OSDs, monitors, or &rgw;s.
 </para>
 <note>
  <para>
   The &cephx; protocol does not address data encryption in transport, such as
   TLS/SSL.
  </para>
 </note>
 <sect1 xml:id="storage-cephx-arch">
<!-- http://docs.ceph.com/docs/master/architecture/#high-availability-authentication -->

  <title>Authentication Architecture</title>

  <para>
   &cephx; uses shared secret keys for authentication, meaning both the client
   and &mon;s have a copy of the client’s secret key. The authentication
   protocol enables both parties to prove to each other that they have a copy
   of the key without actually revealing it. This provides mutual
   authentication, which means the cluster is sure the user possesses the
   secret key, and the user is sure that the cluster has a copy of the secret
   key as well.
  </para>

  <para>
   A key scalability feature of &ceph; is to avoid a centralized interface to
   the &ceph; object store. This means that &ceph; clients can interact with
   OSDs directly. To protect data, &ceph; provides its &cephx; authentication
   system, which authenticates &ceph; clients.
  </para>

  <para>
   Each monitor can authenticate clients and distribute keys, so there is no
   single point of failure or bottleneck when using &cephx;. The monitor
   returns an authentication data structure that contains a session key for use
   in obtaining &ceph; services. This session key is itself encrypted with the
   client’s permanent secret key, so that only the client can request
   services from the &ceph; monitors. The client then uses the session key to
   request its desired services from the monitor, and the monitor provides the
   client with a ticket that will authenticate the client to the OSDs that
   actually handle data. &ceph; monitors and OSDs share a secret, so the client
   can use the ticket provided by the monitor with any OSD or metadata server
   in the cluster. &cephx; tickets expire, so an attacker cannot use an expired
   ticket or session key obtained wrongfully.
  </para>

  <para>
   To use &cephx;, an administrator must setup clients/users first. In the
   following diagram, the
   <systemitem class="username">client.admin</systemitem> user invokes
   <command>ceph auth get-or-create-key</command> from the command line to
   generate a user name and secret key. &ceph;’s <command>auth</command>
   subsystem generates the user name and key, stores a copy with the monitor(s)
   and transmits the user’s secret back to the
   <systemitem class="username">client.admin</systemitem> user. This means that
   the client and the monitor share a secret key.
  </para>

  <figure>
   <title>Basic &cephx; Authentication</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cephx_keyring.png" width="70%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cephx_keyring.png" width="70%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   To authenticate with the monitor, the client passes the user name to the
   monitor. The monitor generates a session key and encrypts it with the secret
   key associated with the user name and transmits the encrypted ticket back to
   the client. The client then decrypts the data with the shared secret key to
   retrieve the session key. The session key identifies the user for the
   current session. The client then requests a ticket related to the user,
   which is signed by the session key. The monitor generates a ticket, encrypts
   it with the user’s secret key and transmits it back to the client. The
   client decrypts the ticket and uses it to sign requests to OSDs and metadata
   servers throughout the cluster.
  </para>

  <figure>
   <title>&cephx; Authentication</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cephx_keyring2.png" width="70%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cephx_keyring2.png" width="70%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   The &cephx; protocol authenticates ongoing communications between the client
   machine and the &ceph; servers. Each message sent between a client and a
   server after the initial authentication is signed using a ticket that the
   monitors, OSDs, and metadata servers can verify with their shared secret.
  </para>

  <figure>
   <title>&cephx; Authentication - MDS and OSD</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cephx_keyring3.png" width="70%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cephx_keyring3.png" width="70%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <important>
   <para>
    The protection offered by this authentication is between the &ceph; client
    and the &ceph; cluster hosts. The authentication is not extended beyond the
    &ceph; client. If the user accesses the &ceph; client from a remote host,
    &ceph; authentication is not applied to the connection between the user’s
    host and the client host.
   </para>
  </important>
 </sect1>
 <sect1 xml:id="storage-cephx-keymgmt">
<!-- http://docs.ceph.com/docs/master/rados/operations/user-management/ -->

  <title>Key Management</title>

  <para>
   This section describes &ceph; client users and their authentication and
   authorization with the &ceph; storage cluster. <emphasis>Users</emphasis>
   are either individuals or system actors such as applications, which use
   &ceph; clients to interact with the &ceph; storage cluster daemons.
  </para>

  <para>
   When &ceph; runs with authentication and authorization enabled (enabled by
   default), you must specify a user name and a keyring containing the secret
   key of the specified user (usually via the command line). If you do not
   specify a user name, &ceph; will use
   <systemitem class="username">client.admin</systemitem> as the default user
   name. If you do not specify a keyring, &ceph; will look for a keyring via
   the keyring setting in the &ceph; configuration file. For example, if you
   execute the <command>ceph health</command> command without specifying a user
   name or keyring, &ceph; interprets the command like this:
  </para>

<screen>&prompt.cephuser;ceph -n client.admin --keyring=/etc/ceph/ceph.client.admin.keyring health</screen>

  <para>
   Alternatively, you may use the <literal>CEPH_ARGS</literal> environment
   variable to avoid re-entering the user name and secret.
  </para>

  <sect2 xml:id="storage-cephx-keymgmt-backgrnd">
   <title>Background Information</title>
   <para>
    Regardless of the type of &ceph; client (for example, block device, object
    storage, file system, native API), &ceph; stores all data as objects within
    <emphasis>pools</emphasis>. &ceph; users need to have access to pools in
    order to read and write data. Additionally, &ceph; users must have execute
    permissions to use &ceph;'s administrative commands. The following concepts
    will help you understand &ceph; user management.
   </para>
   <sect3 xml:id="cephx-user">
    <title>User</title>
    <para>
     A user is either an individual or a system actor such as an application.
     Creating users allows you to control who (or what) can access your &ceph;
     storage cluster, its pools, and the data within pools.
    </para>
    <para>
     &ceph; uses <emphasis>types</emphasis> of users. For the purposes of user
     management, the type will always be <literal>client</literal>. &ceph;
     identifies users in period (.) delimited form, consisting of the user type
     and the user ID. For example, <literal>TYPE.ID</literal>,
     <literal>client.admin</literal>, or <literal>client.user1</literal>. The
     reason for user typing is that &ceph; monitors, OSDs, and metadata servers
     also use the cephx protocol, but they are not clients. Distinguishing the
     user type helps to distinguish between client users and other users,
     streamlining access control, user monitoring, and traceability.
    </para>
    <para>
     Sometimes &ceph;’s user type may seem confusing, because the &ceph;
     command line allows you to specify a user with or without the type,
     depending upon your command line usage. If you specify
     <option>--user</option> or <option>--id</option>, you can omit the type.
     So <literal>client.user1</literal> can be entered simply as
     <literal>user1</literal>. If you specify <option>--name</option> or
     <option>-n</option>, you must specify the type and name, such as
     <literal>client.user1</literal>. We recommend using the type and name as a
     best practice wherever possible.
    </para>
    <note>
     <para>
      A &ceph; storage cluster user is not the same as a &ceph; object storage
      user or a &ceph; file system user. The &ceph; &rgw; uses a &ceph; storage
      cluster user to communicate between the gateway daemon and the storage
      cluster, but the gateway has its own user management functionality for
      end users. The &ceph; file system uses POSIX semantics. The user space
      associated with it is not the same as a &ceph; storage cluster user.
     </para>
    </note>
   </sect3>
   <sect3>
    <title>Authorization and Capabilities</title>
    <para>
     &ceph; uses the term 'capabilities' (caps) to describe authorizing an
     authenticated user to exercise the functionality of the monitors, OSDs,
     and metadata servers. Capabilities can also restrict access to data within
     a pool or pool namespace. A &ceph; administrative user sets a user's
     capabilities when creating or updating a user.
    </para>
    <para>
     Capability syntax follows the form:
    </para>
<screen><replaceable>daemon-type</replaceable> 'allow <replaceable>capability</replaceable>' [...]</screen>
    <para>
     Following is a list of capabilities for each service type:
    </para>
    <variablelist>
     <varlistentry>
      <term>Monitor capabilities</term>
      <listitem>
       <para>
        include <literal>r</literal>, <literal>w</literal>,
        <literal>x</literal> and <literal>allow profile
        <replaceable>cap</replaceable></literal>.
       </para>
<screen>mon 'allow rwx'
mon 'allow profile osd'</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>OSD capabilities</term>
      <listitem>
       <para>
        include <literal>r</literal>, <literal>w</literal>,
        <literal>x</literal>, <literal>class-read</literal>,
        <literal>class-write</literal> and <literal>profile osd</literal>.
        Additionally, OSD capabilities also allow for pool and namespace
        settings.
       </para>
<screen>osd 'allow <replaceable>capability</replaceable>' [pool=<replaceable>poolname</replaceable>] [namespace=<replaceable>namespace-name</replaceable>]</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>MDS capability</term>
      <listitem>
       <para>
        simply requires <literal>allow</literal>, or blank.
       </para>
<screen>mds 'allow'</screen>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     The following entries describe each capability:
    </para>
    <variablelist>
     <varlistentry>
      <term>allow</term>
      <listitem>
       <para>
        Precedes access settings for a daemon. Implies <literal>rw</literal>
        for MDS only.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>r</term>
      <listitem>
       <para>
        Gives the user read access. Required with monitors to retrieve the
        CRUSH map.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>w</term>
      <listitem>
       <para>
        Gives the user write access to objects.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>x</term>
      <listitem>
       <para>
        Gives the user the capability to call class methods (both read and
        write) and to conduct <literal>auth</literal> operations on monitors.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>class-read</term>
      <listitem>
       <para>
        Gives the user the capability to call class read methods. Subset of
        <literal>x</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>class-write</term>
      <listitem>
       <para>
        Gives the user the capability to call class write methods. Subset of
        <literal>x</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>*</term>
      <listitem>
       <para>
        Gives the user read, write, and execute permissions for a particular
        daemon/pool, and the ability to execute admin commands.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>profile osd</term>
      <listitem>
       <para>
        Gives a user permissions to connect as an OSD to other OSDs or
        monitors. Conferred on OSDs to enable OSDs to handle replication
        heartbeat traffic and status reporting.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>profile mds</term>
      <listitem>
       <para>
        Gives a user permissions to connect as an MDS to other MDSs or
        monitors.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>profile bootstrap-osd</term>
      <listitem>
       <para>
        Gives a user permissions to bootstrap an OSD. Delegated to deployment
        tools so that they have permissions to add keys when bootstrapping an
        OSD.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>profile bootstrap-mds</term>
      <listitem>
       <para>
        Gives a user permissions to bootstrap a metadata server. Delegated to
        deployment tools so they have permissions to add keys when
        bootstrapping a metadata server.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title>Pools</title>
    <para>
     A pool is a logical partition where users store data. In &ceph;
     deployments, it is common to create a pool as a logical partition for
     similar types of data. For example, when deploying &ceph; as a back-end
     for &ostack;, a typical deployment would have pools for volumes, images,
     backups and virtual machines, and users such as
     <systemitem class="username">client.glance</systemitem> or
     <systemitem class="username">client.cinder</systemitem>.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="storage-cephx-keymgmt-usermgmt">
   <title>Managing Users</title>
   <para>
    User management functionality provides &ceph; cluster administrators with
    the ability to create, update, and delete users directly in the &ceph;
    cluster.
   </para>
   <para>
    When you create or delete users in the &ceph; cluster, you may need to
    distribute keys to clients so that they can be added to keyrings. See
    <xref linkend="storage-cephx-keymgmt-keyringmgmt"/> for details.
   </para>
   <sect3>
    <title>Listing Users</title>
    <para>
     To list the users in your cluster, execute the following:
    </para>
<screen>&prompt.cephuser;ceph auth list</screen>
    <para>
     &ceph; will list all users in your cluster. For example, in a cluster with
     two nodes, <command>ceph auth list</command> output looks similar to this:
    </para>
<screen>installed auth entries:

osd.0
        key: AQCvCbtToC6MDhAATtuT70Sl+DymPCfDSsyV4w==
        caps: [mon] allow profile osd
        caps: [osd] allow *
osd.1
        key: AQC4CbtTCFJBChAAVq5spj0ff4eHZICxIOVZeA==
        caps: [mon] allow profile osd
        caps: [osd] allow *
client.admin
        key: AQBHCbtT6APDHhAA5W00cBchwkQjh3dkKsyPjw==
        caps: [mds] allow
        caps: [mon] allow *
        caps: [osd] allow *
client.bootstrap-mds
        key: AQBICbtTOK9uGBAAdbe5zcIGHZL3T/u2g6EBww==
        caps: [mon] allow profile bootstrap-mds
client.bootstrap-osd
        key: AQBHCbtT4GxqORAADE5u7RkpCN/oo4e5W0uBtw==
        caps: [mon] allow profile bootstrap-osd</screen>
    <note>
     <title>TYPE.ID Notation</title>
     <para>
      Note that the <literal>TYPE.ID</literal> notation for users applies such
      that <literal>osd.0</literal> specifies a user of type
      <literal>osd</literal> and its ID is <literal>0</literal>.
      <literal>client.admin</literal> is a user of type
      <literal>client</literal> and its ID is <literal>admin</literal>. Note
      also that each entry has a <literal>key:
      <replaceable>value</replaceable></literal> entry, and one or more
      <literal>caps:</literal> entries.
     </para>
     <para>
      You may use the <option>-o <replaceable>filename</replaceable></option>
      option with <command>ceph auth list</command> to save the output to a
      file.
     </para>
    </note>
   </sect3>
   <sect3>
    <title>Getting Information about Users</title>
    <para>
     To retrieve a specific user, key, and capabilities, execute the following:
    </para>
<screen>&prompt.cephuser;ceph auth get <replaceable>TYPE.ID</replaceable></screen>
    <para>
     For example:
    </para>
<screen>&prompt.cephuser;ceph auth get client.admin
exported keyring for client.admin
[client.admin]
	key = AQA19uZUqIwkHxAAFuUwvq0eJD4S173oFRxe0g==
	caps mds = "allow"
	caps mon = "allow *"
 caps osd = "allow *"</screen>
    <para>
     Developers may also execute the following:
    </para>
<screen>&prompt.cephuser;ceph auth export <replaceable>TYPE.ID</replaceable></screen>
    <para>
     The <command>auth export</command> command is identical to <command>auth
     get</command>, but also prints the internal authentication ID.
    </para>
   </sect3>
   <sect3 xml:id="storage-cephx-keymgmt-usermgmt-useradd">
    <title>Adding Users</title>
    <para>
     Adding a user creates a user name (<literal>TYPE.ID</literal>), a secret
     key, and any capabilities included in the command you use to create the
     user.
    </para>
    <para>
     A user's key enables the user to authenticate with the &ceph; storage
     cluster. The user's capabilities authorize the user to read, write, or
     execute on &ceph; monitors (mon), &ceph; OSDs (osd), or &ceph; metadata
     servers (mds).
    </para>
    <para>
     There are a few commands available to add a user:
    </para>
    <variablelist>
     <varlistentry>
      <term><command>ceph auth add</command></term>
      <listitem>
       <para>
        This command is the canonical way to add a user. It will create the
        user, generate a key, and add any specified capabilities.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>ceph auth get-or-create</command></term>
      <listitem>
       <para>
        This command is often the most convenient way to create a user, because
        it returns a keyfile format with the user name (in brackets) and the
        key. If the user already exists, this command simply returns the user
        name and key in the keyfile format. You may use the <option>-o
        <replaceable>filename</replaceable></option> option to save the output
        to a file.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>ceph auth get-or-create-key</command></term>
      <listitem>
       <para>
        This command is a convenient way to create a user and return the user's
        key (only). This is useful for clients that need the key only (for
        example &libvirt;). If the user already exists, this command simply
        returns the key. You may use the <option>-o
        <replaceable>filename</replaceable></option> option to save the output
        to a file.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     When creating client users, you may create a user with no capabilities. A
     user with no capabilities can authenticate but nothing more. Such client
     cannot retrieve the cluster map from the monitor. However, you can create
     a user with no capabilities if you want to defer adding capabilities later
     using the <command>ceph auth caps</command> command.
    </para>
    <para>
     A typical user has at least read capabilities on the &ceph; monitor and
     read and write capabilities on &ceph; OSDs. Additionally, a user's OSD
     permissions are often restricted to accessing a particular pool.
    </para>
<screen>&prompt.cephuser;ceph auth add client.john mon 'allow r' osd \
 'allow rw pool=liverpool'
&prompt.cephuser;ceph auth get-or-create client.paul mon 'allow r' osd \
 'allow rw pool=liverpool'
&prompt.cephuser;ceph auth get-or-create client.george mon 'allow r' osd \
 'allow rw pool=liverpool' -o george.keyring
&prompt.cephuser;ceph auth get-or-create-key client.ringo mon 'allow r' osd \
 'allow rw pool=liverpool' -o ringo.key</screen>
    <important>
     <para>
      If you provide a user with capabilities to OSDs, but you <emphasis>do
      not</emphasis> restrict access to particular pools, the user will have
      access to <emphasis>all</emphasis> pools in the cluster.
     </para>
    </important>
   </sect3>
   <sect3>
    <title>Modifying User Capabilities</title>
    <para>
     The <command>ceph auth caps</command> command allows you to specify a user
     and change the user's capabilities. Setting new capabilities will
     overwrite current ones. To view current capabilities run <command>ceph
     auth get
     <replaceable>USERTYPE</replaceable>.<replaceable>USERID</replaceable></command>.
     To add capabilities, you also need to specify the existing capabilities
     when using the following form:
    </para>
<screen>&prompt.cephuser;ceph auth caps <replaceable>USERTYPE</replaceable>.<replaceable>USERID</replaceable> <replaceable>daemon</replaceable> 'allow [r|w|x|*|...] \
     [pool=<replaceable>pool-name</replaceable>] [namespace=<replaceable>namespace-name</replaceable>]' [<replaceable>daemon</replaceable> 'allow [r|w|x|*|...] \
     [pool=<replaceable>pool-name</replaceable>] [namespace=<replaceable>namespace-name</replaceable>]']</screen>
    <para>
     For example:
    </para>
<screen>&prompt.cephuser;ceph auth get client.john
&prompt.cephuser;ceph auth caps client.john mon 'allow r' osd 'allow rw pool=prague'
&prompt.cephuser;ceph auth caps client.paul mon 'allow rw' osd 'allow r pool=prague'
&prompt.cephuser;ceph auth caps client.brian-manager mon 'allow *' osd 'allow *'</screen>
    <para>
     To remove a capability, you may reset the capability. If you want the user
     to have no access to a particular daemon that was previously set, specify
     an empty string:
    </para>
<screen>&prompt.cephuser;ceph auth caps client.ringo mon ' ' osd ' '</screen>
   </sect3>
   <sect3>
    <title>Deleting Users</title>
    <para>
     To delete a user, use <command>ceph auth del</command>:
    </para>
<screen>&prompt.cephuser;ceph auth del <replaceable>TYPE</replaceable>.<replaceable>ID</replaceable></screen>
    <para>
     where <replaceable>TYPE</replaceable> is one of <literal>client</literal>,
     <literal>osd</literal>, <literal>mon</literal>, or <literal>mds</literal>,
     and <replaceable>ID</replaceable> is the user name or ID of the daemon.
    </para>
    <para>
     If you created users with permissions strictly for a pool that no longer
     exists, you should consider deleting those users too.
    </para>
   </sect3>
   <sect3>
    <title>Printing a User's Key</title>
    <para>
     To print a user’s authentication key to standard output, execute the
     following:
    </para>
<screen>&prompt.cephuser;ceph auth print-key <replaceable>TYPE</replaceable>.<replaceable>ID</replaceable></screen>
    <para>
     where <replaceable>TYPE</replaceable> is one of <literal>client</literal>,
     <literal>osd</literal>, <literal>mon</literal>, or <literal>mds</literal>,
     and <replaceable>ID</replaceable> is the user name or ID of the daemon.
    </para>
    <para>
     Printing a user's key is useful when you need to populate client software
     with a user's key (such as &libvirt;), as in the following example:
    </para>
<screen>&prompt.root;mount -t ceph host:/ mount_point \
-o name=client.user,secret=`ceph auth print-key client.user`</screen>
   </sect3>
   <sect3 xml:id="storage-cephx-keymgmt-usermgmt-userimp">
    <title>Importing Users</title>
    <para>
     To import one or more users, use <command>ceph auth import</command> and
     specify a keyring:
    </para>
<screen>&prompt.cephuser;ceph auth import -i /etc/ceph/ceph.keyring</screen>
    <note>
     <para>
      The &ceph; storage cluster will add new users, their keys and their
      capabilities and will update existing users, their keys and their
      capabilities.
     </para>
    </note>
   </sect3>
  </sect2>

  <sect2 xml:id="storage-cephx-keymgmt-keyringmgmt">
   <title>Keyring Management</title>
   <para>
    When you access &ceph; via a &ceph; client, the client will look for a
    local keyring. &ceph; presets the keyring setting with the following four
    keyring names by default so you do not need to set them in your &ceph;
    configuration file unless you want to override the defaults:
   </para>
<screen>/etc/ceph/<replaceable>cluster</replaceable>.<replaceable>name</replaceable>.keyring
/etc/ceph/<replaceable>cluster</replaceable>.keyring
/etc/ceph/keyring
/etc/ceph/keyring.bin</screen>
   <para>
    The <replaceable>cluster</replaceable> metavariable is your &ceph; cluster
    name as defined by the name of the &ceph; configuration file.
    <filename>ceph.conf</filename> means that the cluster name is
    <literal>ceph</literal>, thus <literal>ceph.keyring</literal>. The
    <replaceable>name</replaceable> metavariable is the user type and user ID,
    for example <literal>client.admin</literal>, thus
    <literal>ceph.client.admin.keyring</literal>.
   </para>
   <para>
    After you create a user (for example
    <systemitem class="username">client.ringo</systemitem>), you must get the
    key and add it to a keyring on a &ceph; client so that the user can access
    the &ceph; storage cluster.
   </para>
   <para>
    <xref linkend="storage-cephx-keymgmt"/> details how to list, get, add,
    modify and delete users directly in the &ceph; storage cluster. However,
    &ceph; also provides the <command>ceph-authtool</command> utility to allow
    you to manage keyrings from a &ceph; client.
   </para>
   <sect3 xml:id="creating-keyring">
    <title>Creating a Keyring</title>
    <para>
     When you use the procedures in <xref linkend="storage-cephx-keymgmt"/> to
     create users, you need to provide user keys to the &ceph; client(s) so
     that the client can retrieve the key for the specified user and
     authenticate with the &ceph; storage cluster. &ceph; clients access
     keyrings to look up a user name and retrieve the user's key:
    </para>
<screen>&prompt.cephuser;ceph-authtool --create-keyring /path/to/keyring</screen>
    <para>
     When creating a keyring with multiple users, we recommend using the
     cluster name (for example <replaceable>cluster</replaceable>.keyring) for
     the keyring file name and saving it in the <filename>/etc/ceph</filename>
     directory so that the keyring configuration default setting will pick up
     the file name without requiring you to specify it in the local copy of
     your &ceph; configuration file. For example, create
     <filename>ceph.keyring</filename> by executing the following:
    </para>
<screen>&prompt.cephuser;ceph-authtool -C /etc/ceph/ceph.keyring</screen>
    <para>
     When creating a keyring with a single user, we recommend using the cluster
     name, the user type and the user name and saving it in the
     <filename>/etc/ceph</filename> directory. For example,
     <filename>ceph.client.admin.keyring</filename> for the
     <systemitem class="username">client.admin</systemitem> user.
    </para>
   </sect3>
   <sect3>
    <title>Adding a User to a Keyring</title>
    <para>
     When you add a user to the &ceph; storage cluster (see
     <xref linkend="storage-cephx-keymgmt-usermgmt-useradd"/>), you can
     retrieve the user, key and capabilities, and save the user to a keyring.
    </para>
    <para>
     If you only want to use one user per keyring, the <command>ceph auth
     get</command> command with the <option>-o</option> option will save the
     output in the keyring file format. For example, to create a keyring for
     the <systemitem class="username">client.admin</systemitem> user, execute
     the following:
    </para>
<screen>&prompt.cephuser;ceph auth get client.admin -o /etc/ceph/ceph.client.admin.keyring</screen>
    <para>
     When you want to import users to a keyring, you can use
     <command>ceph-authtool</command> to specify the destination keyring and
     the source keyring:
    </para>
<screen>&prompt.cephuser;ceph-authtool /etc/ceph/ceph.keyring \
  --import-keyring /etc/ceph/ceph.client.admin.keyring</screen>
  <important>
    <para>
      If your keyring is compromised, delete your key from the
      <filename>/etc/ceph</filename> directory and recreate a new key using the same
      instructions from <xref linkend="creating-keyring"/>.
    </para>
  </important>
   </sect3>
   <sect3>
    <title>Creating a User</title>
    <para>
     &ceph; provides the <command>ceph auth add</command> command to create a
     user directly in the &ceph; storage cluster. However, you can also create
     a user, keys and capabilities directly on a &ceph; client keyring. Then,
     you can import the user to the &ceph; storage cluster:
    </para>
<screen>&prompt.cephuser;ceph-authtool -n client.ringo --cap osd 'allow rwx' \
  --cap mon 'allow rwx' /etc/ceph/ceph.keyring</screen>
    <para>
     You can also create a keyring and add a new user to the keyring
     simultaneously:
    </para>
<screen>&prompt.cephuser;ceph-authtool -C /etc/ceph/ceph.keyring -n client.ringo \
  --cap osd 'allow rwx' --cap mon 'allow rwx' --gen-key</screen>
    <para>
     In the previous scenarios, the new user
     <systemitem class="username">client.ringo</systemitem> is only in the
     keyring. To add the new user to the &ceph; storage cluster, you must still
     add the new user to the cluster:
    </para>
<screen>&prompt.cephuser;ceph auth add client.ringo -i /etc/ceph/ceph.keyring</screen>
   </sect3>
   <sect3>
    <title>Modifying Users</title>
    <para>
     To modify the capabilities of a user record in a keyring, specify the
     keyring and the user followed by the capabilities:
    </para>
<screen>&prompt.cephuser;ceph-authtool /etc/ceph/ceph.keyring -n client.ringo \
  --cap osd 'allow rwx' --cap mon 'allow rwx'</screen>
    <para>
     To update the modified user within the &ceph; cluster environment, you
     must import the changes from the keyring to the user entry in the &ceph;
     cluster:
    </para>
<screen>&prompt.cephuser;ceph auth import -i /etc/ceph/ceph.keyring</screen>
    <para>
     See <xref linkend="storage-cephx-keymgmt-usermgmt-userimp"/> for details
     on updating a &ceph; storage cluster user from a keyring.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="storage-cephx-keymgmt-cmdline">
   <title>Command Line Usage</title>
   <para>
    The <command>ceph</command> command supports the following options related
    to the user name and secret manipulation:
   </para>
   <variablelist>
    <varlistentry>
     <term><option>--id</option> or <option>--user</option></term>
     <listitem>
      <para>
       &ceph; identifies users with a type and an ID
       (<replaceable>TYPE</replaceable>.<replaceable>ID</replaceable>, such as
       <systemitem class="username">client.admin</systemitem> or
       <systemitem class="username">client.user1</systemitem>). The
       <option>id</option>, <option>name</option> and <option>-n</option>
       options enable you to specify the ID portion of the user name (for
       example <systemitem class="username">admin</systemitem> or
       <systemitem class="username">user1</systemitem>). You can specify the
       user with the --id and omit the type. For example, to specify user
       client.foo enter the following:
      </para>
<screen>&prompt.cephuser;ceph --id foo --keyring /path/to/keyring health
&prompt.cephuser;ceph --user foo --keyring /path/to/keyring health</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>--name</option> or <option>-n</option></term>
     <listitem>
      <para>
       &ceph; identifies users with a type and an ID
       (<replaceable>TYPE</replaceable>.<replaceable>ID</replaceable>, such as
       <systemitem class="username">client.admin</systemitem> or
       <systemitem class="username">client.user1</systemitem>). The
       <option>--name</option> and <option>-n</option> options enable you to
       specify the fully qualified user name. You must specify the user type
       (typically <literal>client</literal>) with the user ID:
      </para>
<screen>&prompt.cephuser;ceph --name client.foo --keyring /path/to/keyring health
&prompt.cephuser;ceph -n client.foo --keyring /path/to/keyring health</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>--keyring</option></term>
     <listitem>
      <para>
       The path to the keyring containing one or more user name and secret. The
       <option>--secret</option> option provides the same functionality, but it
       does not work with &rgw;, which uses <option>--secret</option> for
       another purpose. You may retrieve a keyring with <command>ceph auth
       get-or-create</command> and store it locally. This is a preferred
       approach, because you can switch user names without switching the
       keyring path:
      </para>
<screen>&prompt.cephuser;rbd map --id foo --keyring /path/to/keyring mypool/myimage</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
</chapter>
