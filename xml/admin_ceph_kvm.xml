<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-ceph-kvm">
 <title>&ceph; as a Back-end for &qemu; &kvm; Instance</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/maintenance/ses5.5/xml/</dm:editurl>
        <dm:maintainer>tbazant@suse.com</dm:maintainer>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release>SES 5</dm:release>
      </dm:docmanager>
    </info>
    <para>
  The most frequent &ceph; use case involves providing block device images to
  virtual machines. For example, a user may create a 'golden' image with an OS
  and any relevant software in an ideal configuration. Then, the user takes a
  snapshot of the image. Finally, the user clones the snapshot (usually many
  times, see <xref linkend="cha-ceph-snapshots-rbd"/> for details). The ability to
  make copy-on-write clones of a snapshot means that &ceph; can provision block
  device images to virtual machines quickly, because the client does not need
  to download an entire image each time it spins up a new virtual machine.
 </para>
 <para>
  &ceph; block devices can integrate with the &qemu; virtual machines. For more
  information on &qemu; &kvm;, see
  <link xlink:href="https://documentation.suse.com/sles/12-SP5/single-html/SLES-virtualization/#part-virt-qemu"/>.
 </para>
 <sect1 xml:id="ceph-kvm-install">
  <title>Installation</title>

  <para>
   In order to use &ceph; block devices, &qemu; needs to have the appropriate
   driver installed. Check whether the <systemitem>qemu-block-rbd</systemitem>
   package is installed, and install it if needed:
  </para>

<screen>&prompt.root;zypper install qemu-block-rbd</screen>
 </sect1>
 <sect1 xml:id="ceph-kvm-usage">
  <title>Usage</title>

  <para>
   The &qemu; command line expects you to specify the pool name and image name.
   You may also specify a snapshot name.
  </para>

<screen>qemu-img <replaceable>command</replaceable> <replaceable>options</replaceable> \
rbd:<replaceable>pool-name</replaceable>/<replaceable>image-name</replaceable>@<replaceable>snapshot-name</replaceable><replaceable>:option1=value1</replaceable><replaceable>:option2=value2...</replaceable></screen>

  <para>
   For example, specifying the <replaceable>id</replaceable> and
   <replaceable>conf</replaceable> options might look like the following:
  </para>

<screen>qemu-img <replaceable>command</replaceable> <replaceable>options</replaceable> \
rbd:<replaceable>pool_name</replaceable>/<replaceable>image_name</replaceable>:<option>id=glance:conf=/etc/ceph/ceph.conf</option></screen>
 </sect1>
 <sect1>
  <title>Creating Images with &qemu;</title>

  <para>
   You can create a block device image from &qemu;. You must specify
   <literal>rbd</literal>, the pool name, and the name of the image you want to
   create. You must also specify the size of the image.
  </para>

<screen>qemu-img create -f raw rbd:<replaceable>pool-name</replaceable>/<replaceable>image-name</replaceable> <replaceable>size</replaceable></screen>

  <para>
   For example:
  </para>

<screen>qemu-img create -f raw rbd:pool1/image1 10G
Formatting 'rbd:pool1/image1', fmt=raw size=10737418240 nocow=off cluster_size=0</screen>

  <important>
   <para>
    The <literal>raw</literal> data format is really the only sensible format
    option to use with RBD. Technically, you could use other &qemu;-supported
    formats such as <literal>qcow2</literal>, but doing so would add additional
    overhead, and would also render the volume unsafe for virtual machine live
    migration when caching is enabled.
   </para>
  </important>
 </sect1>
 <sect1>
  <title>Resizing Images with &qemu;</title>

  <para>
   You can resize a block device image from &qemu;. You must specify
   <literal>rbd</literal>, the pool name, and the name of the image you want to
   resize. You must also specify the size of the image.
  </para>

<screen>qemu-img resize rbd:<replaceable>pool-name</replaceable>/<replaceable>image-name</replaceable> <replaceable>size</replaceable></screen>

  <para>
   For example:
  </para>

<screen>qemu-img resize rbd:pool1/image1 9G
Image resized.</screen>
 </sect1>
 <sect1>
  <title>Retrieving Image Info with &qemu;</title>

  <para>
   You can retrieve block device image information from &qemu;. You must
   specify <literal>rbd</literal>, the pool name, and the name of the image.
  </para>

<screen>qemu-img info rbd:<replaceable>pool-name</replaceable>/<replaceable>image-name</replaceable></screen>

  <para>
   For example:
  </para>

<screen>qemu-img info rbd:pool1/image1
image: rbd:pool1/image1
file format: raw
virtual size: 9.0G (9663676416 bytes)
disk size: unavailable
cluster_size: 4194304</screen>
 </sect1>
 <sect1>
  <title>Running &qemu; with RBD</title>

  <para>
   &qemu; can access an image as a virtual block device directly via
   <systemitem>librbd</systemitem>. This avoids an additional context switch,
   and can take advantage of RBD caching.
  </para>

  <para>
   You can use <command>qemu-img</command> to convert existing virtual machine
   images to &ceph; block device images. For example, if you have a qcow2
   image, you could run:
  </para>

<screen>qemu-img convert -f qcow2 -O raw sles12.qcow2 rbd:pool1/sles12</screen>

  <para>
   To run a virtual machine booting from that image, you could run:
  </para>

<screen>&prompt.root;qemu -m 1024 -drive format=raw,file=rbd:pool1/sles12</screen>

  <para>
   <link xlink:href="http://ceph.com/docs/master/rbd/rbd-config-ref/#cache-settings">RBD
   caching</link> can significantly improve performance. &qemu;’s cache
   options control <systemitem>librbd</systemitem> caching:
  </para>

<screen>&prompt.root;qemu -m 1024 -drive format=rbd,file=rbd:pool1/sles12,cache=writeback</screen>
 </sect1>
 <sect1>
  <title>Enabling Discard/TRIM</title>

  <para>
   &ceph; block devices support the discard operation. This means that a guest
   can send TRIM requests to let a &ceph; block device reclaim unused space.
   This can be enabled in the guest by mounting <systemitem>XFS</systemitem>
   with the discard option.
  </para>

  <para>
   For this to be available to the guest, it must be explicitly enabled for the
   block device. To do this, you must specify a
   <option>discard_granularity</option> associated with the drive:
  </para>

<screen>&prompt.root;qemu -m 1024 -drive format=raw,file=rbd:pool1/sles12,id=drive1,if=none \
-device driver=ide-hd,drive=drive1,discard_granularity=512</screen>

  <note>
   <para>
    The above example uses the IDE driver. The virtio driver does not support
    discard.
   </para>
  </note>

  <para>
   If using <systemitem>libvirt</systemitem>, edit your libvirt domain’s
   configuration file using <command>virsh edit</command> to include the
   <literal>xmlns:qemu</literal> value. Then, add a <literal>qemu:commandline
   block</literal> as a child of that domain. The following example shows how
   to set two devices with <literal>qemu id=</literal> to different
   <literal>discard_granularity</literal> values.
  </para>

<screen>
&lt;domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'&gt;
 &lt;qemu:commandline&gt;
  &lt;qemu:arg value='-set'/&gt;
  &lt;qemu:arg value='block.scsi0-0-0.discard_granularity=4096'/&gt;
  &lt;qemu:arg value='-set'/&gt;
  &lt;qemu:arg value='block.scsi0-0-1.discard_granularity=65536'/&gt;
 &lt;/qemu:commandline&gt;
&lt;/domain&gt;</screen>
 </sect1>
 <sect1>
  <title>&qemu; Cache Options</title>

  <para>
   &qemu;’s cache options correspond to the following &ceph; RBD Cache
   settings.
  </para>

  <para>
   Writeback:
  </para>

<screen>rbd_cache = true</screen>

  <para>
   Writethrough:
  </para>

<screen>rbd_cache = true
rbd_cache_max_dirty = 0</screen>

  <para>
   None:
  </para>

<screen>rbd_cache = false</screen>

  <para>
   &qemu;’s cache settings override &ceph;’s default settings (settings
   that are not explicitly set in the &ceph; configuration file). If you
   explicitly set
   <link xlink:href="http://ceph.com/docs/master/rbd/rbd-config-ref/#cache-settings">RBD
   Cache</link> settings in your &ceph; configuration file, your &ceph;
   settings override the &qemu; cache settings. If you set cache settings on
   the &qemu; command line, the &qemu; command line settings override the
   &ceph; configuration file settings.
  </para>
 </sect1>
</chapter>
