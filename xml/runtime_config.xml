<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-ceph-configuration">
 <title>&ceph; Cluster Configuration</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/maintenance/ses5/xml/</dm:editurl>
   <dm:translation>yes</dm:translation>
   <dm:release>SES 6</dm:release>
  </dm:docmanager>
 </info>
 <para>
  This chapter provides a list of important &ceph; cluster settings and their
  description. The settings are sorted by topic.
 </para>
 <sect1 xml:id="ceph-config-runtime">
  <title>Runtime Configuration</title>

  <para>
   <xref linkend="ds-custom-cephconf"/> describes how to make changes to the
   &ceph; configuration file <filename>ceph.conf</filename>. However, the
   actual cluster behavior is determined not by the current state of the
   <filename>ceph.conf</filename> file but by the configuration of the running
   &ceph; daemons, which is stored in memory.
  </para>

  <para>
   You can query an individual &ceph; daemon for a particular configuration
   setting using the <emphasis>admin socket</emphasis> on the node where the
   daemon is running. For example, the following command gets the value of the
   <option>osd_max_write_size</option> configuration parameter from daemon
   named <literal>osd.0</literal>:
  </para>

<screen>&prompt.cephuser;ceph --admin-daemon /var/run/ceph/ceph-osd.0.asok \
config get osd_max_write_size
{
  "osd_max_write_size": "90"
}</screen>

  <para>
   You can also <emphasis>change</emphasis> the daemons' settings at runtime.
   Remember that this change is temporary and will be lost after the next
   daemon restart. For example, the following command changes the
   <option>osd_max_write_size</option> parameter to '50' for all OSDs in the
   cluster:
  </para>

<screen>&prompt.cephuser;ceph tell osd.* injectargs --osd_max_write_size 50</screen>

  <warning>
   <title><command>injectargs</command> is Not Reliable</title>
   <para>
    Unfortunately, changing the cluster settings with the
    <command>injectargs</command> command is not 100% reliable. If you need to
    be sure that the changed parameter is active, change it in the
    configuration files on all cluster nodes and restart all daemons in the
    cluster.
   </para>
  </warning>
 </sect1>
 <sect1 xml:id="config-osd-and-bluestore">
<!-- based on http://docs.ceph.com/docs/nautilus/rados/configuration/bluestore-config-ref/#automatic-cache-sizing -->

  <title>&osd; and &bluestore;</title>

  <sect2 xml:id="config-auto-cache-sizing">
   <title>Automatic Cache Sizing</title>
   <para>
    &bluestore; can be configured to automatically resize its caches when
    <option>tc_malloc</option> is configured as the memory allocator and the
    <option>bluestore_cache_autotune</option> setting is enabled. This option
    is currently enabled by default. &bluestore; will attempt to keep OSD heap
    memory usage under a designated target size via the
    <option>osd_memory_target</option> configuration option. This is a best
    effort algorithm and caches will not shrink smaller than the amount
    specified by <option>osd_memory_cache_min</option>. Cache ratios will be
    chosen based on a hierarchy of priorities. If priority information is not
    available, the <option>bluestore_cache_meta_ratio</option> and
    <option>bluestore_cache_kv_ratio</option> options are used as fallbacks.
   </para>
   <variablelist>
    <varlistentry>
     <term><option>bluestore_cache_autotune</option></term>
     <listitem>
      <para>
       Automatically tunes the ratios assigned to different &bluestore; caches
       while respecting minimum values. Default is <option>True</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>osd_memory_target</option></term>
     <listitem>
      <para>
       When <option>tc_malloc</option> and
       <option>bluestore_cache_autotune</option> are enabled, try to keep this
       many bytes mapped in memory.
      </para>
      <note>
       <para>
        This may not exactly match the RSS memory usage of the process. While
        the total amount of heap memory mapped by the process should generally
        stay close to this target, there is no guarantee that the kernel will
        actually reclaim memory that has been unmapped.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>osd_memory_cache_min</option></term>
     <listitem>
      <para>
       When <option>tc_malloc</option> and
       <option>bluestore_cache_autotune</option> are enabled, set the minimum
       amount of memory used for caches.
      </para>
      <note>
       <para>
        Setting this value too low can result in significant cache thrashing.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
</chapter>
