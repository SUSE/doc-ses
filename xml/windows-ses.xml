<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="windows-ses">
 <title>&ceph; for &mswin;</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/master/xml/</dm:editurl>
   <dm:translation>yes</dm:translation>
   <dm:release>SES 7</dm:release>
  </dm:docmanager>
 </info>
 <sect1 xml:id="intro-windows">
   <title>Introduction</title>
   <para>
     &ceph; is a highly-resilient software-defined-storage offering, which has
     only been available to &mswin; environments through the use of &iscsi; or
     CIFS gateways. This gateway architecture introduces a single point of
     contact and limits fault-tolerance and bandwidth, in comparison to the
     native I/O paths of &ceph; with &rados;.
   </para>
   <para>
     In order to bring the benefits of native &ceph; to &mswin; environments,
     &suse; partnered with Cloudbase Solutions to port &ceph; to the &mswin;
     platform. This work is nearing completion, and provides the following
     functionality:
   </para>
   <itemizedlist>
     <listitem>
       <para>
         &rbd; (RBD)
       </para>
     </listitem>
     <listitem>
       <para>
         &cephfs;
       </para>
     </listitem>
   </itemizedlist>
   <para>
     You can find additional information on the background of this effort
     through the following SUSECON Digital session:
   </para>
   <itemizedlist>
     <listitem>
       <para>
         &ceph; in a Windows World (<link xlink:href="https://www.youtube.com/watch?v=BWZIwXLcNts">TUT-1121</link>)
         Presenters: Mike Latimer (SUSE)
         Alessandro Pilotti (Cloudbase Solutions)
       </para>
     </listitem>
   </itemizedlist>
 </sect1>
 <sect1 xml:id="supported-platforms">
   <title>Supported Platforms</title>
   <para>
     &mswin; Server 2016 and 2019 are supported. Previous
     &mswin; Server versions, including &mswin; client versions such as
     &mswin; 10, may work, but for the purpose of this document have not been
     thoroughly tested.
   </para>
   <note>
     <para>
       Early builds of &mswin; Server 2016 do not provide UNIX sockets, in
       which case the &ceph; admin socket feature is unavailable.
     </para>
   </note>
 </sect1>
 <sect1 xml:id="compatibility">
   <title>Compatibility</title>
   <para>
     &rbd; images can be exposed to the OS and host &mswin; partitions or they
     can be attached to &hyper; VMs in the same way as &iscsi; disks.
   </para>
   <note>
     <para>
       At the moment, the Microsoft Failover Cluster refuses to use
       Windows Block Device (WNBD) driver
       disks as Cluster Shared Volumes (CSVs) underlying storage.
     </para>
   </note>
   <para>
     &ostack; integration has been proposed and may be included in the next
     &ostack; release. This will allow RBD images managed
     by &ostack; &o_blockstore; to be attached to &hyper; VMs managed by
     &ostack; &o_comp;.
   </para>
 </sect1>
 <sect1 xml:id="install-config">
   <title>Installation and Configuration</title>
   <para>
     &ceph; for &mswin; can be easily installed through the <filename>SES4Win.msi</filename>
     setup wizard. You can download a beta version of it from <link xlink:href="https://beta.suse.com/private/SLE15/SP2/download/SES7/SES4Win/">SES4Win</link>.
     This wizard performs the following functions:
   </para>
   <itemizedlist>
     <listitem>
       <para>
         Installs &ceph;-related code to the <filename>C:\Program Files\Ceph</filename>
         directory.
       </para>
     </listitem>
     <listitem>
       <para>
         Adds <filename>C:\Program Files\Ceph\bin</filename> to the
         <replaceable>%PATH%</replaceable> environment variable.
       </para>
     </listitem>
     <listitem>
       <para>
         Creates a &ceph; RBD Mapping Service to automatically map RBD devices
         upon machine restart (using <filename>rbd-wnbd.exe</filename>).
       </para>
     </listitem>
   </itemizedlist>
   <para>
     After installing &ceph; for &mswin;, manual modifications are required to
     provide access to a &ceph; cluster. The files which must be created or
     modified are as follows:
   </para>
<screen>
C:\ProgramData\ceph\ceph.conf
C:\ProgramData\ceph\keyring
</screen>
   <para>
     These files can be copied directly from an existing OSD node in the
     cluster. Sample configuration files are provided in
     <xref linkend="windows-appendix-a"/>.
   </para>
 </sect1>
 <sect1 xml:id="rados-block-device">
   <title>&rbd; (RBD)</title>
   <para>
     Support for RBD devices is possible through a combination of &ceph;
     tools and &mswin; WNBD. This driver is in the process of being certified by
     the Windows Hardware Quality Labs (WHQL).
   </para>
   <para>
     Once installed, the WNBD SCSI Virtual Adapter driver can be seen in the
     <literal>Device Manager</literal> as a storage controller. Multiple adapters
     may be seen, in order to handle multiple RBD connections.
   </para>
   <para>
     The <command>rbd</command> command is used to create, remove, import, export,
     map, or unmap images, exactly like it is used on Linux.
   </para>
   <sect2 xml:id="mapping-images">
     <title>Mapping Images</title>
     <para>
       The behavior of the <command>rbd</command> command is similar to its Linux counterpart,
       with a few notable differences:
     </para>
     <itemizedlist>
       <listitem>
         <para>
           Device paths cannot be requested. The disk number and path is
           picked by &mswin;. If a device path is provided by the user when
           mapping an image, it is used as an identifier. This can also
           be used when unmapping the image.
         </para>
       </listitem>
       <listitem>
         <para>
           The <command>show</command> command was added, which describes a specific mapping.
           This can be used for retrieving the disk path.
         </para>
       </listitem>
       <listitem>
         <para>
           The <command>service</command> command was added, allowing <literal>rbd-wnbd</literal> to run as a &mswin;
           service. All mappings are currently persistent and will be recreated when
           the service stops, unless they are explicitly unmapped. The service disconnects
           the mappings when being stopped.
         </para>
       </listitem>
       <listitem>
         <para>
           The <command>list</command> command also includes a <literal>status</literal> column.
         </para>
       </listitem>
     </itemizedlist>
     <para>
       The mapped images can either be consumed by the host directly or exposed to &hyper; VMs.
     </para>
   </sect2>
   <sect2 xml:id="hyperv-vm-disks">
     <title>&hyper; VM Disks</title>
     <para>
       The following sample imports an RBD image and boots a &hyper; VM using it.
     </para>
<screen>
      # Feel free to use any other image. This one is convenient to use for
      # testing purposes because it's very small (~15MB) and the login prompt
      # prints the pre-configured password.
      wget http://download.cirros-cloud.net/0.5.1/cirros-0.5.1-x86_64-disk.img `
           -OutFile cirros-0.5.1-x86_64-disk.img

      # We'll need to make sure that the imported images are raw (so no qcow2 or vhdx).
      # You may get qemu-img from https://cloudbase.it/qemu-img-windows/
      # You can add the extracted location to $env:Path or update the path accordingly.
      qemu-img convert -O raw cirros-0.5.1-x86_64-disk.img cirros-0.5.1-x86_64-disk.raw

      rbd import cirros-0.5.1-x86_64-disk.raw
      # Let's give it a hefty 100MB size.
      rbd resize cirros-0.5.1-x86_64-disk.raw --size=100MB

      rbd-wnbd map cirros-0.5.1-x86_64-disk.raw

      # Let's have a look at the mappings.
      rbd-wnbd list
      Get-Disk

      $mappingJson = rbd-wnbd show cirros-0.5.1-x86_64-disk.raw --format=json
      $mappingJson = $mappingJson | ConvertFrom-Json

      $diskNumber = $mappingJson.disk_number

      New-VM -VMName BootFromRBD -MemoryStartupBytes 512MB
      # The disk must be turned offline before it can be passed to &hyper; VMs
      Set-Disk -Number $diskNumber -IsOffline $true
      Add-VMHardDiskDrive -VMName BootFromRBD -DiskNumber $diskNumber
      Start-VM -VMName BootFromRBD
</screen>
   </sect2>
   <sect2 xml:id="windows-partitions">
     <title>&mswin; Partitions</title>
     <para>
       The following sample creates an empty RBD image, attaches it to the host
       and initializes a partition:
     </para>
<screen>
  rbd create blank_image --size=1G
  rbd-wnbd map blank_image

  $mappingJson = rbd-wnbd show blank_image --format=json
  $mappingJson = $mappingJson | ConvertFrom-Json

  $diskNumber = $mappingJson.disk_number

  # The disk must be online before creating or accessing partitions.
  Set-Disk -Number $diskNumber -IsOffline $false

  # Initialize the disk, partition it and create a fileystem.
  Get-Disk -Number $diskNumber | `
      Initialize-Disk -PassThru | `
      New-Partition -AssignDriveLetter -UseMaximumSize | `
      Format-Volume -Force -Confirm:$false
</screen>
   </sect2>
 </sect1>
 <sect1 xml:id="rbd-windows-service">
   <title>RBD &mswin; Service</title>
   <para>
     In order to ensure that <command>rbd-wnbd</command> mappings survive host reboots, a new
     &mswin; service, called the &ceph; RBD Mapping Service has been created.
     This service automatically maintains mappings as they are added using
     the &ceph; tools. All mappings are currently persistent and are recreated
     when the service starts, unless they are explicitly unmapped. The service
     disconnects all mappings when stopped.
   </para>
   <para>
     This service also adjusts the &mswin; service start order so that RBD
     images can be mapped before starting any services that may depend on them.
     For example, VMs.
   </para>
   <para>
     RBD maps are stored in the &mswin; registry at the following location:
   </para>
<screen>
SYSTEM\CurrentControlSet\Services\rbd-wnbd
</screen>
 </sect1>
 <sect1 xml:id="windows-cephfs">
   <title>&cephfs;</title>
   <note>
    <para>
      The following feature is <emphasis>experimental</emphasis>, and is not
      intended for use in production environments.
    </para>
   </note>
   <para>
     &ceph; for &mswin; provides &cephfs; support through the Dokany FUSE wrapper.
     In order to use &cephfs;, install Dokany v1.3.1 or newer using the
     installers available here: https://github.com/dokan-dev/dokany/releases
   </para>
   <para>
     With Dokany installed, and <filename>ceph.conf</filename> and <filename>ceph.client.admin.keyring</filename>
     configuration files in place, &cephfs; can be mounted using the
     <command>ceph-dokan.exe</command> command. For example:
   </para>
<screen>
ceph-dokan.exe -l x
</screen>
   <para>
     This command mounts the default &ceph; file system using the drive
     letter <literal>X</literal>. If <filename>ceph.conf</filename> is not placed
     at the default location
     (<filename>C:\ProgramData\ceph\ceph.conf</filename>), a <option>-c</option>
     parameter can be used to specify the location of <filename>ceph.conf</filename>.
   </para>
   <para>
     The <option>-l</option> argument also allows using an empty folder as a
     mountpoint instead of a drive letter.
   </para>
   <para>
     The UID and GID used for mounting the file system defaults to <literal>0</literal>
     and may be changed using the <option>-u</option> and <option>-g</option> arguments.
     <option>-n</option> can be used in order to skip enforcing permissions on
     client side. Be aware that &mswin; Access Control Lists (ACLs) are
     ignored. Portable Operating System Interface (POSIX) ACLs are supported but
     cannot be modified using the current CLI. In the future, we may add some
     command actions to change file ownership or permissions.
   </para>
   <para>
     For debugging purposes, <option>-d</option> and  <option>-s</option> may be used.
     The former enables debug output and the latter enables <literal>stderr</literal>
     logging. By default, debug messages are sent to a connected debugger.
   </para>
   <para>
     You may use <option>--help</option> to get the full list of available options.
   </para>
 </sect1>
</chapter>
