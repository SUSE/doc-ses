<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
 xml:id="admin-caasp-ceph-common-issues">
<!-- ============================================================== -->
 <title>Common Issues</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/master/xml/</dm:editurl>
   <dm:translation>yes</dm:translation>
   <dm:release>SES 7</dm:release>
  </dm:docmanager>
 </info>
 <sect1 xml:id="ceph-common-issues">
  <title>&ceph; Common Issues</title>

  <para>
   Many of these problem cases are hard to summarize down to a short phrase
   that adequately describes the problem. Each problem will start with a
   bulleted list of symptoms. Keep in mind that all symptoms may not apply,
   depending on the configuration of &rook;. If the majority of the symptoms
   are seen, then there is a fair chance that you are experiencing that problem.
  </para>

  <sect2 xml:id="troubleshooting-techniques">
   <title>Troubleshooting Techniques</title>
   <para>
    There are two main categories of information you will need to investigate
    issues in the cluster:
   </para>
   <orderedlist>
    <listitem>
     <para>
      &kube; status and logs.
     </para>
    </listitem>
    <listitem>
     <para>
      &ceph; cluster status.
     </para>
    </listitem>
   </orderedlist>
   <sect3 xml:id="ceph-tools">
    <title>&ceph; Tools</title>
    <para>
     After you verify the basic health of the running pods, next you will want
     to run &ceph; tools for status of the storage components. There are two
     ways to run the &ceph; tools, either in the &rook; toolbox or inside other
     &rook; pods that are already running.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Logs on a specific node to find why a PVC is failing to mount: &rook;
       agent errors around the attach/detach:
      </para>
<screen>kubectl logs -n rook-ceph <replaceable>rook-ceph-agent-pod</replaceable></screen>
     </listitem>
     <listitem>
      <para>
       See the <xref linkend="log-collection"/> for a script that will help you
       gather the logs.
      </para>
     </listitem>
     <listitem>
      <para>
       Other artifacts:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         The monitors that are expected to be in quorum:
        </para>
<screen>kubectl -n &lt;cluster-namespace&gt; get configmap rook-ceph-mon-endpoints -o yaml | grep data</screen>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
    <sect4 xml:id="tools-in-the-rook-toolbox">
     <title>Tools in the &rook; Toolbox</title>
     <para>
      The <literal>rook-ceph-tools pod</literal> provides a simple environment
      to run &ceph; tools. Once the pod is up and running, connect to the pod
      to execute &ceph; commands to evaluate that current state of the cluster.
     </para>
<screen>
kubectl -n rook-ceph exec -it $(kubectl -n rook-ceph get pod -l &quot;app=rook-ceph-tools&quot; -o jsonpath='{.items[0].metadata.name}') bash
</screen>
    </sect4>
    <sect4 xml:id="ceph-commands">
     <title>&ceph; Commands</title>
     <para>
      Here are some common commands to troubleshoot a &ceph; cluster:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <command>ceph status</command>
       </para>
      </listitem>
      <listitem>
       <para>
        <command>ceph osd status</command>
       </para>
      </listitem>
      <listitem>
       <para>
        <command>ceph osd df</command>
       </para>
      </listitem>
      <listitem>
       <para>
        <command>ceph osd utilization</command>
       </para>
      </listitem>
      <listitem>
       <para>
        <command>ceph osd pool stats</command>
       </para>
      </listitem>
      <listitem>
       <para>
        <command>ceph osd tree</command>
       </para>
      </listitem>
      <listitem>
       <para>
        <command>ceph pg stat</command>
       </para>
      </listitem>
     </itemizedlist>
     <para>
      The first two status commands provide the overall cluster health. The
      normal state for cluster operations is <literal>HEALTH_OK</literal>, but
      will still function when the state is in a <literal>HEALTH_WARN</literal>
      state. If you are in a <literal>WARN</literal> state, then the cluster is
      in a condition that it may enter the <literal>HEALTH_ERROR</literal>
      state at which point <emphasis>all</emphasis> disk I/O operations are
      halted. If a <literal>HEALTH_WARN</literal> state is observed, then one
      should take action to prevent the cluster from halting when it enters the
      <literal>HEALTH_ERROR</literal> state.
     </para>
    </sect4>
   </sect3>
  </sect2>

  <sect2 xml:id="cluster-failing-to-service-requests">
   <title>Cluster failing to service requests</title>
   <sect3 xml:id="symptoms-1">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       Execution of the &ceph; command hangs.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>PersistentVolumes</literal> are not being created.
      </para>
     </listitem>
     <listitem>
      <para>
       Large amount of slow requests are blocking.
      </para>
     </listitem>
     <listitem>
      <para>
       Large amount of stuck requests are blocking.
      </para>
     </listitem>
     <listitem>
      <para>
       One or more MONs are restarting periodically.
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="investigation">
    <title>Investigation</title>
    <para>
     Create a <literal>rook-ceph-tools pod</literal> to investigate the current
     state of &ceph;. Here is an example of what one might see. In this case,
     the <command>ceph status</command> command would just hang, so a CTRL-C
     needed to be sent.
    </para>
<screen>kubectl -n rook-ceph exec -it $(kubectl -n rook-ceph get pod -l &quot;app=rook-ceph-tools&quot; -o jsonpath='{.items[0].metadata.name}') bash
root@rook-ceph-tools:/# ceph status
^CCluster connection interrupted or timed out
</screen>
    <para>
     Another indication is when one or more of the MON pods restart frequently.
     Note the <quote>mon107</quote> that has only been up for 16 minutes in the
     following output.
    </para>
<screen>kubectl -n rook-ceph get all -o wide --show-all
  NAME                                 READY     STATUS    RESTARTS   AGE       IP               NODE
  po/rook-ceph-mgr0-2487684371-gzlbq   1/1       Running   0          17h       192.168.224.46   k8-host-0402
  po/rook-ceph-mon107-p74rj            1/1       Running   0          16m       192.168.224.28   k8-host-0402
  rook-ceph-mon1-56fgm                 1/1       Running   0          2d        192.168.91.135   k8-host-0404
  rook-ceph-mon2-rlxcd                 1/1       Running   0          2d        192.168.123.33   k8-host-0403
  rook-ceph-osd-bg2vj                  1/1       Running   0          2d        192.168.91.177   k8-host-0404
  rook-ceph-osd-mwxdm                  1/1       Running   0          2d        192.168.123.31   k8-host-0403
</screen>
   </sect3>
   <sect3 xml:id="solution">
    <title>Solution</title>
    <para>
     What is happening here is that the MON pods are restarting and one or more
     of the &ceph; daemons are not getting configured with the proper cluster
     information. This is commonly the result of not specifying a value for
     <literal>dataDirHostPath</literal> in your Cluster CRD.
    </para>
    <para>
     The <literal>dataDirHostPath</literal> setting specifies a path on the
     local host for the &ceph; daemons to store configuration and data. Setting
     this to a path like <filename>/var/lib/rook</filename>, reapplying your
     cluster CRD and restarting all the &ceph; daemons (MON, MGR, OSD, RGW)
     should solve this problem. After the &ogw; daemons have been restarted, it
     is advisable to restart the <literal>rook-tools</literal> pod.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="monitors-are-the-only-pods-running">
   <title>Monitors are the Only PODs Running</title>
   <sect3 xml:id="symptoms-2">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       &rook; operator is running.
      </para>
     </listitem>
     <listitem>
      <para>
       Either a single mon starts or the MONs skip letters, specifically named
       <literal>a</literal>, <literal>d</literal>, and <literal>f</literal>.
      </para>
     </listitem>
     <listitem>
      <para>
       No MGR, OSD, or other daemons are created.
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="investigation-1">
    <title>Investigation</title>
    <para>
     When the operator is starting a cluster, the operator will start one MON
     at a time and check that they are healthy before continuing to bring up
     all three MONs. If the first MON is not detected healthy, the operator
     will continue to check until it is healthy. If the first MON fails to
     start, a second and then a third MON may attempt to start. However, they
     will never form a quorum, and orchestration will be blocked from
     proceeding.
    </para>
    <para>
     The likely causes for the MON health not being detected:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       The operator pod does not have network connectivity to the MON pod.
      </para>
     </listitem>
     <listitem>
      <para>
       The MON pod is failing to start.
      </para>
     </listitem>
     <listitem>
      <para>
       One or more MON pods are in running state, but are not able to form a
       quorum.
      </para>
     </listitem>
    </itemizedlist>
    <sect4 xml:id="operator-fails-to-connect-to-the-mon">
     <title>Operator Fails to Connect to the MON</title>
     <para>
      First look at the logs of the operator to confirm if it is able to
      connect to the MONs.
     </para>
<screen>kubectl -n rook-ceph logs -l app=rook-ceph-operator</screen>
     <para>
      Likely you will see an error similar to the following that the operator
      is timing out when connecting to the MON. The last command is
      <command>ceph mon_status</command>, followed by a timeout message five
      minutes later.
     </para>
<screen>
  2018-01-21 21:47:32.375833 I | exec: Running command: ceph mon_status --cluster=rook --conf=/var/lib/rook/rook-ceph/rook.config --keyring=/var/lib/rook/rook-ceph/client.admin.keyring --format json --out-file /tmp/442263890
  2018-01-21 21:52:35.370533 I | exec: 2018-01-21 21:52:35.071462 7f96a3b82700  0 monclient(hunting): authenticate timed out after 300
  2018-01-21 21:52:35.071462 7f96a3b82700  0 monclient(hunting): authenticate timed out after 300
  2018-01-21 21:52:35.071524 7f96a3b82700  0 librados: client.admin authentication error (110) Connection timed out
  2018-01-21 21:52:35.071524 7f96a3b82700  0 librados: client.admin authentication error (110) Connection timed out
  [errno 110] error connecting to the cluster
</screen>
     <para>
      The error would appear to be an authentication error, but it is
      misleading. The real issue is a timeout.
     </para>
    </sect4>
    <sect4 xml:id="solution-1">
     <title>Solution</title>
     <para>
      If you see the timeout in the operator log, verify if the MON pod is
      running (see the next section). If the MON pod is running, check the
      network connectivity between the operator pod and the MON pod. A common
      issue is that the CNI is not configured correctly.
     </para>
    </sect4>
    <sect4 xml:id="failing-mon-pod">
     <title>Failing MON pod</title>
     <para>
      Secondly, we need to verify if the MON pod started successfully.
     </para>
<screen>kubectl -n rook-ceph get pod -l app=rook-ceph-mon
NAME                                READY     STATUS               RESTARTS   AGE
rook-ceph-mon-a-69fb9c78cd-58szd    1/1       CrashLoopBackOff     2          47s
</screen>
     <para>
      If the MON pod is failing as in this example, you will need to look at
      the <command>mon pod status</command> or logs to determine the cause. If
      the pod is in a crash loop backoff state, you should see the reason by
      describing the pod.
     </para>
     <para>
      The pod shows a termination status that the keyring does not match the
      existing keyring.
     </para>
<screen>kubectl -n rook-ceph describe pod -l mon=rook-ceph-mon0
[...]
Last State:    Terminated
Reason:    Error
Message:    The keyring does not match the existing keyring in /var/lib/rook/rook-ceph-mon0/data/keyring.
You may need to delete the contents of dataDirHostPath on the host from a previous deployment.
[...]
</screen>
     <para>
      See the solution in the next section regarding cleaning up the
      <literal>dataDirHostPath</literal> on the nodes.
     </para>
    </sect4>
    <sect4 xml:id="three-mons-named-a-d-and-f">
     <title>Three MONs Named a, d, and f</title>
     <para>
      If you see the three mons running with the names <literal>a</literal>,
      <literal>d</literal>, and <literal>f</literal>, they likely did not form
      quorum even though they are running.
     </para>
<screen>
NAME                               READY   STATUS    RESTARTS   AGE
rook-ceph-mon-a-7d9fd97d9b-cdq7g   1/1     Running   0          10m
rook-ceph-mon-d-77df8454bd-r5jwr   1/1     Running   0          9m2s
rook-ceph-mon-f-58b4f8d9c7-89lgs   1/1     Running   0          7m38s
</screen>
    </sect4>
    <sect4 xml:id="solution-2">
     <title>Solution</title>
     <para>
      This is a common problem reinitializing the &rook; cluster when the local
      directory used for persistence has <emphasis role="strong">not</emphasis>
      been purged. This directory is the <literal>dataDirHostPath</literal>
      setting in the cluster CRD, and is typically set to
      <filename>/var/lib/rook</filename>. To fix the issue, you will need to
      delete all components of &rook; and then delete the contents of
      <filename>/var/lib/rook</filename> (or the directory specified by
      <literal>dataDirHostPath</literal>) on each of the hosts in the cluster.
      Then, when the cluster CRD is applied to start a new cluster, the
      rook-operator should start all the pods as expected.
     </para>
     <important>
      <para>
       Deleting the <literal>dataDirHostPath</literal> folder is destructive to
       the storage. Only delete the folder if you are trying to permanently
       purge the &rook; cluster.
      </para>
     </important>
    </sect4>
   </sect3>
  </sect2>

  <sect2 xml:id="pvcs-stay-in-pending-state">
   <title>PVCs Stay in Pending State</title>
   <sect3 xml:id="symptoms-3">
    <title>Symptoms</title>
    <para>
     When you create a PVC based on a &rook; storage class, it stays pending
     indefinitely.
    </para>
    <para>
     For the Wordpress example, you might see two PVCs in the pending state.
    </para>
<screen>kubectl get pvc
NAME             STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS      AGE
mysql-pv-claim   Pending                                      rook-ceph-block   8s
wp-pv-claim      Pending                                      rook-ceph-block   16s
</screen>
   </sect3>
   <sect3 xml:id="investigation-2">
    <title>Investigation</title>
    <para>
     There are two common causes for the PVCs staying in the pending state:
    </para>
    <orderedlist>
     <listitem>
      <para>
       There are no OSDs in the cluster.
      </para>
     </listitem>
     <listitem>
      <para>
       The CSI provisioner pod is not running or is not responding to the
       request to provision the storage.
      </para>
     </listitem>
    </orderedlist>
    <sect4 xml:id="confirm-if-there-are-osds">
     <title>Confirm If There Are OSDs</title>
     <para>
      To confirm if you have OSDs in your cluster, connect to the &rook;
      Toolbox and run the <command>ceph status</command> command. You should
      see that you have at least one OSD <literal>up</literal> and
      <literal>in</literal>. The minimum number of OSDs required depends on the
      <literal>replicated.size</literal> setting in the pool created for the
      storage class. In a <quote>test</quote> cluster, only one OSD is required
      (see <filename>storageclass-test.yaml</filename>). In the production
      storage class example (<filename>storageclass.yaml</filename>), three
      OSDs would be required.
     </para>
<screen>&prompt.cephuser;ceph status
  cluster:
  id:     a0452c76-30d9-4c1a-a948-5d8405f19a7c
  health: HEALTH_OK

  services:
  mon: 3 daemons, quorum a,b,c (age 11m)
  mgr: a(active, since 10m)
  osd: 1 osds: 1 up (since 46s), 1 in (since 109m)
</screen>
    </sect4>
    <sect4 xml:id="osd-prepare-logs">
     <title>OSD Prepare Logs</title>
     <para>
      If you do not see the expected number of OSDs, investigate why they were
      not created. On each node where &rook; looks for OSDs to configure, you
      will see an <quote>osd prepare</quote> pod.
     </para>
<screen>kubectl -n rook-ceph get pod -l app=rook-ceph-osd-prepare
NAME                                 ...  READY   STATUS      RESTARTS   AGE
rook-ceph-osd-prepare-minikube-9twvk   0/2     Completed   0          30m
</screen>
     <para>
      See the section on
      <xref linkend="osd-pods-are-not-created-on-my-devices"/> to investigate
      the logs.
     </para>
    </sect4>
    <sect4 xml:id="csi-driver">
     <title>CSI Driver</title>
     <para>
      The CSI driver may not be responding to the requests. Look in the logs of
      the CSI provisioner pod to see if there are any errors during the
      provisioning.
     </para>
     <para>
      There are two provisioner pods:
     </para>
<screen>kubectl -n rook-ceph get pod -l app=csi-rbdplugin-provisioner</screen>
     <para>
      Get the logs of each of the pods. One of them should be the leader and be
      responding to requests.
     </para>
<screen>kubectl -n rook-ceph logs csi-cephfsplugin-provisioner-d77bb49c6-q9hwq csi-provisioner</screen>
    </sect4>
    <sect4 xml:id="operator-unresponsiveness">
     <title>Operator Unresponsiveness</title>
     <para>
      Lastly, if you have OSDs <literal>up</literal> and <literal>in</literal>,
      the next step is to confirm the operator is responding to the requests.
      Look in the operator pod logs around the time when the PVC was created to
      confirm if the request is being raised. If the operator does not show
      requests to provision the block image, the operator may be stuck on some
      other operation. In this case, restart the operator pod to get things
      going again.
     </para>
    </sect4>
   </sect3>
   <sect3 xml:id="solution-3">
    <title>Solution</title>
    <para>
     If the OSD prepare logs did not give you enough clues about why the OSDs
     were not being created, review your <filename>cluster.yaml</filename>
     configuration. The common mistakes include:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       If <literal>useAllDevices: true</literal>, &rook; expects to find local
       devices attached to the nodes. If no devices are found, no OSDs will be
       created.
      </para>
     </listitem>
     <listitem>
      <para>
       If <literal>useAllDevices: false</literal>, OSDs will only be created if
       <literal>deviceFilter</literal> is specified.
      </para>
     </listitem>
     <listitem>
      <para>
       Only local devices attached to the nodes will be configurable by &rook;.
       In other words, the devices must show up under
       <filename>/dev</filename>.
      </para>
      <itemizedlist>
       <listitem>
        <para>
         The devices must not have any partitions or file systems on them.
         &rook; will only configure raw devices. Partitions are not yet
         supported.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
   </sect3>
  </sect2>

  <sect2 xml:id="osd-pods-are-failing-to-start">
   <title>OSD Pods are Failing to Start</title>
   <sect3 xml:id="symptoms-4">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       OSD pods are failing to start.
      </para>
     </listitem>
     <listitem>
      <para>
       You have started a cluster after tearing down another cluster.
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="investigation-3">
    <title>Investigation</title>
    <para>
     When an OSD starts, the device or directory will be configured for
     consumption. If there is an error with the configuration, the pod will
     crash and you will see the <literal>CrashLoopBackoff</literal> status for
     the pod. Look in the OSD pod logs for an indication of the failure.
    </para>
<screen>kubectl -n rook-ceph logs rook-ceph-osd-fl8fs</screen>
    <para>
     One common case for failure is that you have re-deployed a test cluster
     and some state may remain from a previous deployment. If your cluster is
     larger than a few nodes, you may get lucky enough that the monitors were
     able to start and form a quorum. However, now the OSDs pods may fail to
     start due to the old state. Looking at the OSD pod logs, you will see an
     error about the file already existing.
    </para>
<screen>kubectl -n rook-ceph logs rook-ceph-osd-fl8fs
[...]
2017-10-31 20:13:11.187106 I | mkfs-osd0: 2017-10-31 20:13:11.186992 7f0059d62e00 -1 bluestore(/var/lib/rook/osd0) _read_fsid unparsable uuid
2017-10-31 20:13:11.187208 I | mkfs-osd0: 2017-10-31 20:13:11.187026 7f0059d62e00 -1 bluestore(/var/lib/rook/osd0) _setup_block_symlink_or_file failed to create block symlink to /dev/disk/by-partuuid/651153ba-2dfc-4231-ba06-94759e5ba273: (17) File exists
2017-10-31 20:13:11.187233 I | mkfs-osd0: 2017-10-31 20:13:11.187038 7f0059d62e00 -1 bluestore(/var/lib/rook/osd0) mkfs failed, (17) File exists
2017-10-31 20:13:11.187254 I | mkfs-osd0: 2017-10-31 20:13:11.187042 7f0059d62e00 -1 OSD::mkfs: ObjectStore::mkfs failed with error (17) File exists
2017-10-31 20:13:11.187275 I | mkfs-osd0: 2017-10-31 20:13:11.187121 7f0059d62e00 -1  ** ERROR: error creating empty object store in /var/lib/rook/osd0: (17) File exists
</screen>
   </sect3>
   <sect3 xml:id="solution-4">
    <title>Solution</title>
    <para>
     If the error is from the file that already exists, this is a common
     problem reinitializing the &rook; cluster when the local directory used
     for persistence has <emphasis role="strong">not</emphasis> been purged.
     This directory is the <literal>dataDirHostPath</literal> setting in the
     cluster CRD and is typically set to <filename>/var/lib/rook</filename>. To
     fix the issue you will need to delete all components of Rook and then
     delete the contents of <filename>/var/lib/rook</filename> (or the
     directory specified by <literal>dataDirHostPath</literal>) on each of the
     hosts in the cluster. Then when the cluster CRD is applied to start a new
     cluster, the rook-operator should start all the pods as expected.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="osd-pods-are-not-created-on-my-devices">
   <title>OSD Pods Are Not Created on My Devices</title>
   <sect3 xml:id="symptoms-5">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       No OSD pods are started in the cluster.
      </para>
     </listitem>
     <listitem>
      <para>
       Devices are not configured with OSDs even though specified in the
       cluster CRD.
      </para>
     </listitem>
     <listitem>
      <para>
       One OSD pod is started on each node instead of multiple pods for each
       device.
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="investigation-4">
    <title>Investigation</title>
    <para>
     First, ensure that you have specified the devices correctly in the CRD.
     The cluster CRD has several ways to specify the devices that are to be
     consumed by the &rook; storage:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>useAllDevices: true</literal>: &rook; will consume all devices
       it determines to be available.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>deviceFilter</literal>: Consume all devices that match this
       regular expression.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>devices</literal>: Explicit list of device names on each node
       to consume.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Second, if &rook; determines that a device is not available (has existing
     partitions or a formatted file system), &rook; will skip consuming the
     devices. If &rook; is not starting OSDs on the devices you expect, &rook;
     may have skipped it for this reason. To see if a device was skipped, view
     the OSD preparation log on the node where the device was skipped. Note
     that it is completely normal and expected for OSD prepare pod to be in the
     <literal>completed</literal> state. After the job is complete, &rook;
     leaves the pod around in case the logs need to be investigated.
    </para>
    <para>
     Get the prepare pods in the cluster:
    </para>
<screen>kubectl -n rook-ceph get pod -l app=rook-ceph-osd-prepare
NAME                                   READY     STATUS      RESTARTS   AGE
rook-ceph-osd-prepare-node1-fvmrp      0/1       Completed   0          18m
rook-ceph-osd-prepare-node2-w9xv9      0/1       Completed   0          22m
rook-ceph-osd-prepare-node3-7rgnv      0/1       Completed   0          22m
</screen>
    <para>
     View the logs for the node of interest in the &quot;provision&quot;
     container:
    </para>
<screen>kubectl -n rook-ceph logs rook-ceph-osd-prepare-node1-fvmrp provision</screen>
    <para>
     Here are some key lines to look for in the log. A device will be skipped
     if &rook; sees it has partitions or a file system:
    </para>
<screen>
2019-05-30 19:02:57.353171 W | cephosd: skipping device sda that is in use
2019-05-30 19:02:57.452168 W | skipping device &quot;sdb5&quot;: [&quot;Used by ceph-disk&quot;]
</screen>
    <para>
     Other messages about a disk being unusable by &ceph; include:
    </para>
<screen>
Insufficient space (&lt;5GB) on vgs
Insufficient space (&lt;5GB)
LVM detected
Has BlueStore device label
locked
read-only
</screen>
    <para>
     A device is going to be configured:
    </para>
<screen>2019-05-30 19:02:57.535598 I | cephosd: device sdc to be configured by ceph-volume</screen>
    <para>
     For each device configured, you will see a report printed to the log:
    </para>
<screen>
2019-05-30 19:02:59.844642 I |   Type            Path                                                    LV Size         % of device
2019-05-30 19:02:59.844651 I | ----------------------------------------------------------------------------------------------------
2019-05-30 19:02:59.844677 I |   [data]          /dev/sdc                                                7.00 GB         100%
</screen>
   </sect3>
   <sect3 xml:id="solution-5">
    <title>Solution</title>
    <para>
     Either update the CR with the correct settings, or clean the partitions or
     file system from your devices.
    </para>
    <para>
     After the settings are updated or the devices are cleaned, trigger the
     operator to analyze the devices again by restarting the operator. Each
     time the operator starts, it will ensure all the desired devices are
     configured. The operator does automatically deploy OSDs in most scenarios,
     but an operator restart will cover any scenarios that the operator does
     not detect automatically.
    </para>
    <para>
     Restart the operator to ensure devices are configured. A new pod will
     automatically be started when the current operator pod is deleted.
    </para>
<screen>kubectl -n rook-ceph delete pod -l app=rook-ceph-operator</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="rook-agent-modprobe-exec-format-error">
   <title>&rook; Agent modprobe exec format error</title>
   <sect3 xml:id="symptoms-7">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       <literal>PersistentVolumes</literal> from &ceph; fail or timeout to
       mount.
      </para>
     </listitem>
     <listitem>
      <para>
       &rook; Agent logs contain <literal>modinfo: ERROR: could not get modinfo
       from 'rbd': Exec format error</literal> lines.
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="solution-7">
    <title>Solution</title>
    <para>
     If it is feasible to upgrade your kernel, you should upgrade to
     4.x, even better is 4.7 or above, due to a feature for &cephfs; added to
     the kernel.
    </para>
    <para>
     If you are unable to upgrade the kernel, you need to go to each host that
     will consume storage and run:
    </para>
<screen>modprobe rbd</screen>
    <para>
     This command inserts the <literal>rbd</literal> module into the kernel.
    </para>
    <para>
     To persist this fix, you need to add the <literal>rbd</literal> kernel
     module to either <filename>/etc/modprobe.d/</filename> or
     <filename>/etc/modules-load.d/</filename>. For both paths create a file
     called <filename>rbd.conf</filename> with the following content:
    </para>
<screen>rbd</screen>
    <para>
     Now when a host is restarted, the module should be loaded automatically.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="using-multiple-shared-filesystem-cephfs-is-attempted-on-a-kernel-version-older-than-47">
   <title>Using Multiple Shared File Systems (&cephfs;) is Attempted on a Kernel Version Older than 4.7</title>
   <sect3 xml:id="symptoms-9">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       More than one shared file system (&cephfs;) has been created in the
       cluster.
      </para>
     </listitem>
     <listitem>
      <para>
       A pod attempts to mount any other shared file system besides the
       <emphasis role="strong">first</emphasis> one that was created.
      </para>
     </listitem>
     <listitem>
      <para>
       The pod incorrectly gets the first file system mounted instead of the
       intended file system.
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="solution-9">
    <title>Solution</title>
    <para>
     The only solution to this problem is to upgrade your kernel to 4.7 or
     higher. This is due to a <command>mount</command> flag added in kernel
     version 4.7, which allows choosing the file system by name.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="activate-log-to-file-for-a-particular-ceph-daemon">
   <title>Activate log to file for a particular &ceph; daemon</title>
   <para>
    They are cases where looking at &kube; logs is not enough for various
    reasons, but just to name a few:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Not everyone is familiar for &kube; logging and expects to find logs in
      traditional directories.
     </para>
    </listitem>
    <listitem>
     <para>
      Logs get eaten (buffer limit from the log engine) and thus not
      requestable from &kube;.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    So for each daemon, <literal>dataDirHostPath</literal> is used to store
    logs, if logging is activated. &rook; will bind-mount
    <literal>dataDirHostPath</literal> for every pod. As of &ceph; Nautilus
    14.2.1, it is possible to enable logging for a particular daemon on the
    fly. Let us say you want to enable logging for <literal>mon.a</literal>,
    but only for this daemon. Using the toolbox or from inside the operator
    run:
   </para>
<screen>&prompt.cephuser;ceph config daemon mon.a log_to_file true</screen>
   <para>
    This will activate logging on the file system, you will be able to find
    logs in <filename>dataDirHostPath/$NAMESPACE/log</filename>, so typically
    this would mean <filename>/var/lib/rook/rook-ceph/log</filename>. You do
    not need to restart the pod, the effect will be immediate.
   </para>
   <para>
    To disable the logging on file, simply set <literal>log_to_file</literal>
    to <literal>false</literal>.
   </para>
   <para>
    For &ceph; Luminous and Mimic releases,
    <literal>mon_cluster_log_file</literal> and
    <literal>cluster_log_file</literal> can be set to
    <filename>/var/log/ceph/XXXX</filename> in the config override ConfigMap to
    enable logging.
   </para>
  </sect2>

  <sect2 xml:id="a-worker-node-using-rbd-devices-hangs-up">
   <title>A Worker Node using RBD Devices Hangs Up</title>
   <sect3 xml:id="symptoms-10">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       There is no progress on I/O from/to one of RBD devices
       (<filename>/dev/rbd*</filename> or <filename>/dev/nbd*</filename>).
      </para>
     </listitem>
     <listitem>
      <para>
       After that, the whole worker node hangs up.
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="investigation-6">
    <title>Investigation</title>
    <para>
     This happens when the following conditions are satisfied.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       The problematic RBD device and the corresponding OSDs are co-located.
      </para>
     </listitem>
     <listitem>
      <para>
       There is an XFS file system on top of this device.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     In addition, when this problem happens, you can see the following messages
     in <literal>dmesg</literal>.
    </para>
<screen>dmesg
...
[51717.039319] INFO: task kworker/2:1:5938 blocked for more than 120 seconds.
[51717.039361]       Not tainted 4.15.0-72-generic #81-Ubuntu
[51717.039388] &quot;echo 0 &gt; /proc/sys/kernel/hung_task_timeout_secs&quot; disables this message.
...
</screen>
    <para>
     This is the so-called <literal>hung_task</literal> problem and means that
     there is a deadlock in the kernel.
    </para>
   </sect3>
   <sect3 xml:id="solution-10">
    <title>Solution</title>
    <para>
     You can bypass this problem by using ext4 or any other file systems rather
     than XFS. The file system type can be specified with
     <literal>csi.storage.k8s.io/fstype</literal> in StorageClass resource.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="too-few-pgs-per-osd-warning-is-shown">
   <title>Too Few PGs per OSD Warning is Shown</title>
   <sect3 xml:id="symptoms-11">
    <title>Symptoms</title>
    <itemizedlist>
     <listitem>
      <para>
       <literal>ceph status</literal> shows <quote>too few PGs per OSD</quote>
       warning as follows.
      </para>
     </listitem>
    </itemizedlist>
<screen>ceph status
cluster:
id:     fd06d7c3-5c5c-45ca-bdea-1cf26b783065
health: HEALTH_WARN
too few PGs per OSD (16 &lt; min 30)
</screen>
   </sect3>
   <sect3 xml:id="solution-11">
    <title>Solution</title>
    <para>
     See <xref linkend="bp-troubleshooting-pgs"/> for more information.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="lvm-metadata-can-be-corrupted-with-osd-on-lv-backed-pvc">
   <title>LVM Metadata Can Be Corrupted with OSD on LV-backed PVC</title>
   <sect3 xml:id="symptoms-12">
    <title>Symptoms</title>
    <para>
     There is a critical flaw in OSD on LV-backed PVC. LVM metadata can be
     corrupted if both the host and OSD container modify it simultaneously. For
     example, the administrator might modify it on the host, while the OSD
     initialization process in a container could modify it too. In addition, if
     <literal>lvmetad</literal> is running, the possibility of occurrence gets
     higher. In this case, the change of LVM metadata in OSD container is not
     reflected to LVM metadata cache in host for a while.
    </para>
    <para>
     If you still decide to configure an OSD on LVM, keep the following in mind
     to reduce the probability of this issue.
    </para>
   </sect3>
   <sect3 xml:id="solution-12">
    <title>Solution</title>
    <itemizedlist>
     <listitem>
      <para>
       Disable <literal>lvmetad</literal>.
      </para>
     </listitem>
     <listitem>
      <para>
       Avoid configuration of LVs from the host. In addition, do not touch the
       VGs and physical volumes that back these LVs.
      </para>
     </listitem>
     <listitem>
      <para>
       Avoid incrementing the <literal>count</literal> field of
       <literal>storageClassDeviceSets</literal> and create a new LV that backs
       a OSD simultaneously.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     You can know whether the above-mentioned tag exists tag by running
    </para>
<screen>&prompt.root; lvs -o lv_name,lv_tags</screen>
    <para>
     If the <literal>lv_tag</literal> field is empty in an LV corresponding to
     the OSD lv_tags, this OSD encountered the problem. In this case, retire
     this OSD or replace with other new OSD before restarting.
    </para>
   </sect3>
  </sect2>
 </sect1>
</chapter>
