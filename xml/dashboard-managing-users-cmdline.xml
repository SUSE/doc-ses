<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="managing-dashboard-users-cmdline">
 <title>Manage users and roles on the command line</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/master/xml/</dm:editurl>
   <dm:translation>yes</dm:translation>
   <dm:release>SES 7</dm:release>
  </dm:docmanager>
 </info>
 <para>
  This section describes how to manage user accounts used by the &dashboard;.
  It helps you create or modify user accounts, as well as set proper user roles
  and permissions.
 </para>
 <sect1 xml:id="dashboard-password-policy">
  <title>Managing the password policy</title>

  <para>
   By default the password policy feature is enabled including the following
   checks:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Is the password longer than <emphasis>N</emphasis> characters?
    </para>
   </listitem>
   <listitem>
    <para>
     Are the old and new password the same?
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The password policy feature can be switched on or off completely:
  </para>

<screen>&prompt.cephuser;ceph dashboard set-pwd-policy-enabled <replaceable>true|false</replaceable></screen>

  <para>
   The following individual checks can be switched on or off:
  </para>

<screen>
&prompt.cephuser;ceph dashboard set-pwd-policy-check-length-enabled <replaceable>true|false</replaceable>
&prompt.cephuser;ceph dashboard set-pwd-policy-check-oldpwd-enabled <replaceable>true|false</replaceable>
&prompt.cephuser;ceph dashboard set-pwd-policy-check-username-enabled <replaceable>true|false</replaceable>
&prompt.cephuser;ceph dashboard set-pwd-policy-check-exclusion-list-enabled <replaceable>true|false</replaceable>
&prompt.cephuser;ceph dashboard set-pwd-policy-check-complexity-enabled <replaceable>true|false</replaceable>
&prompt.cephuser;ceph dashboard set-pwd-policy-check-sequential-chars-enabled <replaceable>true|false</replaceable>
&prompt.cephuser;ceph dashboard set-pwd-policy-check-repetitive-chars-enabled <replaceable>true|false</replaceable>
</screen>

  <para>
   In addition, the following options are available to configure the password
   policy behaviour.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     The minimum password length (defaults to 8):
    </para>
<screen>&prompt.cephuser;ceph dashboard set-pwd-policy-min-length <replaceable>N</replaceable></screen>
   </listitem>
   <listitem>
    <para>
     The minimum password complexity (defaults to 10):
    </para>
<screen>&prompt.cephuser;ceph dashboard set-pwd-policy-min-complexity <replaceable>N</replaceable></screen>
    <para>
     The password complexity is calculated by classifying each character in the
     password.
    </para>
   </listitem>
   <listitem>
    <para>
     A list of comma-separated words that are not allowed to be used in a
     password:
    </para>
<screen>&prompt.cephuser;ceph dashboard set-pwd-policy-exclusion-list <replaceable>word</replaceable>[,...]</screen>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="dashboard-user-accounts">
  <title>Managing user accounts</title>

  <para>
   The &dashboard; supports managing multiple user accounts. Each user account
   consists of a user name, a password (stored in encrypted form using
   <literal>bcrypt</literal>), an optional name, and an optional e-mail
   address.
  </para>

  <para>
   User accounts are stored in &mon;â€™s configuration database and are
   globally shared across all &mgr; instances.
  </para>

  <para>
   Use the following commands to manage user accounts:
  </para>

  <variablelist>
   <varlistentry>
    <term>Show existing users:</term>
    <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-show [<replaceable>USERNAME</replaceable>]
</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Create a new user:</term>
    <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-create <replaceable>USERNAME</replaceable> [<replaceable>PASSWORD</replaceable>] [<replaceable>ROLENAME</replaceable>] [<replaceable>NAME</replaceable>] [<replaceable>EMAIL</replaceable>]
</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Delete a user:</term>
    <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-delete <replaceable>USERNAME</replaceable>
</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Change a user's password:</term>
    <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-set-password <replaceable>USERNAME</replaceable> <replaceable>PASSWORD</replaceable>
</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Modify a user's name and email:</term>
    <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-set-info <replaceable>USERNAME</replaceable> <replaceable>NAME</replaceable> <replaceable>EMAIL</replaceable>
</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Disable user</term>
    <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-disable <replaceable>USERNAME</replaceable>
</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Enable User</term>
    <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-enable <replaceable>USERNAME</replaceable>
</screen>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="dashboard-permissions">
  <title>User roles and permissions</title>

  <para>
   This section describes what security scopes you can assign to a user role,
   how to manage user roles and assign them to user accounts.
  </para>

  <sect2 xml:id="dashboard-security-scopes">
   <title>Defining security scopes</title>
   <para>
    User accounts are associated with a set of roles that define which parts of
    the dashboard can be accessed by the user. The dashboard parts are grouped
    within a <emphasis>security</emphasis> scope. Security scopes are
    predefined and static. The following security scopes are currently
    available:
   </para>
   <variablelist>
    <varlistentry>
     <term>hosts</term>
     <listitem>
      <para>
       Includes all features related to the <guimenu>Hosts</guimenu> menu
       entry.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>config-opt</term>
     <listitem>
      <para>
       Includes all features related to the management of &ceph; configuration
       options.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pool</term>
     <listitem>
      <para>
       Includes all features related to pool management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>osd</term>
     <listitem>
      <para>
       Includes all features related to the &osd; management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>monitor</term>
     <listitem>
      <para>
       Includes all features related to the &mon; management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rbd-image</term>
     <listitem>
      <para>
       Includes all features related to the &rbd; image management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rbd-mirroring</term>
     <listitem>
      <para>
       Includes all features related to the &rbd; mirroring management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>iscsi</term>
     <listitem>
      <para>
       Includes all features related to &iscsi; management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rgw</term>
     <listitem>
      <para>
       Includes all features related to the &ogw; management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cephfs</term>
     <listitem>
      <para>
       Includes all features related to &cephfs; management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>manager</term>
     <listitem>
      <para>
       Includes all features related to the &mgr; management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>log</term>
     <listitem>
      <para>
       Includes all features related to &ceph; logs management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>grafana</term>
     <listitem>
      <para>
       Includes all features related to the &grafana; proxy.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>prometheus</term>
     <listitem>
      <para>
       Include all features related to &prometheus; alert management.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dashboard-settings</term>
     <listitem>
      <para>
       Allows changing dashboard settings.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="dashboard-user-roles-security-scope">
   <title>Specifying user roles</title>
   <para>
    A <emphasis>role</emphasis> specifies a set of mappings between a
    <emphasis>security scope</emphasis> and a set of
    <emphasis>permissions</emphasis>. There are four types of permissions:
    'read', 'create', 'update', and 'delete'.
   </para>
   <para>
    The following example specifies a role where a user has 'read' and 'create'
    permissions for features related to pool management, and has full
    permissions for features related to RBD image management:
   </para>
<screen>
{
  'role': 'my_new_role',
  'description': 'My new role',
  'scopes_permissions': {
    'pool': ['read', 'create'],
    'rbd-image': ['read', 'create', 'update', 'delete']
  }
}
</screen>
   <para>
    The dashboard already provides a set of predefined roles that we call
    <emphasis>system roles</emphasis>. You can instantly use them after a fresh
    &dashboard; installation:
   </para>
   <variablelist>
    <varlistentry>
     <term>administrator</term>
     <listitem>
      <para>
       Provides full permissions for all security scopes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>read-only</term>
     <listitem>
      <para>
       Provides read permission for all security scopes except the dashboard
       settings.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>block-manager</term>
     <listitem>
      <para>
       Provides full permissions for 'rbd-image', 'rbd-mirroring', and 'iscsi'
       scopes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rgw-manager</term>
     <listitem>
      <para>
       Provides full permissions for the 'rgw' scope.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cluster-manager</term>
     <listitem>
      <para>
       Provides full permissions for the 'hosts', 'osd', 'monitor', 'manager',
       and 'config-opt' scopes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pool-manager</term>
     <listitem>
      <para>
       Provides full permissions for the 'pool' scope.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cephfs-manager</term>
     <listitem>
      <para>
       Provides full permissions for the 'cephfs' scope.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <sect3 xml:id="dashboard-managing-custom-roles">
    <title>Managing custom roles</title>
    <para>
     You can create new user roles by using the following commands:
    </para>
    <variablelist>
     <varlistentry>
      <term>Create a new role:</term>
      <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-role-create <replaceable>ROLENAME</replaceable> [<replaceable>DESCRIPTION</replaceable>]
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Delete a role:</term>
      <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-role-delete <replaceable>ROLENAME</replaceable>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Add scope permissions to a role:</term>
      <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-role-add-scope-perms <replaceable>ROLENAME</replaceable> <replaceable>SCOPENAME</replaceable> <replaceable>PERMISSION</replaceable> [<replaceable>PERMISSION</replaceable>...]
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Delete scope permissions from a role:</term>
      <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-role-del-perms <replaceable>ROLENAME</replaceable> <replaceable>SCOPENAME</replaceable>
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="dashboard-assigning-roles-user-accounts">
    <title>Assigning roles to user accounts</title>
    <para>
     Use the following commands to assign roles to users:
    </para>
    <variablelist>
     <varlistentry>
      <term>Set user roles:</term>
      <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-set-roles <replaceable>USERNAME</replaceable> <replaceable>ROLENAME</replaceable> [<replaceable>ROLENAME</replaceable> ...]
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Add additional roles to a user:</term>
      <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-add-roles <replaceable>USERNAME</replaceable> <replaceable>ROLENAME</replaceable> [<replaceable>ROLENAME</replaceable> ...]
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Delete roles from a user:</term>
      <listitem>
<screen>
&prompt.cephuser;ceph dashboard ac-user-del-roles <replaceable>USERNAME</replaceable> <replaceable>ROLENAME</replaceable> [<replaceable>ROLENAME</replaceable> ...]
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
    <tip>
     <title>Purging custom roles</title>
     <para>
      If you create custom user roles and intend to remove the &ceph; cluster
      with the <command>ceph.purge</command> runner later on, you need to purge
      the custom roles first. Find more details in
      <xref linkend="ceph-cluster-purge"/>.
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="example-create-user-custom-role">
    <title>Example: Creating a user and a custom role</title>
    <para>
     This section illustrates a procedure for creating a user account capable
     of managing RBD images, viewing and creating &ceph; pools, and having
     read-only access to any other scopes.
    </para>
    <procedure>
     <step>
      <para>
       Create a new user named <literal>tux</literal>:
      </para>
<screen>
 &prompt.cephuser;ceph dashboard ac-user-create tux <replaceable>PASSWORD</replaceable>
</screen>
     </step>
     <step>
      <para>
       Create a role and specify scope permissions:
      </para>
<screen>
&prompt.cephuser;ceph dashboard ac-role-create rbd/pool-manager
&prompt.cephuser;ceph dashboard ac-role-add-scope-perms rbd/pool-manager \
 rbd-image read create update delete
&prompt.cephuser;ceph dashboard ac-role-add-scope-perms rbd/pool-manager pool read create
</screen>
     </step>
     <step>
      <para>
       Associate the roles with the <literal>tux</literal> user:
      </para>
<screen>
&prompt.cephuser;ceph dashboard ac-user-set-roles tux rbd/pool-manager read-only
</screen>
     </step>
    </procedure>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="dashboard-proxy-config">
  <title>Proxy configuration</title>

  <para>
   If you want to establish a fixed URL to reach the &dashboard; or if you do
   not want to allow direct connections to the manager nodes, you can set up a
   proxy that automatically forwards incoming requests to the currently active
   <literal>ceph-mgr</literal> instance.
  </para>

  <sect2 xml:id="dashboard-proxy">
   <title>Accessing the dashboard with reverse proxies</title>
   <para>
    If you are accessing the dashboard via a reverse proxy configuration, you
    may need to service it under a URL prefix. To get the dashboard to use
    hyperlinks that include your prefix, you can set the
    <option>url_prefix</option> setting:
   </para>
<screen>
  &prompt.cephuser;ceph config set mgr mgr/dashboard/url_prefix <replaceable>URL_PREFIX</replaceable>
  </screen>
   <para>
    Then you can access the dashboard at
    <literal>http://<replaceable>HOST_NAME</replaceable>:<replaceable>PORT_NUMBER</replaceable>/<replaceable>URL_PREFIX</replaceable>/</literal>.
   </para>
  </sect2>

  <sect2 xml:id="dashboard-disable-redirection">
   <title>Disabling re-directions</title>
   <para>
    If the &dashboard; is behind a load-balancing proxy such as HAProxy,
    disable the redirection behaviour to prevent situations where the internal
    (unresolvable) URLs are published to the frontend client. Use the following
    command to get the dashboard to respond with a HTTP error
    (<literal>500</literal> by default) instead of redirecting to the active
    dashboard:
   </para>
<screen>
&prompt.cephuser;ceph config set mgr mgr/dashboard/standby_behaviour "error"
</screen>
   <para>
    To reset the setting to the default redirection behaviour, use the
    following command:
   </para>
<screen>
&prompt.cephuser;ceph config set mgr mgr/dashboard/standby_behaviour "redirect"
</screen>
  </sect2>

  <sect2 xml:id="dashboard-config-error-status">
   <title>Configuring error status codes</title>
   <para>
    If the redirection behaviour is disabled, then you should customize the
    HTTP status code of standby dashboards. To do so, run the following
    command:
   </para>
<screen>
&prompt.cephuser;ceph config set mgr mgr/dashboard/standby_error_status_code 503
</screen>
  </sect2>

  <sect2 xml:id="dashboard-haproxy-config">
   <title>HAProxy example configuration</title>
   <para>
    The following example configuration is for SSL/TLS pass through using
    HAProxy.
   </para>
   <note>
    <para>
     The configuration works under the following conditions: If the dashboard
     fails over, the front-end client might receive a HTTP redirect
     (<literal>303</literal>) response and will be redirected to an
     unresolvable host.
    </para>
    <para>
     This happens when the failover occurs during two HAProxy health checks. In
     this situation the previously active dashboard node will now respond with
     a 303 which points to the new active node. To prevent that situation you
     should consider disabling the redirection behaviour on standby nodes.
    </para>
   </note>
<screen>
  defaults
    log global
    option log-health-checks
    timeout connect 5s
    timeout client 50s
    timeout server 450s

  frontend dashboard_front
    mode http
    bind *:80
    option httplog
    redirect scheme https code 301 if !{ ssl_fc }

  frontend dashboard_front_ssl
    mode tcp
    bind *:443
    option tcplog
    default_backend dashboard_back_ssl

  backend dashboard_back_ssl
    mode tcp
    option httpchk GET /
    http-check expect status 200
    server x <replaceable>HOST</replaceable>:<replaceable>PORT</replaceable> ssl check verify none
    server y <replaceable>HOST</replaceable>:<replaceable>PORT</replaceable> ssl check verify none
    server z <replaceable>HOST</replaceable>:<replaceable>PORT</replaceable> ssl check verify none
</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="dashboard-auditing">
  <title>Auditing API requests</title>

  <para>
   The &dashboard;'s REST API can log PUT, POST, and DELETE requests to the
   &ceph; audit log. Logging is disabled by default, but you can enable it with
   the following command:
  </para>

<screen>
&prompt.cephuser;ceph dashboard set-audit-api-enabled true
</screen>

  <para>
   If enabled, the following parameters are logged per each request:
  </para>

  <variablelist>
   <varlistentry>
    <term>from</term>
    <listitem>
     <para>
      The origin of the request, for example 'https://[::1]:44410'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>path</term>
    <listitem>
     <para>
      The REST API path, for example <filename>/api/auth</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>method</term>
    <listitem>
     <para>
      'PUT', 'POST', or 'DELETE'.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>user</term>
    <listitem>
     <para>
      The name of the user (or â€˜Noneâ€™).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   An example log entry looks like this:
  </para>

<screen>
2019-02-06 10:33:01.302514 mgr.x [INF] [DASHBOARD] \
 from='https://[::ffff:127.0.0.1]:37022' path='/api/rgw/user/exu' method='PUT' \
 user='admin' params='{"max_buckets": "1000", "display_name": "Example User", "uid": "exu", "suspended": "0", "email": "user@example.com"}'
</screen>

  <tip>
   <title>Disable logging of request payload</title>
   <para>
    The logging of the request payload (the list of arguments and their values)
    is enabled by default. You can disable it as follows:
   </para>
<screen>
&prompt.cephuser;ceph dashboard set-audit-api-log-payload false
</screen>
  </tip>
 </sect1>
 <sect1 xml:id="dashboard-config-nfs-ganesha">
  <title>Configuring &ganesha; in the &dashboard;</title>

  <para>
   &dashboard; can manage &ganesha; exports that use &cephfs; or &ogw; as their
   backstore. The dashboard manages &ganesha; config files stored in RADOS
   objects on the &cephfs; cluster. &ganesha; must store part of their
   configuration in the &ceph; cluster.
  </para>

  <para>
   Run the following command to configure the &ganesha; configuration object's
   location:
  </para>

<screen>&prompt.cephuser;ceph dashboard set-ganesha-clusters-rados-pool-namespace <replaceable>pool_name</replaceable>[/<replaceable>namespace</replaceable>]</screen>

  <para>
   You can now manage &ganesha; exports using the &dashboard;.
  </para>

  <sect2 xml:id="dashboard-multi-config-nfs-ganesha">
   <title>Configuring multiple &ganesha; clusters</title>
   <para>
    The &dashboard; supports the management of &ganesha; exports belonging to
    different &ganesha; clusters. We recommend each &ganesha; cluster store its
    configuration objects in a different &rados; pool/namespace to isolate the
    configurations from each other.
   </para>
   <para>
    Use the following command to specify the locations of the configuration of
    each &ganesha; cluster:
   </para>
<screen>&prompt.cephuser;ceph dashboard set-ganesha-clusters-rados-pool-namespace <replaceable>cluster_id</replaceable>:<replaceable>pool_name</replaceable>[/<replaceable>namespace</replaceable>](,<replaceable>cluster_id</replaceable>:<replaceable>pool_name</replaceable>[/<replaceable>namespace</replaceable>])*</screen>
   <para>
    The <replaceable>cluster_id</replaceable> is an arbitrary string that
    uniquely identifies the &ganesha; cluster.
   </para>
   <para>
    When configuring the &dashboard; with multiple &ganesha; clusters, the Web
    UI automatically allows you to choose to which cluster an export belongs.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="dashboard-debug-plugin">
  <title>Debugging plugins</title>

  <para>
   &dashboard; plugins extend the functionality of the dashboard. The debug
   plugin allows the customization of the behaviour of the dashboard according
   to the debug mode. It can be enabled, disabled, or checked with the
   following command:
  </para>

<screen>
&prompt.cephuser;ceph dashboard debug status
Debug: 'disabled'
&prompt.cephuser;ceph dashboard debug enable
Debug: 'enabled'
&prompt.cephuser;dashboard debug disable
Debug: 'disabled'
</screen>

  <para>
   By default, this is disabled. This is the recommended setting for production
   deployments. If required, debug mode can be enabled without need of
   restarting.
  </para>
 </sect1>
</chapter>
