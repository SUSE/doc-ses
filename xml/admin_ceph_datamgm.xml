<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.storage.datamgm">
 <title>Stored Data Management</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:maintainer>tbazant@suse.com</dm:maintainer>
   <dm:status>editing</dm:status>
   <dm:deadline></dm:deadline>
   <dm:priority></dm:priority>
   <dm:translation></dm:translation>
   <dm:languages></dm:languages>
   <dm:release>SES2.1</dm:release>
  </dm:docmanager>
 </info>
 <para>
  The CRUSH algorithm determines how to store and retrieve data by computing
  data storage locations. CRUSH empowers &ceph; clients to communicate with
  OSDs directly rather than through a centralized server or broker. With an
  algorithmically determined method of storing and retrieving data, &ceph;
  avoids a single point of failure, a performance bottleneck, and a physical
  limit to its scalability.
 </para>
 <para>
  CRUSH requires a map of your cluster, and uses the &crushmap;to
  pseudo-randomly store and retrieve data in OSDs with a uniform distribution
  of data across the cluster.
 </para>
 <para>
  CRUSH maps contain a list of OSDs, a list of ‘buckets’ for aggregating
  the devices into physical locations, and a list of rules that tell CRUSH how
  it should replicate data in a &ceph; cluster’s pools. By reﬂecting the
  underlying physical organization of the installation, CRUSH can model—and
  thereby address—potential sources of correlated device failures. Typical
  sources include physical proximity, a shared power source, and a shared
  network. By encoding this information into the cluster map, CRUSH placement
  policies can separate object replicas across different failure domains while
  still maintaining the desired distribution. For example, to address the
  possibility of concurrent failures, it may be desirable to ensure that data
  replicas are on devices using different shelves, racks, power supplies,
  controllers, and/or physical locations.
 </para>
 <para>
  When you create a configuration file and deploy &ceph; with
  <command>ceph-deploy</command>, &ceph; generates a default &crushmap; for your
  configuration. The default &crushmap; is fine for your &ceph; sandbox
  environment. However, when you deploy a large-scale data cluster, you should
  give significant consideration to developing a custom &crushmap;, because it
  will help you manage your &ceph; cluster, improve performance and ensure data
  safety.
 </para>
 <para>
  For example, if an OSD goes down, a &crushmap; can help you locate the
  physical data center, room, row and rack of the host with the failed OSD in
  the event you need to use on-site support or replace hardware.
 </para>
 <para>
  Similarly, CRUSH may help you identify faults more quickly. For example, if
  all OSDs in a particular rack go down simultaneously, the fault may lie with
  a network switch or power to the rack or the network switch rather than the
  OSDs themselves.
 </para>
 <para>
  A custom &crushmap;can also help you identify the physical locations where
  &ceph; stores redundant copies of data when the placement group(s) associated
  with a failed host are in a degraded state.
 </para>
 <para>
  There are three main sections to a &crushmap;.
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    <xref linkend="datamgm.devices" xrefstyle="select: title"/> consist of any
    object storage device, that is, the hard disk corresponding to a
    <systemitem>ceph-osd</systemitem> daemon.
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="datamgm.buckets" xrefstyle="select: title"/> consist of a
    hierarchical aggregation of storage locations (for example rows, racks,
    hosts, etc.) and their assigned weights.
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="datamgm.rules" xrefstyle="select: title"/> consist of the
    manner of selecting buckets.
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="datamgm.devices">
  <title>Devices</title>

  <para>
   To map placement groups to OSDs, a &crushmap; requires a list of OSD devices
   (the name of the OSD daemon). The list of devices appears first in the
   &crushmap;.
  </para>

<screen>#devices
device <replaceable>num</replaceable> <replaceable>osd.name</replaceable></screen>

  <para>
   For example:
  </para>

<screen>#devices
device 0 osd.0
device 1 osd.1
device 2 osd.2
device 3 osd.3</screen>

  <para>
   As a general rule, an OSD daemon maps to a single disk.
  </para>
 </sect1>
 <sect1 xml:id="datamgm.buckets">
  <title>Buckets</title>

  <para>
   CRUSH maps contain a list of OSDs, which can be organized into 'buckets' for
   aggregating the devices into physical locations.
  </para>

  <informaltable frame="none">
   <tgroup cols="3">
    <colspec colwidth="1in"/>
    <colspec colwidth="3in"/>
    <colspec colwidth="7in"/>
    <tbody>
     <row>
      <entry>
       <para>
        0
       </para>
      </entry>
      <entry>
       <para>
        OSD
       </para>
      </entry>
      <entry>
       <para>
        An OSD daemon (osd.1, osd.2, etc.).
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        1
       </para>
      </entry>
      <entry>
       <para>
        Host
       </para>
      </entry>
      <entry>
       <para>
        A host name containing one or more OSDs.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        2
       </para>
      </entry>
      <entry>
       <para>
        Chassis
       </para>
      </entry>
      <entry>
       <para>
        Chassis of which the rack is composed.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        3
       </para>
      </entry>
      <entry>
       <para>
        Rack
       </para>
      </entry>
      <entry>
       <para>
        A computer rack. The default is <literal>unknownrack</literal>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        4
       </para>
      </entry>
      <entry>
       <para>
        Row
       </para>
      </entry>
      <entry>
       <para>
        A row in a series of racks.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        5
       </para>
      </entry>
      <entry>
       <para>
        Pdu
       </para>
      </entry>
      <entry>
       <para>
        Power distribution unit.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        6
       </para>
      </entry>
      <entry>
       <para>
        Pod
       </para>
      </entry>
      <entry>
       <para></para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        7
       </para>
      </entry>
      <entry>
       <para>
        Room
       </para>
      </entry>
      <entry>
       <para>
        A room containing racks and rows of hosts.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        8
       </para>
      </entry>
      <entry>
       <para>
        Data Center
       </para>
      </entry>
      <entry>
       <para>
        A physical data center containing rooms.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        9
       </para>
      </entry>
      <entry>
       <para>
        Region
       </para>
      </entry>
      <entry>
       <para></para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        10
       </para>
      </entry>
      <entry>
       <para>
        Root
       </para>
      </entry>
      <entry>
       <para></para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <tip>
   <para>
    You can remove these types and create your own bucket types.
   </para>
  </tip>

  <para>
   &ceph;’s deployment tools generate a &crushmap;that contains a bucket for
   each host, and a pool named 'default', which is useful for the default
   <literal>rbd</literal> pool. The remaining bucket types provide a means for
   storing information about the physical location of nodes/buckets, which
   makes cluster administration much easier when OSDs, hosts, or network
   hardware malfunction and the administrator needs access to physical
   hardware.
  </para>

  <para>
   A bucket has a type, a unique name (string), a unique ID expressed as a
   negative integer, a weight relative to the total capacity/capability of its
   item(s), the bucket algorithm ( <literal>straw</literal> by default), and
   the hash (<literal>0</literal> by default, reflecting CRUSH Hash
   <literal>rjenkins1</literal>). A bucket may have one or more items. The
   items may consist of other buckets or OSDs. Items may have a weight that
   reflects the relative weight of the item.
  </para>

<screen>[bucket-type] [bucket-name] {
  id [a unique negative numeric ID]
  weight [the relative capacity/capability of the item(s)]
  alg [the bucket type: uniform | list | tree | straw ]
  hash [the hash type: 0 by default]
  item [item-name] weight [weight]
}</screen>

  <para>
   The following example illustrates how you can use buckets to aggregate a
   pool and physical locations like a data center, a room, a rack and a row.
  </para>

<screen>host ceph-osd-server-1 {
        id -17
        alg straw
        hash 0
        item osd.0 weight 1.00
        item osd.1 weight 1.00
}

row rack-1-row-1 {
        id -16
        alg straw
        hash 0
        item ceph-osd-server-1 weight 2.00
}

rack rack-3 {
        id -15
        alg straw
        hash 0
        item rack-3-row-1 weight 2.00
        item rack-3-row-2 weight 2.00
        item rack-3-row-3 weight 2.00
        item rack-3-row-4 weight 2.00
        item rack-3-row-5 weight 2.00
}

rack rack-2 {
        id -14
        alg straw
        hash 0
        item rack-2-row-1 weight 2.00
        item rack-2-row-2 weight 2.00
        item rack-2-row-3 weight 2.00
        item rack-2-row-4 weight 2.00
        item rack-2-row-5 weight 2.00
}

rack rack-1 {
        id -13
        alg straw
        hash 0
        item rack-1-row-1 weight 2.00
        item rack-1-row-2 weight 2.00
        item rack-1-row-3 weight 2.00
        item rack-1-row-4 weight 2.00
        item rack-1-row-5 weight 2.00
}

room server-room-1 {
        id -12
        alg straw
        hash 0
        item rack-1 weight 10.00
        item rack-2 weight 10.00
        item rack-3 weight 10.00
}

datacenter dc-1 {
        id -11
        alg straw
        hash 0
        item server-room-1 weight 30.00
        item server-room-2 weight 30.00
}

pool data {
        id -10
        alg straw
        hash 0
        item dc-1 weight 60.00
        item dc-2 weight 60.00
}</screen>
 </sect1>
 <sect1 xml:id="datamgm.rules">
  <title>Rule Sets</title>

  <para>
   CRUSH maps support the notion of 'CRUSH rules', which are the rules that
   determine data placement for a pool. For large clusters, you will likely
   create many pools where each pool may have its own CRUSH ruleset and rules.
   The default &crushmap; has a rule for each pool, and one ruleset assigned to
   each of the default pools.
  </para>

  <note>
   <para>
    In most cases, you will not need to modify the default rules. When you
    create a new pool, its default ruleset is 0.
   </para>
  </note>

  <para>
   A rule takes the following form:
  </para>

<screen>rule <replaceable>rulename</replaceable> {

        ruleset <replaceable>ruleset</replaceable>
        type <replaceable>type</replaceable>
        min_size <replaceable>min-size</replaceable>
        max_size <replaceable>max-size</replaceable>
        step <replaceable>step</replaceable>

}</screen>

  <variablelist>
   <varlistentry>
    <term>ruleset</term>
    <listitem>
     <para>
      An integer. Classifies a rule as belonging to a set of rules. Activated
      by setting the ruleset in a pool. This option is required. Default is
      <literal>0</literal>.
     </para>
     <important>
      <para>
       You need to increase the ruleset number from the default 0 continuously,
       otherwise the related monitor may crash.
      </para>
     </important>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>type</term>
    <listitem>
     <para>
      A string. Describes a rule for either a hard disk (replicated) or a RAID.
      This option is required. Default is <literal>replicated</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>min_size</term>
    <listitem>
     <para>
      An integer. If a placement group makes fewer replicas than this number,
      CRUSH will NOT select this rule. This option is required. Default is
      <literal>2</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>max_size</term>
    <listitem>
     <para>
      An integer. If a placement group makes more replicas than this number,
      CRUSH will NOT select this rule. This option is required. Default is
      <literal>10</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>step take <replaceable>bucket</replaceable>
    </term>
    <listitem>
     <para>
      Takes a bucket name, and begins iterating down the tree. This option is
      required. For an explanation about iterating through the tree, 
      see <xref linkend="datamgm.rules.step.iterate" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>step <replaceable>target</replaceable> <replaceable>mode</replaceable> <replaceable>num</replaceable> type <replaceable>bucket-type</replaceable>
    </term>
    <listitem>
     <para>
      <replaceable>target</replaceable> can either be <literal>choose</literal>
      or <literal>chooseleaf</literal>. When set to <literal>choose</literal>,
      a number of buckets is selected. <literal>chooseleaf</literal> directly
      selects the OSDs (leaf nodes) from the subtree of each bucket in the set
      of buckets.
     </para>
     <para>
      <replaceable>mode</replaceable> can either be <literal>firstn</literal>
      or <literal>indep</literal>. See <xref linkend="datamgm.rules.step.mode" />.
     </para>
     <para>
      Selects the number of buckets of the given type. Where N is the number of
      options available, if <replaceable>num</replaceable> &gt; 0 &amp;&amp;
      &lt; N, choose that many buckets; if <replaceable>num</replaceable> &lt;
      0, it means N - <replaceable>num</replaceable>; and, if
      <replaceable>num</replaceable> == 0, choose N buckets (all available).
      Follows <literal>step take</literal> or <literal>step choose</literal>.
     </para>
     <para>
      
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>step emit</term>
    <listitem>
     <para>
      Outputs the current value and empties the stack. Typically used at the
      end of a rule, but may also be used to form different trees in the same
      rule. Follows <literal>step choose</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <important>
   <para>
    To activate one or more rules with a common ruleset number to a pool, set
    the ruleset number to the pool.
   </para>
  </important>
  <sect2 xml:id="datamgm.rules.step.iterate">
   <title>Iterating Through the Node Tree</title>
   <para>
    The structure defined with the buckets can be viewed as a node tree.
    Buckets are nodes and OSDs are leafs in this tree.
   </para>
   <para>
    Rules in the &crushmap; define how OSDs are selected from this tree.
    A rule starts with a node and then iterates down the tree to return
    a set of OSDs. It is not possible to define which branch has to be
    selected. Instead the CRUSH algorithm assures that the set of OSDs
    fulfills the replication requirements and evenly distributes the data.
   </para>
   <para>
    With <literal>step take</literal> <replaceable>bucket</replaceable>
    the iteration through the node tree begins at the given bucket (not
    bucket type). If OSDs from all branches in the tree are to be returned,
    the bucket must be the root bucket. Otherwise the following steps are
    only iterating through a subtree.
   </para>
   <para>
    After <literal>step take</literal> one or more <literal>step choose</literal>
    entries follow in the rule definition. Each <literal>step choose</literal>
    chooses a defined number of nodes (or branches) from from the previously
    selected upper node.
   </para>
   <para>
    In the end the selected OSDs are returned with <literal>step emit</literal>.
   </para>
   <para>
    <literal>step chooseleaf</literal> is a convenience function
    that directly selects OSDs from branches of the given bucket.
   </para>
   <para>
    <xref linkend="datamgm.rules.step.iterate.figure" /> provides an example
    of how <literal>step</literal> is used to iterate through a tree. The
    orange arrows and numbers correspond to <literal>example1a</literal>
    and <literal>example1b</literal>, while blue corresponds to
    <literal>example2</literal> in the following rule definitions.
   </para>
   <figure xml:id="datamgm.rules.step.iterate.figure">
    <title>Example Tree</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="crush-step.svg" width="100%" format="SVG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="crush-step.svg" width="100%" format="SVG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <screen># orange arrows
rule example1a {
        ruleset 0
        type replicated
        min_size 2
        max_size 10
        # orange (1)
        step take rack1
        # orange (2)
        step choose firstn 0 host
        # orange (3)
        step choose firstn 1 osd
        step emit
}

rule example1b {
        ruleset 0
        type replicated
        min_size 2
        max_size 10
        # orange (1)
        step take rack1
        # orange (2) + (3)
        step chooseleaf firstn 0 host
        step emit
}

# blue arrows
rule example2 {
        ruleset 0
        type replicated
        min_size 2
        max_size 10
        # blue (1)
        step take room1
        # blue (2)
        step chooseleaf firstn 0 rack
        step emit
}</screen>
  </sect2>
  <sect2 xml:id="datamgm.rules.step.mode">
   <title>firstn and indep</title>
   <para>
    A CRUSH rule defines replacements for failed nodes or OSDs (see <xref linkend="datamgm.rules"/>).
    The keyword <literal>step</literal> requires either <literal>firstn</literal> or
    <literal>indep</literal> as parameter. Figure <xref linkend="datamgm.rules.step.mode.indep.figure" />
    provides an example.
   </para>
   <para>
    <literal>firstn</literal> adds replacement nodes to the end of
    the list of active nodes. In case of a failed node, the following
    healthy nodes are shifted to the left to fill the gap of the failed 
    node. This is the default and desired method for <emphasis>replicated pools</emphasis>,
    because a secondary node already has all data and therefore can take
    over the duties of the primary node immediately.
   </para>
   <para>
    <literal>indep</literal> selects fixed replacement nodes for each active
    node. The replacement of a failed node does not change the order of
    the remaining nodes. This is desired for <emphasis>erasure pools</emphasis>.
    In erasure pools the data stored on a node depends on its position
    in the node selection. When the order of nodes changes, all data
    on affected nodes needs to be relocated.
   </para>
   <note>
    <title>Erasure Pools</title>
    <para>
     Make sure that a rule using <literal>indep</literal> is set for
     each <emphasis>erasure pool</emphasis>.
    </para>
   </note>
   <figure xml:id="datamgm.rules.step.mode.indep.figure">
    <title>Node Replacement Methods</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="crush-firstn-indep.svg" width="100%" format="SVG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="crush-firstn-indep.svg" width="100%" format="SVG"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>
 </sect1>
 <sect1 xml:id="op.crush">
  <title>&crushmap; Manipulation</title>

  <para>
   This section introduces ways to basic &crushmap; manipulation, such as
   editing a &crushmap;, changing &crushmap; parameters, and
   adding/moving/removing an OSD.
  </para>

  <sect2>
   <title>Editing a &crushmap;</title>
   <para>
    To edit an existing CRUSH map, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Get a &crushmap;. To get the &crushmap; for your cluster, execute the
      following:
     </para>
<screen>&prompt.root;ceph osd getcrushmap -o <replaceable>compiled-crushmap-filename</replaceable></screen>
     <para>
      &ceph; will output (<option>-o</option>) a compiled &crushmap; to the
      file name you specified. Since the &crushmap; is in a compiled form, you
      must decompile it first before you can edit it.
     </para>
    </step>
    <step>
     <para>
      Decompile a &crushmap;. To decompile a &crushmap;, execute the following:
     </para>
<screen>&prompt.cephuser;crushtool -d <replaceable>compiled-crushmap-filename</replaceable> \
 -o <replaceable>decompiled-crushmap-filename</replaceable></screen>
     <para>
      &ceph; will decompile (<option>-d</option>) the compiled &crushmap;and
      output (<option>-o</option>) it to the file name you specified.
     </para>
    </step>
    <step>
     <para>
      Edit at least one of Devices, Buckets and Rules parameters.
     </para>
    </step>
    <step>
     <para>
      Compile a &crushmap;. To compile a &crushmap;, execute the following:
     </para>
<screen>&prompt.cephuser;crushtool -c <replaceable>decompiled-crush-map-filename</replaceable> \
 -o <replaceable>compiled-crush-map-filename</replaceable></screen>
     <para>
      &ceph; will store a compiled &crushmap;to the file name you specified.
     </para>
    </step>
    <step>
     <para>
      Set a &crushmap;. To set the &crushmap; for your cluster, execute the
      following:
     </para>
<screen>&prompt.root;ceph osd setcrushmap -i <replaceable>compiled-crushmap-filename</replaceable></screen>
     <para>
      &ceph; will input the compiled &crushmap; of the file name you specified
      as the &crushmap; for the cluster.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="op.crush.addosd">
   <title>Add/Move an OSD</title>
   <para>
    To add or move an OSD in the &crushmap;of a running cluster, execute the
    following:
   </para>
<screen>&prompt.root;ceph osd crush set <replaceable>id_or_name</replaceable> <replaceable>weight</replaceable> root=<replaceable>pool-name</replaceable>
<replaceable>bucket-type</replaceable>=<replaceable>bucket-name</replaceable> ...</screen>
   <variablelist>
    <varlistentry>
     <term>id</term>
     <listitem>
      <para>
       An integer. The numeric ID of the OSD. This option is required.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>name</term>
     <listitem>
      <para>
       A string. The full name of the OSD. This option is required.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>weight</term>
     <listitem>
      <para>
       A double. The CRUSH weight for the OSD. This option is required.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pool</term>
     <listitem>
      <para>
       A key/value pair. By default, the CRUSH hierarchy contains the pool
       default as its root. This option is required.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>bucket-type</term>
     <listitem>
      <para>
       Key/value pairs. You may specify the OSD’s location in the CRUSH
       hierarchy.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The following example adds <literal>osd.0</literal> to the hierarchy, or
    moves the OSD from a previous location.
   </para>
<screen>&prompt.root;ceph osd crush set osd.0 1.0 root=data datacenter=dc1 room=room1 \
row=foo rack=bar host=foo-bar-1</screen>
  </sect2>

  <sect2 xml:id="op.crush.osdweight">
   <title>Adjust an OSD’s CRUSH Weight</title>
   <para>
    To adjust an OSD’s crush weight in the &crushmap;of a running cluster,
    execute the following:
   </para>
<screen>&prompt.root;ceph osd crush reweight <replaceable>name</replaceable> <replaceable>weight</replaceable></screen>
   <variablelist>
    <varlistentry>
     <term>name</term>
     <listitem>
      <para>
       A string. The full name of the OSD. This option is required.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>weight</term>
     <listitem>
      <para>
       A double. The CRUSH weight for the OSD. This option is required.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="op.crush.osdremove">
   <title>Remove an OSD</title>
   <para>
    To remove an OSD from the &crushmap;of a running cluster, execute the
    following:
   </para>
<screen>&prompt.root;ceph osd crush remove <replaceable>name</replaceable></screen>
   <variablelist>
    <varlistentry>
     <term>name</term>
     <listitem>
      <para>
       A string. The full name of the OSD. This option is required.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="op.crush.movebucket">
   <title>Move a Bucket</title>
   <para>
    To move a bucket to a different location or position in the CRUSH map
    hierarchy, execute the following:
   </para>
<screen>&prompt.root;ceph osd crush move <replaceable>bucket-name</replaceable> <replaceable>bucket-type</replaceable>=<replaceable>bucket-name</replaceable>, ...</screen>
   <variablelist>
    <varlistentry>
     <term>bucket-name</term>
     <listitem>
      <para>
       A string. The name of the bucket to move/reposition. This option is
       required.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>bucket-type</term>
     <listitem>
      <para>
       Key/value pairs. You may specify the bucket’s location in the CRUSH
       hierarchy.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="op.mixed_ssd_hdd">
  <title>Mixed SSDs and HDDs on the Same Node</title>

  <para>
   It can be desirable to configure a &ceph; cluster such that each node has a
   mix of SSDs and HDDs, with one storage pool on the fast SSDs and one storage
   pool on the slower HDDs. To do this, the &crushmap; needs to be edited.
  </para>

  <para>
   The default &crushmap; will have a simple hierarchy, where the default root
   contains hosts, and the hosts contain OSDs, for example:
  </para>

<screen>&prompt.root;ceph osd tree
ID  WEIGHT  TYPE NAME         UP/DOWN REWEIGHT
 -1 0.18494 root default
 -2 0.05548     host node1
  0 0.01849         osd.0          up 1.00000
  3 0.01849         osd.3          up 1.00000
  6 0.01849         osd.6          up 1.00000
 -3 0.05548     host node2
  1 0.01849         osd.1          up 1.00000
  4 0.01849         osd.4          up 1.00000
  7 0.01849         osd.7          up 1.00000
 -4 0.05548     host node3
  2 0.01849         osd.2          up 1.00000
  5 0.01849         osd.5          up 1.00000
  8 0.01849         osd.8          up 1.00000</screen>

  <para>
   This provides no distinction between disk types. In order to split the OSDs
   into SSDs and HDDs, we need to create a second hierarchy in the &crushmap;:
  </para>

<screen>&prompt.root;ceph osd crush add-bucket ssd root</screen>

  <para>
   Having created the new root for SSDs, we need to add hosts to it. This means
   creating new host entries. But because the same host name cannot appear more
   than once in a &crushmap;, this uses fake host names. These fake host names
   do not need to be resolvable by DNS. CRUSH does not care what the host names
   are, they only need to create the right hierarchies. The one thing that
   <emphasis>does</emphasis> need to be changed in order to support fake host
   names is that you must set
  </para>

<screen>&prompt.root;ceph osd crush update on start = false</screen>

  <para>
   in <filename>/etc/ceph/ceph.conf</filename>. Otherwise the OSDs you move
   will be reset later to their original location in the default root, and the
   cluster will not behave as expected.
  </para>

  <para>
   Once that setting is changed, add the new fake hosts to the SSD root:
  </para>

<screen>&prompt.root;ceph osd crush add-bucket node1-ssd host
&prompt.root;ceph osd crush move node1-ssd root=ssd
&prompt.root;ceph osd crush add-bucket node2-ssd host
&prompt.root;ceph osd crush move node2-ssd root=ssd
&prompt.root;ceph osd crush add-bucket node3-ssd host
&prompt.root;ceph osd crush move node3-ssd root=ssd</screen>

  <para>
   Finally, for each SSD OSD, move the OSD to the SSD root. In this example, we
   assume that osd.0, osd.1 and osd.2 are physically hosted on SSDs:
  </para>

<screen>&prompt.root;ceph osd crush add osd.0 1 root=ssd
&prompt.root;ceph osd crush set osd.0 1 root=ssd host=node1-ssd
&prompt.root;ceph osd crush add osd.1 1 root=ssd
&prompt.root;ceph osd crush set osd.1 1 root=ssd host=node2-ssd
&prompt.root;ceph osd crush add osd.2 1 root=ssd
&prompt.root;ceph osd crush set osd.2 1 root=ssd host=node3-ssd</screen>

  <para>
   The CRUSH hierarchy should now look like this:
  </para>

<screen>&prompt.root;ceph osd tree
ID WEIGHT  TYPE NAME                   UP/DOWN REWEIGHT PRIMARY-AFFINITY
-5 3.00000 root ssd
-6 1.00000     host node1-ssd
 0 1.00000         osd.0                    up  1.00000          1.00000
-7 1.00000     host node2-ssd
 1 1.00000         osd.1                    up  1.00000          1.00000
-8 1.00000     host node3-ssd
 2 1.00000         osd.2                    up  1.00000          1.00000
-1 0.11096 root default
-2 0.03699     host node1
 3 0.01849         osd.3                    up  1.00000          1.00000
 6 0.01849         osd.6                    up  1.00000          1.00000
-3 0.03699     host node2
 4 0.01849         osd.4                    up  1.00000          1.00000
 7 0.01849         osd.7                    up  1.00000          1.00000
-4 0.03699     host node3
 5 0.01849         osd.5                    up  1.00000          1.00000
 8 0.01849         osd.8                    up  1.00000          1.00000</screen>

  <para>
   Now, create a CRUSH rule that targets the SSD root:
  </para>

<screen>&prompt.root;ceph osd crush rule create-simple ssd_replicated_ruleset ssd host</screen>

  <para>
   The original default <option>replicated_ruleset</option> (with ID 0) will
   target the HDDs. The new <option>ssd_replicated_ruleset</option> (with ID 1)
   will target the SSDs.
  </para>

  <para>
   Any existing pools will still be using the HDDs, because they are in the
   default hierarchy in the CRUSH map. A new pool can be created to use SSDs
   only:
  </para>

<screen>&prompt.root;ceph osd pool create ssd-pool 64 64
&prompt.root;ceph osd pool set ssd-pool crush_ruleset 1</screen>

  <para>
   The ID "1" in the above command needs to match the ID of the new CRUSH role
   which targets the SSDs.
  </para>
 </sect1>
</chapter>
