<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="bp-troubleshooting-logging">
 <title>Troubleshooting Logging and Debugging</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:editurl>https://github.com/SUSE/doc-ses/edit/master/xml/</dm:editurl>
   <dm:translation>yes</dm:translation>
   <dm:release>SES 7</dm:release>
  </dm:docmanager>
 </info>
 <para>
  Typically, when you add debugging to your Ceph configuration, you do so at
  runtime. You can also add Ceph debug logging to your Ceph configuration
  file if you are encountering issues when starting your cluster. You may
  view Ceph log files under <filename>/var/log/ceph</filename> (the default location).
 </para>
 <tip>
   <para>
    When debug output slows down your system, the latency can hide race conditions.
   </para>
 </tip>
 <para>
   Logging is resource intensive. If you are encountering a problem in a
   specific area of your cluster, enable logging for that area of the cluster.
   For example, if your OSDs are running fine, but your metadata servers
   are not, you should start by enabling debug logging for the specific
   metadata server instance(s) giving you trouble. Enable logging for each
   subsystem as needed.
 </para>
 <important>
   <para>
     Verbose logging can generate over 1GB of data per hour. If your OS
     disk reaches its capacity, the node will stop working.
   </para>
 </important>
 <para>
   If you enable or increase the rate of Ceph logging, ensure that you have
   sufficient disk space on your OS disk. See <xref linkend="bp-troubleshooting-accelerating"/>
   for details on rotating log files. When your system is running well,
   remove unnecessary debugging settings to ensure your cluster runs optimally.
   Logging debug output messages is relatively slow, and a waste of resources
   when operating your cluster.
   See <xref linkend="bp-troubleshooting-system-log"/> for details on available settings.
 </para>
 <sect1 xml:id="bp-troubleshooting-runtime">
  <title>Runtime</title>
    <para>
      If you would like to see the configuration settings at runtime, you
      must log in to a host with a running daemon and execute the following:
    </para>
<screen>ceph daemon {daemon-name} config show | less</screen>
    <para>
      For example:
    </para>
<screen>ceph daemon osd.0 config show | less</screen>
    <para>
      To activate Ceph’s debugging output (i.e., <literal>dout()</literal>) at
      runtime, use the <command>ceph tell</command> command to inject arguments into the
      runtime configuration:
    </para>
<screen>ceph tell {daemon-type}.{daemon id or *} config set {name} {value}</screen>
    <para>
      Replace <option>{daemon-type}</option> with one of osd, mon or mds. You may apply the
      runtime setting to all daemons of a particular type with <literal>*</literal>, or specify
      a specific daemon’s ID. For example, to increase debug logging for a
      ceph-osd daemon named <literal>osd.0</literal>, execute the following:
    </para>
<screen>ceph tell osd.0 config set debug_osd 0/5</screen>
    <para>
      The <command>ceph tell</command> command goes through the monitors. If you cannot bind
      to the monitor, you can make the change by logging into the
      daemon host using ceph daemon. For example:
    </para>
<screen>sudo ceph daemon osd.0 config set debug_osd 0/5</screen>
    <para>
      See <xref linkend="bp-troubleshooting-system-log"/> for details on available settings.
    </para>
 </sect1>
 <sect1 xml:id="bp-troubleshooting-boottime">
  <title>Boot time</title>
    <para>
      To activate Ceph’s debugging output (i.e., <literal>dout()</literal>) at boot time, you
      must add settings to your Ceph configuration file. Subsystems common
      to each daemon may be set under <literal>[global]</literal> in your configuration file.
      Subsystems for particular daemons are set under the daemon
      section in your configuration file (e.g., <literal>[mon]</literal>,
      <literal>[osd]</literal>, <literal>[mds]</literal>).
      For example:
    </para>
<screen>
  [global]
          debug ms = 1/5

  [mon]
          debug mon = 20
          debug paxos = 1/5
          debug auth = 2

  [osd]
          debug osd = 1/5
          debug filestore = 1/5
          debug journal = 1
          debug monc = 5/20

  [mds]
          debug mds = 1
          debug mds balancer = 1
</screen>
    <para>
      See <xref linkend="bp-troubleshooting-system-log"/> for details.
    </para>
 </sect1>
 <sect1 xml:id="bp-troubleshooting-accelerating">
  <title>Accelerating Log Rotation</title>
    <para>
      If your OS disk is relatively full, you can accelerate log rotation
      by modifying the Ceph log rotation file at <filename>etc/logrotate.d/ceph</filename>.
      Add a size setting after the rotation frequency to accelerate log
      rotation (via cronjob) if your logs exceed the size setting. For
      example, the default setting looks like this:
    </para>
<screen>
  rotate 7
  weekly
  compress
  sharedscripts
</screen>
    <para>
      Modify it by adding a size setting:
    </para>
<screen>
  rotate 7
  weekly
  size 500M
  compress
  sharedscripts
</screen>
    <para>
      Then, start the crontab editor for your user space:
    </para>
<screen>crontab -e</screen>
    <para>
      Finally, add an entry to check the <filename>etc/logrotate.d/ceph</filename> file:
    </para>
<screen>30 * * * * /usr/sbin/logrotate /etc/logrotate.d/ceph >/dev/null 2>&lt;&amp;1</screen>
    <para>
      The preceding example checks the <filename>etc/logrotate.d/ceph</filename>
      file every 30 minutes.
    </para>
 </sect1>
 <sect1 xml:id="bp-troubleshooting-valgrind">
  <title>Valgrind</title>
    <para>
      Debugging may also require you to track down memory and threading issues.
      You can run a single daemon, a type of daemon, or the whole cluster
      with Valgrind. You should only use Valgrind when developing or
      debugging Ceph. Valgrind is computationally expensive, and will
      slow down your system otherwise. Valgrind messages are logged to stderr.
    </para>
 </sect1>
 <sect1 xml:id="bp-troubleshooting-system-log">
  <title>System, Log, and Debug Settings</title>
  <para>
    In most cases, you will enable debug logging output via subsystems.
  </para>
  <sect2 xml:id="troubleshooting-ceph-subsystems">
    <title>&ceph; Subsystems</title>
    <para>
      Each subsystem has a logging level for its output logs, and for its
      logs in-memory. You may set different values for each of these
      subsystems by setting a log file level and a memory level for
      debug logging. Ceph’s logging levels operate on a scale of 1 to 20,
      where 1 is terse and 20 is verbose 1. In general, the logs
      in-memory are not sent to the output log unless:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          a fatal signal is raised or
        </para>
      </listitem>
      <listitem>
        <para>
          an <literal>assert</literal> in source code is triggered or
        </para>
      </listitem>
      <listitem>
        <para>
          upon request.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      A debug logging setting can take a single value for the log level and
      the memory level, which sets them both as the same value. For example,
      if you specify debug ms = 5, Ceph will treat it as a log level and
      a memory level of 5. You may also specify them separately. The
      first setting is the log level, and the second setting is the
      memory level. You must separate them with a forward slash (/).
      For example, if you want to set the ms subsystem’s debug logging
      level to 1 and its memory level to 5, you would specify it as
      debug ms = 1/5. For example:
    </para>
<screen>
debug {subsystem} = {log-level}/{memory-level}
#for example
debug mds balancer = 1/20
</screen>
     <para>
       The following table provides a list of Ceph subsystems and their
       default log and memory levels. Once you complete your logging
       efforts, restore the subsystems to their default level or to a
       level suitable for normal operations.
     </para>
  </sect2>
  <sect2 xml:id="troubleshooting-logging-settings">
    <title>Logging Settings</title>
  </sect2>
  <sect2 xml:id="troubleshooting-osd">
    <title>OSD</title>
  </sect2>
  <sect2 xml:id="troubleshooting-filestore">
    <title>Filestore</title>
  </sect2>
  <sect2 xml:id="troubleshooting-mds">
    <title>MDS</title>
  </sect2>
  <sect2 xml:id="troubleshooting-rados-gateway">
    <title>Rados Gateway</title>
  </sect2>
 </sect1>
 </chapter>
