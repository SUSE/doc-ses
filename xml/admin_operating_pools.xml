<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="ceph.pools">
 <title>Managing Storage Pools</title>
 <para>
  &ceph; stores data within pools. Pools are logical groups for storing
  objects. When you first deploy a cluster without creating a pool, &ceph; uses
  the default pools for storing data. A pool provides you with:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    <emphasis>Resilience</emphasis>: You can set how many OSDs are allowed to
    fail without losing data. For replicated pools, it is the desired number of
    copies/replicas of an object. New pools are created with a default count of
    replicas set to 3. As typical configuration stores an object and one
    additional copy, you need to set the count of replicas to 2. For erasure
    coded pools, it is the number of coding chunks (that is
    <emphasis>m=2</emphasis> in the erasure code profile).
   </para>
  </listitem>
  <listitem>
   <para>
    <emphasis>Placement Groups</emphasis>: are internal data structures for
    storing data in a pool across OSDs. The way &ceph; stores data into PGs is
    defined in a &crushmap;. You can set the number of placement groups for the
    pool. A typical configuration uses approximately 100 placement groups per
    OSD to provide optimal balancing without using up too many computing
    resources. When setting up multiple pools, be careful to ensure you set a
    reasonable number of placement groups for both the pool and the cluster as
    a whole.
   </para>
  </listitem>
  <listitem>
   <para>
    <emphasis>CRUSH Rules</emphasis>: When you store data in a pool, a CRUSH
    ruleset mapped to the pool enables CRUSH to identify a rule for the
    placement of the object and its replicas (or chunks for erasure coded
    pools) in your cluster. You can create a custom CRUSH rule for your pool.
   </para>
  </listitem>
  <listitem>
   <para>
    <emphasis>Snapshots</emphasis>: When you create snapshots with
    <command>ceph osd pool mksnap</command>, you effectively take a snapshot of
    a particular pool.
   </para>
  </listitem>
  <listitem>
   <para>
    <emphasis>Set Ownership</emphasis>: You can set a user ID as the owner of a
    pool.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  To organize data into pools, you can list, create, and remove pools. You can
  also view the usage statistics for each pool.
 </para>
 <sect1 xml:id="ceph.pools.operate">
  <title>Operating Pools</title>

  <para>
   This section introduces practical information to perform basic tasks with
   pools. You can find out how to list, create, and delete pools, as well as
   show pool statistics or manage snapshots of a pool.
  </para>

  <sect2>
   <title>List Pools</title>
   <para>
    To list your cluster’s pools, execute:
   </para>
<screen>&prompt.root;ceph osd lspools
0 rbd, 1 photo_collection, 2 foo_pool,</screen>
  </sect2>

  <sect2 xml:id="ceph.pools.operate.add_pool">
   <title>Create a Pool</title>
   <tip>
    <title>Creating Pools by Using Calamari</title>
    <para>
     There is another way how you can create a pool by using the graphical tool
     - Calamari. For a procedure refer to
     <xref linkend="storage.bp.cluster_mntc.calamari_addpool"/>.
    </para>
   </tip>
   <para>
    To create a replicated pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool create <replaceable>pool_name</replaceable> <replaceable>pg_num</replaceable> <replaceable>pgp_num</replaceable> replicated <replaceable>crush_ruleset_name</replaceable> \
<replaceable>expected_num_objects</replaceable></screen>
   <para>
    To create an erasure pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool create <replaceable>pool_name</replaceable> <replaceable>pg_num</replaceable> <replaceable>pgp_num</replaceable> erasure <replaceable>erasure_code_profile</replaceable> \
 <replaceable>crush_ruleset_name</replaceable> <replaceable>expected_num_objects</replaceable></screen>
   <variablelist>
    <varlistentry>
     <term>pool_name</term>
     <listitem>
      <para>
       The name of the pool. It must be unique. This option is required.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pg_num</term>
     <listitem>
      <para>
       The total number of placement groups for the pool. This option is
       required. Default value is 8.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pgp_num</term>
     <listitem>
      <para>
       The total number of placement groups for placement purposes. This should
       be equal to the total number of placement groups, except for placement
       group splitting scenarios. This option is required. Default value is 8.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pgp_type</term>
     <listitem>
      <para>
       The pool type which may either be <emphasis>replicated</emphasis> to
       recover from lost OSDs by keeping multiple copies of the objects or
       <emphasis>erasure</emphasis> to get a kind of generalized RAID5
       capability. The replicated pools require more raw storage but implement
       all &ceph; operations. The erasure pools require less raw storage but
       only implement a subset of the available operations. Default is
       'replicated'.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>crush_ruleset_name</term>
     <listitem>
      <para>
       The name of the crush ruleset for this pool. If the specified ruleset
       does not exist, the creation of replicated pool will fail with -ENOENT.
       But replicated pool will create a new erasure ruleset with specified
       name. The default value is 'erasure-code' for erasure pool. Picks up
       &ceph; configuration variable
       <option>osd_pool_default_crush_replicated_ruleset</option> for
       replicated pool.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>erasure_code_profile=profile</term>
     <listitem>
      <para>
       For erasure pools only. Use the erasure code profile. It must be an
       existing profile as defined by <command>osd erasure-code-profile
       set</command>.
      </para>
      <para>
       When you create a pool, set the number of placement groups to a
       reasonable value (for example 100). Consider the total number of
       placement groups per OSD too. Placement groups are computationally
       expensive, so performance will degrade when you have many pools with
       many placement groups (for example 50 pools with 100 placement groups
       each). The point of diminishing returns depends upon the power of the
       OSD host.
      </para>
      <para>
       See
       <link xlink:href="http://docs.ceph.com/docs/master/rados/operations/placement-groups/">Placement
       Groups</link> for details on calculating an appropriate number of
       placement groups for your pool.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>expected_num_objects</term>
     <listitem>
      <para>
       The expected number of objects for this pool. By setting this value, the
       PG folder splitting happens at the pool creation time. This avoids the
       latency impact with a runtime folder splitting.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Set Pool Quotas</title>
   <para>
    You can set pool quotas for the maximum number of bytes and/or the maximum
    number of objects per pool.
   </para>
<screen>&prompt.root;ceph osd pool set-quota <replaceable>pool-name</replaceable> <replaceable>max_objects</replaceable> <replaceable>obj-count</replaceable> <replaceable>max_bytes</replaceable> <replaceable>bytes</replaceable></screen>
   <para>
    For example:
   </para>
<screen>&prompt.root;ceph osd pool set-quota data max_objects 10000</screen>
   <para>
    To remove a quota, set its value to 0.
   </para>
  </sect2>

  <sect2 xml:id="ceph.pools.operate.del_pool">
   <title>Delete a Pool</title>
   <para>
    To delete a pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool delete <replaceable>pool-name</replaceable> <replaceable>pool-name</replaceable> --yes-i-really-really-mean-it</screen>
   <para>
    If you created your own rulesets and rules for a pool you created, you
    should consider removing them when you no longer need your pool. If you
    created users with permissions strictly for a pool that no longer exists,
    you should consider deleting those users too.
   </para>
  </sect2>

  <sect2>
   <title>Rename a Pool</title>
   <para>
    To rename a pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool rename <replaceable>current-pool-name</replaceable> <replaceable>new-pool-name</replaceable></screen>
   <para>
    If you rename a pool and you have per-pool capabilities for an
    authenticated user, you must update the user’s capabilities with the new
    pool name.
   </para>
  </sect2>

  <sect2>
   <title>Show Pool Statistics</title>
   <para>
    To show a pool’s usage statistics, execute:
   </para>
<screen>&prompt.root;rados df
pool name  category  KB  objects   lones  degraded  unfound  rd  rd KB  wr  wr KB
cold-storage    -   228   1         0      0          0       0   0      1   228
data            -    1    4         0      0          0       0   0      4    4
hot-storage     -    1    2         0      0          0       15  10     5   231
metadata        -    0    0         0      0          0       0   0      0    0
pool1           -    0    0         0      0          0       0   0      0    0
rbd             -    0    0         0      0          0       0   0      0    0
total used          266268          7
total avail       27966296
total space       28232564</screen>
  </sect2>

  <sect2 xml:id="ceph.pools.values">
   <title>Set Pool Values</title>
   <para>
    To set a value to a pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool set <replaceable>pool-name</replaceable> <replaceable>key</replaceable> <replaceable>value</replaceable></screen>
   <para>
    You may set values for the following keys:
   </para>
   <variablelist>
    <varlistentry>
     <term>size</term>
     <listitem>
      <para>
       Sets the number of replicas for objects in the pool. See
       <xref linkend="ceph.pools.options.num_of_replicas"/> for further
       details. Replicated pools only.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>min_size</term>
     <listitem>
      <para>
       Sets the minimum number of replicas required for I/O. See
       <xref linkend="ceph.pools.options.num_of_replicas"/> for further
       details. Replicated pools only.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>crash_replay_interval</term>
     <listitem>
      <para>
       The number of seconds to allow clients to replay acknowledged, but
       uncommitted requests.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pg_num</term>
     <listitem>
      <para>
       The number of placement groups for the pool. In case you add OSDs to you
       cluster, you should increase the value of placement groups, for details
       refer to <xref linkend="storage.bp.cluster_mntc.add_pgnum"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pgp_num</term>
     <listitem>
      <para>
       The effective number of placement groups to use when calculating data
       placement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>crush_ruleset</term>
     <listitem>
      <para>
       The ruleset to use for mapping object placement in the cluster.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>hashpspool</term>
     <listitem>
      <para>
       Set (1) or unset (0) the HASHPSPOOL flag on a given pool. Enabling this
       flag changes the algorithm to better distribute PGs to OSDs. After
       enabling this flag on a pool whose HASHPSPOOL flag was set to 0, the
       cluster starts backfilling to have a correct placement of all PGs again.
       Be aware that this can create quite substantial I/O load on a cluster,
       so good planning must be done on a highly loaded production clusters.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>nodelete</term>
     <listitem>
      <para>
       Prevents the pool from being removed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>nopgchange</term>
     <listitem>
      <para>
       Prevents the pool's <option>pg_num</option> and <option>pgp_num</option>
       from being changed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>nosizechange</term>
     <listitem>
      <para>
       Prevents the pool's size from being changed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>write_fadvise_dontneed</term>
     <listitem>
      <para>
       Set/Unset the <literal>WRITE_FADVISE_DONTNEED</literal> flag on a given
       pool.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>noscrub,nodeep-scrub</term>
     <listitem>
      <para>
       Disables (deep)-scrubbing of the data for the specific pool to resolve
       temporary high I/O load.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>hit_set_type</term>
     <listitem>
      <para>
       Enables hit set tracking for cache pools. See
       <link xlink:href="http://en.wikipedia.org/wiki/Bloom_filter">Bloom
       Filter</link> for additional information. This option can have the
       following values: <literal>bloom</literal>,
       <literal>explicit_hash</literal>, <literal>explicit_object</literal>.
       Default is <literal>bloom</literal>, other values are for testing only.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>hit_set_count</term>
     <listitem>
      <para>
       The number of hit sets to store for cache pools. The higher the number,
       the more RAM consumed by the <systemitem>ceph-osd</systemitem> daemon.
       Default is <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>hit_set_period</term>
     <listitem>
      <para>
       The duration of a hit set period in seconds for cache pools. The higher
       the number, the more RAM consumed by the
       <systemitem>ceph-osd</systemitem> daemon.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>hit_set_fpp</term>
     <listitem>
      <para>
       The false positive probability for the bloom hit set type. See
       <link xlink:href="http://en.wikipedia.org/wiki/Bloom_filter">Bloom
       Filter</link> for additional information. Valid range is 0.0 - 1.0
       Default is <literal>0.05</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>use_gmt_hitset</term>
     <listitem>
      <para>
       Force OSDs to use GMT (Greenwich Mean Time) time stamps when creating a
       hit set for cache tiering. This ensures that nodes in different time
       zones return the same result. Default is <literal>1</literal>. This
       value should not be changed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_target_dirty_ratio</term>
     <listitem>
      <para>
       The percentage of the cache pool containing modified (dirty) objects
       before the cache tiering agent will flush them to the backing storage
       pool. Default is <literal>.4</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_target_dirty_high_ratio</term>
     <listitem>
      <para>
       The percentage of the cache pool containing modified (dirty) objects
       before the cache tiering agent will flush them to the backing storage
       pool with a higher speed. Default is <literal>.6</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_target_full_ratio</term>
     <listitem>
      <para>
       The percentage of the cache pool containing unmodified (clean) objects
       before the cache tiering agent will evict them from the cache pool.
       Default is <literal>.8</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>target_max_bytes</term>
     <listitem>
      <para>
       &ceph; will begin flushing or evicting objects when the
       <option>max_bytes</option> threshold is triggered.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>target_max_objects</term>
     <listitem>
      <para>
       &ceph; will begin flushing or evicting objects when the
       <option>max_objects</option> threshold is triggered.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>hit_set_grade_decay_rate</term>
     <listitem>
      <para>
       Temperature decay rate between two successive
       <literal>hit_set</literal>s. Default is <literal>20</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>hit_set_search_last_n</term>
     <listitem>
      <para>
       Count at most <literal>N</literal> appearances in
       <literal>hit_set</literal>s for temperature calculation. Default is
       <literal>1</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_min_flush_age</term>
     <listitem>
      <para>
       The time (in seconds) before the cache tiering agent will flush an
       object from the cache pool to the storage pool.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_min_evict_age</term>
     <listitem>
      <para>
       The time (in seconds) before the cache tiering agent will evict an
       object from the cache pool.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>fast_read</term>
     <listitem>
      <para>
       If this flag is enabled on erasure coding pools, then the read request
       issues sub-reads to all shards, and waits until it receives enough
       shards to decode to serve the client. In the case of
       <emphasis>jerasure</emphasis> and <emphasis>isa</emphasis> erasure
       plug-ins, when the first <literal>K</literal> replies return, then the
       client’s request is served immediately using the data decoded from
       these replies. This helps to gain some resources for better performance.
       Currently, this flag is only supported for erasure coding pools. Default
       is <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>scrub_min_interval</term>
     <listitem>
      <para>
       The minimum interval in seconds for pool scrubbing when the cluster load
       is low. The default <literal>0</literal> means that the
       <option>osd_scrub_min_interval</option> value from the &ceph;
       configuration file is used.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>scrub_max_interval</term>
     <listitem>
      <para>
       The maximum interval in seconds for pool scrubbing, regardless of the
       cluster load. The default <literal>0</literal> means that the
       <option>osd_scrub_max_interval</option> value from the &ceph;
       configuration file is used.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>deep_scrub_interval</term>
     <listitem>
      <para>
       The interval in seconds for the pool <emphasis>deep</emphasis>
       scrubbing. The default <literal>0</literal> means that the
       <option>osd_deep_scrub</option> value from the &ceph; configuration file
       is used.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Get Pool Values</title>
   <para>
    To get a value from a pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool get <replaceable>pool-name</replaceable> <replaceable>key</replaceable></screen>
   <para>
    You can get values for keys listed in <xref linkend="ceph.pools.values"/>
    plus the following keys:
   </para>
   <variablelist>
    <varlistentry>
     <term>pg_num</term>
     <listitem>
      <para>
       The number of placement groups for the pool.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>pgp_num</term>
     <listitem>
      <para>
       The effective number of placement groups to use when calculating data
       placement. Valid range is equal to or less than
       <literal>pg_num</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ceph.pools.options.num_of_replicas">
   <title>Set the Number of Object Replicas</title>
   <para>
    To set the number of object replicas on a replicated pool, execute the
    following:
   </para>
<screen>&prompt.root;ceph osd pool set <replaceable>poolname</replaceable> size <replaceable>num-replicas</replaceable></screen>
   <para>
    The <replaceable>num-replicas</replaceable> includes the object itself. If
    you for example want the object and two copies of the object for a total of
    three instances of the object, specify 3.
   </para>
   <para>
    If you set the <replaceable>num-replicas</replaceable> to 2, there will be
    only <emphasis>one</emphasis> copy of your data. If you lose one object
    instance, you need to trust that the other copy has not been corrupted for
    example since the last
    <link xlink:href="http://ceph.com/docs/master/rados/configuration/osd-config-ref/#scrubbing">scrubbing</link>
    during recovery.
   </para>
   <para>
    Setting a pool to one replica means that there is exactly
    <emphasis>one</emphasis> instance of the data object in the pool. If the
    OSD fails, you lose the data. A possible usage for a pool with one replica
    is storing temporary data for a short time.
   </para>
   <para>
    Setting more than three replicas for a pool means only a small increase in
    reliability, but may be suitable in rare cases. Remember that the more
    replicas, the more disk space needed for storing the object copies. If you
    need the ultimate data security, we recommend using erasure coded pools.
    For more information, see <xref linkend="cha.ceph.erasure"/>.
   </para>
   <warning>
    <title>More than 2 replications recommended</title>
    <para>
     We strongly advise against using only 2 replications. In the event of one
     failed OSD, the failure of the second OSD due to a high work load during
     recovery is extremely likely.
    </para>
   </warning>
   <para>
    For example:
   </para>
<screen>&prompt.root;ceph osd pool set data size 3</screen>
   <para>
    You may execute this command for each pool.
   </para>
   <note>
    <para>
     An object might accept I/Os in degraded mode with fewer than <literal>pool
     size</literal> replicas. To set a minimum number of required replicas for
     I/O, you should use the <literal>min_size</literal> setting. For example:
    </para>
<screen>&prompt.root;ceph osd pool set data min_size 2</screen>
    <para>
     This ensures that no object in the data pool will receive I/O with fewer
     than <literal>min_size</literal> replicas.
    </para>
   </note>
  </sect2>

  <sect2>
   <title>Get the Number of Object Replicas</title>
   <para>
    To get the number of object replicas, execute the following:
   </para>
<screen>&prompt.root;ceph osd dump | grep 'replicated size'</screen>
   <para>
    &ceph; will list the pools, with the <literal>replicated size</literal>
    attribute highlighted. By default, &ceph; creates two replicas of an object
    (a total of three copies, or a size of 3).
   </para>
  </sect2>

  <sect2 xml:id="storage.bp.cluster_mntc.add_pgnum">
   <title>Increasing the Number of Placement Groups</title>
   <para>
    When creating a new pool, you specify the number of placement groups for
    the pool (see <xref linkend="ceph.pools.operate.add_pool"/>). After adding
    more OSDs to the cluster, you usually need to increase the number of
    placement groups as well for performance and data durability reasons. For
    each placement group, OSD and monitor nodes need memory, network and CPU at
    all times and even more during recovery. From which follows that minimizing
    the number of placement groups saves significant amounts of resources.
   </para>
   <warning>
    <title>Too High Value of <option>pg_num</option></title>
    <para>
     When changing the <option>pg_num</option> value for a pool, it may happen
     that the new number of placement groups exceeds the allowed limit. For
     example
    </para>
<screen>&prompt.root;ceph osd pool set rbd pg_num 4096
 Error E2BIG: specified pg_num 3500 is too large (creating 4096 new PGs \
 on ~64 OSDs exceeds per-OSD max of 32)</screen>
    <para>
     The limit prevents extreme placement group splitting, and is derived from
     the <option>mon_osd_max_split_count</option> value.
    </para>
   </warning>
   <para>
    To determine the right new number of placement groups for a resized cluster
    is a complex task. One approach is to continuously grow the number of
    placement groups up to the state when the cluster performance is optimal.
    To determine the new incremented number of placement groups, you need to
    get the value of the <option>mon_osd_max_split_count</option> parameter,
    and add it to the current number of placement groups. To give you a basic
    idea, take a look at the following script:
   </para>
<screen>&prompt.cephuser;max_inc=`ceph daemon mon.a config get mon_osd_max_split_count 2&gt;&amp;1 \
  | tr -d '\n ' | sed 's/.*"\([[:digit:]]\+\)".*/\1/'`
&prompt.cephuser;pg_num=`ceph osd pool get rbd pg_num | cut -f2 -d: | tr -d ' '`
&prompt.cephuser;echo "current pg_num value: $pg_num, max increment: $max_inc"
&prompt.cephuser;next_pg_num="$(($pg_num+$max_inc))"
&prompt.cephuser;echo "allowed increment of pg_num: $next_pg_num"</screen>
   <para>
    After finding out the next number of placement groups, increase it with
   </para>
<screen>&prompt.root;ceph osd pool set <replaceable>pool_name</replaceable> pg_num <replaceable>next_pg_num</replaceable></screen>
  </sect2>

  <sect2 xml:id="storage.bp.cluster_mntc.add_pool">
   <title>Adding a Pool</title>
   <para>
    After you first deploy a cluster, &ceph; uses the default pools to store
    data. You can later create a new pool with
   </para>
<screen>&prompt.root;ceph osd pool create</screen>
   <para>
    For more information on cluster pool creation, see
    <xref linkend="ceph.pools.operate.add_pool"/>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="cha.ceph.snapshots.pool">
  <title>Pool Snapshots</title>

  <para>
   Pool snapshots are snapshots of the state of the whole &ceph; pool. With
   pool snapshots, you can retain the history of the pool's state. Depending on
   the pool's size, creating pool snapshots may require a lot of storage space.
   Always check the related storage for enough disk space before creating a
   snapshot of a pool.
  </para>

  <sect2>
   <title>Make a Snapshot of a Pool</title>
   <para>
    To make a snapshot of a pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool mksnap <replaceable>pool-name</replaceable> <replaceable>snap-name</replaceable></screen>
   <para>
    For example:
   </para>
<screen>&prompt.root;ceph osd pool mksnap pool1 snapshot1
created pool pool1 snap snapshot1</screen>
  </sect2>

  <sect2>
   <title>Remove a Snapshot of a Pool</title>
   <para>
    To remove a snapshot of a pool, execute:
   </para>
<screen>&prompt.root;ceph osd pool rmsnap <replaceable>pool-name</replaceable> <replaceable>snap-name</replaceable></screen>
  </sect2>
 </sect1>
 <sect1 xml:id="storage.bp.cluster_mntc.calamari_addpool">
  <title>Managing Pools Using Calamari</title>

  <para>
   Apart from using the command line to create or delete pools (see
   <xref linkend="storage.bp.cluster_mntc.add_pool"/> and
   <xref linkend="ceph.pools.operate.del_pool"/>), you can do the same from
   within Calamari in a more comfortable user interface.
  </para>

  <sect2 xml:id="storage.admin.creating.pools.calamari">
   <title>Creating Pool with Calamari</title>
   <para>
    To create a new pool using Calamari, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      Log in to a running instance of Calamari.
     </para>
    </step>
    <step>
     <para>
      Go to
      <menuchoice><guimenu>Manage</guimenu><guimenu>Pools</guimenu></menuchoice>.
      You can see a list of the cluster's existing pools.
     </para>
    </step>
    <step>
     <para>
      Click <inlinemediaobject>
      <imageobject>
       <imagedata fileref="calamari_adpool_plus.png" width="25px"/>
      </imageobject>
      </inlinemediaobject> in the right top.
     </para>
    </step>
    <step>
     <para>
      Enter a name for the new pool, and either change the number of replicas,
      number of placement groups, and the CRUSH ruleset, or leave them at
      default values.
     </para>
    </step>
    <step>
     <para>
      Click <inlinemediaobject>
      <imageobject>
       <imagedata fileref="calamari_adpool_plus.png" width="25px"/>
      </imageobject>
      </inlinemediaobject> to confirm, then <guimenu>Cancel</guimenu> the
      warning dialog.
     </para>
    </step>
    <step>
     <para>
      Now you can see the new pool in the list of all existing pools. You can
      verify the existence of the new pool on the command line with
     </para>
<screen>&prompt.root;ceph osd lspools</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="storage.admin.deleting.pools.calamari">
   <title>Deleting Pool with Calamari</title>
   <para>
    To delete an existing pool using Calamari, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      Log in to a running instance of Calamari.
     </para>
    </step>
    <step>
     <para>
      Go to
      <menuchoice><guimenu>Manage</guimenu><guimenu>Pools</guimenu></menuchoice>.
      You can see a list of the cluster's existing pools.
     </para>
    </step>
    <step>
     <para>
      From the list of pools, choose the one to delete and click the related
      <inlinemediaobject>
      <imageobject>
       <imagedata fileref="calamari_rmpool_thrash.png" width="25px"/>
      </imageobject>
      </inlinemediaobject>
     </para>
    </step>
    <step>
     <para>
      Confirm the deletion and <guimenu>Cancel</guimenu> the warning dialog.
     </para>
    </step>
    <step>
     <para>
      You can verify the deletion of the pool on the command line with
     </para>
<screen>&prompt.root;ceph osd lspools</screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
