<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="admin_nfsganesha.xml" version="5.0" xml:id="cha-ceph-nfsganesha">

 <title>NFS Ganesha：通过 NFS 导出 Ceph 数据</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:maintainer>tbazant@suse.com</dm:maintainer>
   <dm:status>编辑</dm:status>
   <dm:deadline/>
   <dm:priority/>
   <dm:translation>yes</dm:translation>
   <dm:languages/>
   <dm:release>SES 6</dm:release>
  </dm:docmanager>
 </info>
 <para>
  NFS Ganesha 是一台 NFS 服务器（请参见<link xlink:href="https://documentation.suse.com/sles/15-SP1/html/SLES-all/cha-nfs.html">与 NFS 共享文件系统</link>），它在用户地址空间中运行，而不是作为操作系统内核的一部分运行。借助 NFS Ganesha，您可以插入自己的存储机制（例如 Ceph），并从任何 NFS 客户端访问它。
 </para>
 <para>
  系统按用户将 S3 存储桶导出到 NFS，例如，通过路径 <filename><replaceable>GANESHA_NODE:</replaceable>/<replaceable>用户名</replaceable>/<replaceable>存储桶名</replaceable></filename>导出。
 </para>
 <para>
  默认通过路径 <filename><replaceable>GANESHA_NODE:</replaceable>/cephfs</filename> 导出 CephFS。
 </para>
 <note>
  <title>NFS Ganesha 性能</title>
  <para>
   由于客户端与存储区之间的额外网络跃点会导致协议开销增加并产生额外的延迟，因此与使用本机 CephFS 或对象网关客户端相比，通过 NFS 网关访问 Ceph 可能会使应用性能大幅降低。
  </para>
 </note>
 <sect1 xml:id="ceph-nfsganesha-install">
  <title>安装</title>

  <para>
   有关安装说明，请参阅<xref linkend="cha-as-ganesha"/>。
  </para>
 </sect1>
 <sect1 xml:id="ceph-nfsganesha-config">
  <title>配置</title>

  <para>
   有关可在配置文件中使用的所有参数的列表，请参见：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <command>man ganesha-config</command>
    </para>
   </listitem>
   <listitem>
    <para>
     <command>man ganesha-ceph-config</command>，用于 CephFS 文件系统抽象层 (FSAL) 选项。
    </para>
   </listitem>
   <listitem>
    <para>
     <command>man ganesha-rgw-config</command>，用于对象网关 FSAL 选项。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   本节包含的信息可帮助您配置 NFS Ganesha 服务器，以导出可通过对象网关和 CephFS 访问的集群数据。
  </para>

  <para>
   NFS Ganesha 配置包含两个部分：服务配置和导出项配置。服务配置通过 <filename>/etc/ganesha/ganesha.conf</filename> 控制。注意，对此文件所做的更改在执行 DeepSea 阶段 4 时将被覆盖。要永久更改这些设置，请编辑位于 Salt Master 上的文件 <filename>/srv/salt/ceph/ganesha/files/ganesha.conf.j2</filename>。导出项配置以 RADOS 对象的形式存储在 Ceph 集群中。
  </para>

  <sect2 xml:id="ceph-nfsganesha-config-service-general">
   <title>服务配置</title>
   <para>
    服务配置存储在 <filename>/etc/ganesha/ganesha.conf</filename> 中，用于控制所有 NFS Ganesha 守护进程设置，包括 Ceph 集群中存储导出项配置的位置。注意，对此文件所做的更改在执行 DeepSea 阶段 4 时将被覆盖。要永久更改这些设置，请编辑位于 Salt Master 上的文件 <filename>/srv/salt/ceph/ganesha/files/ganesha.conf.j2</filename>。
   </para>
   <sect3 xml:id="ceph-nfsganesha-config-service-rados">
    <title>RADOS_URLS 段落</title>
    <para>
     <literal>RADOS_URLS</literal> 部分用于配置为了从 RADOS 对象读取 NFS Ganesha 配置所需进行的 Ceph 集群访问。
    </para>
<screen>RADOS_URLS {
  Ceph_Conf = /etc/ceph/ceph.conf;

  UserId = "ganesha.<replaceable>MINION_ID</replaceable>";
  watch_url = "rados://<replaceable>RADOS_POOL</replaceable>/ganesha/conf-<replaceable>MINION_ID</replaceable>";
}</screen>
    <variablelist>
     <varlistentry>
      <term>Ceph_Conf</term>
      <listitem>
       <para>
        Ceph 配置文件路径位置。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>UserId</term>
      <listitem>
       <para>
        CephX 用户 ID。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>watch_url</term>
      <listitem>
       <para>
        用于查看重新加载通知的 RADOS 对象 URL。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ceph-nfsganesha-config-service-rgw">
    <title>RGW 段落</title>
<screen>RGW {
  ceph_conf = "/etc/ceph/ceph.conf";
  name = "name";
  cluster = "ceph";
}</screen>
    <variablelist>
     <varlistentry>
      <term>ceph_conf</term>
      <listitem>
       <para>
        指向 <filename>ceph.conf</filename> 文件。与 DeepSea 一起部署时，不需要更改此值。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>name</term>
      <listitem>
       <para>
        NFS Ganesha 使用的 Ceph 客户端用户名。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>cluster</term>
      <listitem>
       <para>
        Ceph 集群的名称。SUSE Enterprise Storage 6 目前只支持一个集群名称，默认为 <literal>ceph</literal>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ceph-nfsganesha-config-service-url">
    <title>RADOS 对象 URL</title>
<screen>%url rados://<replaceable>RADOS_POOL</replaceable>/ganesha/conf-<replaceable>MINION_ID</replaceable></screen>
    <para>
     NFS Ganesha 支持从 RADOS 对象读取配置。使用 <literal>%url</literal> 指令可指定用于识别 RADOS 对象位置的 RADOS URL。
    </para>
    <para>
     RADOS URL 可采用以下两种格式：<literal>rados://&lt;POOL&gt;/&lt;OBJECT&gt;</literal> 或 <literal>rados://&lt;POOL&gt;/&lt;NAMESPACE&gt;/&lt;OBJECT&gt;</literal>，其中 <literal>POOL</literal> 是存储对象的 RADOS 存储池，<literal>NAMESPACE</literal> 是存储对象的存储池名称空间，<literal>OBJECT</literal> 是对象名称。
    </para>
    <para>
     为了支持 Ceph Dashboard 的 NFS Ganesha 管理功能，您需要遵循每个服务守护进程的 RADOS 对象的命名约定。对象名称必须采用 <literal>conf-<replaceable>MINION_ID</replaceable></literal> 格式，其中 MINION_ID 是正在运行此服务的节点的 Salt Minion ID。
    </para>
    <para>
     DeepSea 已负责执行正确生成此 URL 的工作，您无需再进行任何更改。
    </para>
   </sect3>
   <sect3 xml:id="ganesha-nfsport">
    <title>更改默认 NFS Ganesha 端口</title>
    <para>
     NFS Ganesha 默认使用端口 2049 提供 NFS 支持，使用 875 提供 rquota 支持。要更改默认端口号，请在 <literal>NFS_CORE_PARAM</literal> 段落中使用 <option>NFS_Port</option> 和 <option>RQUOTA_Port</option> 选项，例如：
    </para>
<screen>
NFS_CORE_PARAM
{
NFS_Port = 2060;
RQUOTA_Port = 876;
}
</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-nfsganesha-config-exports-general">
   <title>导出项配置</title>
   <para>
    导出项配置以 RADOS 对象的形式存储在 Ceph 集群中。每个导出块都存储在各自名为 <literal>export-&lt;id&gt;</literal> 的 RADOS 对象中，其中，<literal>&lt;id&gt;</literal> 必须与导出项配置的 <literal>Export_ID</literal> 属性匹配。导出项与 NFS Ganesha 服务之间的关联通过 <literal>conf-MINION_ID</literal> 对象实现。每个服务对象包含该服务导出的每个导出项的 RADOS URL 列表。导出块如下所示：
   </para>
<screen>EXPORT
{
  Export_Id = 1;
  Path = "/";
  Pseudo = "/";
  Access_Type = RW;
  Squash = No_Root_Squash;
  [...]
  FSAL {
    Name = CEPH;
  }
}</screen>
   <para>
    要为上面的导出块创建 RADOS 对象，我们需要先将导出块代码存储到一个文件中。然后可以使用 RADOS CLI 工具将之前保存的文件的内容存储到 RADOS 对象中。
   </para>
<screen>
<prompt>cephadm@adm &gt; </prompt>rados -p <replaceable>POOL</replaceable> -N <replaceable>NAMESPACE</replaceable> put export-<replaceable>EXPORT_ID</replaceable> <replaceable>EXPORT_FILE</replaceable>
</screen>
   <para>
    创建导出对象后，我们便可将导出项与服务实例进行关联，方法是为服务对象添加导出对象的相应 RADOS URL。下面的章节说明如何配置导出块。
   </para>
   <sect3 xml:id="ceph-nfsganesha-config-general-export">
    <title>Export 主段落</title>
    <variablelist>
     <varlistentry>
      <term>Export_Id</term>
      <listitem>
       <para>
        每个导出项都需要有唯一的“Export_Id”（强制）。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Path</term>
      <listitem>
       <para>
        相关 CephFS 存储池中的导出项路径（强制）。允许从 CephFS 中导出子目录。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Pseudo</term>
      <listitem>
       <para>
        目标 NFS 导出项路径（对于 NFSv4 为强制）。它定义在哪个 NFS 导出项路径下可获得导出的数据。
       </para>
       <para>
        示例：使用值 <literal>/cephfs/</literal> 并执行
       </para>
<screen>
<prompt>root # </prompt>mount <replaceable>GANESHA_IP</replaceable>:/cephfs/ /mnt/
</screen>
       <para>
        之后，CephFS 数据可在客户端上的目录 <filename>/mnt/cephfs/</filename> 中获得。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Access_Type</term>
      <listitem>
       <para>
        “RO”表示只读访问权限，“RW”表示读写访问权限，“None”表示禁止访问。
       </para>
       <tip>
        <title>限制客户端的访问</title>
        <para>
         如果您在主 <literal>EXPORT</literal> 段落保留 <literal>Access_Type = RW</literal>，并在 <literal>CLIENT</literal> 段落限制特定客户端的访问，其他客户端仍可连接。要禁止所有客户端的访问而只允许特定客户端进行访问，请在 <literal>EXPORT</literal> 段落设置 <literal>Access_Type = None</literal>，然后在 <literal>CLIENT</literal> 段落为一个或多个客户端指定限制较少的访问模式：
        </para>
<screen>
EXPORT {

	FSAL {
 access_type = "none";
 [...]
 }

 CLIENT {
		clients = 192.168.124.9;
		access_type = "RW";
		[...]
 }
[...]
}
</screen>
       </tip>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Squash</term>
      <listitem>
       <para>
        NFS 匿名访问选项。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>FSAL</term>
      <listitem>
       <para>
        导出“文件系统抽象层”。请参见<xref linkend="ceph-nfsganesha-config-general-fsal"/>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ceph-nfsganesha-config-general-fsal">
    <title>FSAL 子段落</title>
<screen>EXPORT
{
  [...]
  FSAL {
    Name = CEPH;
  }
}</screen>
    <variablelist>
     <varlistentry>
      <term>Name</term>
      <listitem>
       <para>
        定义 NFS Ganesha 使用的后端。允许的值为 <literal>CEPH</literal>（表示 CephFS）或 <literal>RGW</literal>（表示对象网关）。根据您的选择，必须在 <filename>policy.cfg</filename> 中定义 <literal>role-mds</literal> 或 <literal>role-rgw</literal>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-nfsganesha-customrole">
  <title>自定义 NFS Ganesha 角色</title>

  <para>
   可为集群节点定义自定义 NFS Ganesha 角色。然后可在 <filename>policy.cfg</filename> 中将这些角色指定给节点。角色允许：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     分别使用不同的 NFS Ganesha 节点来访问对象网关和 CephFS。
    </para>
   </listitem>
   <listitem>
    <para>
     将不同的对象网关用户指定给 NFS Ganesha 节点。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   拥有不同的对象网关用户可让 NFS Ganesha 节点访问不同的 S3 存储桶。S3 存储桶可用于进行访问控制。注意：不要将 S3 存储桶与 CRUSH 索引中使用的 Ceph 存储桶混淆。
  </para>

  <sect2 xml:id="ceph-nfsganesha-customrole-rgw-multiusers">
   <title>NFS Ganesha 的不同对象网关用户</title>
   <para>
    下面针对 Salt Master 的示例过程展示如何创建两个具有不同对象网关用户的 NFS Ganesha 角色。在此示例中，使用了角色 <literal>gold</literal> 和 <literal>silver</literal>，DeepSea 已经提供了它们的示例配置文件。
   </para>
   <procedure xml:id="proc-ceph-nfsganesha-rgw-multiusers">
    <step>
     <para>
      使用您选择的编辑器打开 <filename>/srv/pillar/ceph/stack/global.yml</filename> 文件。如果该文件不存在，请予以创建。
     </para>
    </step>
    <step>
     <para>
      该文件需要包含以下几行：
     </para>
<screen>rgw_configurations:
  - rgw
  - silver
  - gold
ganesha_configurations:
  - silver
  - gold</screen>
     <para>
      稍后可以在 <filename>policy.cfg</filename> 中指定这些角色。
     </para>
    </step>
    <step>
     <para>
      创建 <filename>/srv/salt/ceph/rgw/users/users.d/gold.yml</filename> 文件并添加以下内容：
     </para>
<screen>- { uid: "gold1", name: "gold1", email: "gold1@demo.nil" }</screen>
     <para>
      创建 <filename>/srv/salt/ceph/rgw/users/users.d/silver.yml</filename> 文件并添加以下内容：
     </para>
<screen>- { uid: "silver1", name: "silver1", email: "silver1@demo.nil" }</screen>
    </step>
    <step>
     <para>
      现在，需要为每个角色创建 <filename>ganesha.conf</filename> 的模板。使用 DeepSea 的原始模板是较佳的做法。创建两个副本：
     </para>
<screen><prompt>root@master # </prompt><command>cd</command> /srv/salt/ceph/ganesha/files/
<prompt>root@master # </prompt><command>cp</command> ganesha.conf.j2 silver.conf.j2
<prompt>root@master # </prompt><command>cp</command> ganesha.conf.j2 gold.conf.j2</screen>
    </step>
    <step>
     <para>
      新的角色需要密钥环来访问集群。要提供访问权限，请复制 <filename>ganesha.j2</filename>：
     </para>
<screen><prompt>root@master # </prompt><command>cp</command> ganesha.j2 silver.j2
<prompt>root@master # </prompt><command>cp</command> ganesha.j2 gold.j2</screen>
    </step>
    <step>
     <para>
      复制对象网关的密钥环：
     </para>
<screen><prompt>root@master # </prompt><command>cd</command> /srv/salt/ceph/rgw/files/
<prompt>root@master # </prompt><command>cp</command> rgw.j2 silver.j2
<prompt>root@master # </prompt><command>cp</command> rgw.j2 gold.j2</screen>
    </step>
    <step>
     <para>
      对象网关还需要不同角色的配置：
     </para>
<screen><prompt>root@master # </prompt><command>cd</command> /srv/salt/ceph/configuration/files/
<prompt>root@master # </prompt><command>cp</command> ceph.conf.rgw silver.conf
<prompt>root@master # </prompt><command>cp</command> ceph.conf.rgw gold.conf</screen>
    </step>
    <step>
     <para>
      在 <filename>/srv/pillar/ceph/proposals/policy.cfg</filename> 中将新建的角色指定给集群节点：
     </para>
<screen>role-silver/cluster/<replaceable>NODE1</replaceable>.sls
role-gold/cluster/<replaceable>NODE2</replaceable>.sls
 </screen>
     <para>
      将 <replaceable>NODE1</replaceable> 和 <replaceable>NODE2</replaceable> 分别替换为要将角色指定给的节点的名称。
     </para>
    </step>
    <step>
     <para>
      执行 DeepSea 阶段 0 到 4。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ceph-nfsganesha-customrole-rgw-cephfs">
   <title>分隔 CephFS 和对象网关 FSAL</title>
   <para>
    下面针对 Salt Master 的示例过程展示如何创建使用 CephFS 和对象网关的 2 个不同的新角色：
   </para>
   <procedure xml:id="proc-ceph-nfsganesha-customrole">
    <step>
     <para>
      使用您选择的编辑器打开文件 <filename>/srv/pillar/ceph/rgw.sls</filename>。如果该文件不存在，请予以创建。
     </para>
    </step>
    <step>
     <para>
      该文件需要包含以下几行：
     </para>
<screen>rgw_configurations:
  ganesha_cfs:
    users:
      - { uid: "demo", name: "Demo", email: "demo@demo.nil" }
  ganesha_rgw:
    users:
      - { uid: "demo", name: "Demo", email: "demo@demo.nil" }

ganesha_configurations:
  - ganesha_cfs
  - ganesha_rgw</screen>
     <para>
      稍后可以在 <filename>policy.cfg</filename> 中指定这些角色。
     </para>
    </step>
    <step>
     <para>
      现在，需要为每个角色创建 <filename>ganesha.conf</filename> 的模板。使用 DeepSea 的原始模板是较佳的做法。创建两个副本：
     </para>
<screen><prompt>root@master # </prompt><command>cd</command> /srv/salt/ceph/ganesha/files/
<prompt>root@master # </prompt><command>cp</command> ganesha.conf.j2 ganesha_rgw.conf.j2
<prompt>root@master # </prompt><command>cp</command> ganesha.conf.j2 ganesha_cfs.conf.j2</screen>
    </step>
    <step>
     <para>
      编辑 <filename>ganesha_rgw.conf.j2</filename>，删除以下段落：
     </para>
<screen>{% if salt.saltutil.runner('select.minions', cluster='ceph', roles='mds') != [] %}
        [...]
{% endif %}</screen>
    </step>
    <step>
     <para>
      编辑 <filename>ganesha_cfs.conf.j2</filename>，删除以下段落：
     </para>
<screen>{% if salt.saltutil.runner('select.minions', cluster='ceph', roles=role) != [] %}
        [...]
{% endif %}</screen>
    </step>
    <step>
     <para>
      新的角色需要密钥环来访问集群。要提供访问权限，请复制 <filename>ganesha.j2</filename>：
     </para>
<screen><prompt>root@master # </prompt><command>cp</command> ganesha.j2 ganesha_rgw.j2
<prompt>root@master # </prompt><command>cp</command> ganesha.j2 ganesha_cfs.j2</screen>
     <para>
      可从 <filename>ganesha_rgw.j2</filename> 中删除 <literal>caps mds = "allow *"</literal> 这一行。
     </para>
    </step>
    <step>
     <para>
      复制对象网关的密钥环：
     </para>
<screen><prompt>root@master # </prompt><command>cp</command> /srv/salt/ceph/rgw/files/rgw.j2 \
/srv/salt/ceph/rgw/files/ganesha_rgw.j2</screen>
    </step>
    <step>
     <para>
      对象网关需要您对新角色进行配置：
     </para>
<screen><prompt>root@master # </prompt><command>cp</command> /srv/salt/ceph/configuration/files/ceph.conf.rgw \
/srv/salt/ceph/configuration/files/ceph.conf.ganesha_rgw</screen>
    </step>
    <step>
     <para>
      在 <filename>/srv/pillar/ceph/proposals/policy.cfg</filename> 中将新建的角色指定给集群节点：
     </para>
<screen>role-ganesha_rgw/cluster/<replaceable>NODE1</replaceable>.sls
role-ganesha_cfs/cluster/<replaceable>NODE1</replaceable>.sls
 </screen>
     <para>
      将 <replaceable>NODE1</replaceable> 和 <replaceable>NODE2</replaceable> 分别替换为要将角色指定给的节点的名称。
     </para>
    </step>
    <step>
     <para>
      执行 DeepSea 阶段 0 到 4。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ganesha-rgw-supported-operations">
   <title>支持的操作</title>
   <para>
    RGW NFS 接口支持对文件及目录执行的大部分操作，但存在以下限制：
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>不支持包含符号链接的链接。</emphasis>
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>不支持 NFS 访问控制列表 (ACL)。</emphasis><emphasis>支持</emphasis> Unix 用户及组所有权和权限。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>目录不可移动或重命名。</emphasis>您<emphasis>可</emphasis>在目录之间移动文件。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>仅支持完整的顺序写入 I/O。</emphasis>因此，它会强制上载写入操作。许多执行非顺序存储的典型 I/O 操作（如就地编辑文件）必定会失败。有一些归档实用程序（例如，GNU <command>tar</command> 的某些版本）表面上是按顺序写入，但也可能会因偶尔的非顺序存储而失败。通过 NFS 装入时，一般可通过同步装入（<option>-o sync</option> 选项）强制应用的顺序 I/O 向 NFS 服务器顺序写入数据。无法同步装入的 NFS 客户端（例如 Microsoft Windows*）将无法上载文件。
     </para>
    </listitem>
    <listitem>
     <para>
      NFS RGW 仅支持对小于 4 MB 的存储块执行读写操作。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-nfsganesha-services">
  <title>启动或重启动 NFS Ganesha</title>

  <para>
   要启用并启动 NFS Ganesha 服务，请运行以下命令：
  </para>

<screen><prompt>root@minion &gt; </prompt><command>systemctl</command> enable nfs-ganesha
<prompt>root@minion &gt; </prompt><command>systemctl</command> start nfs-ganesha</screen>

  <para>
   要重启动 NFS Ganesha，请运行以下命令：
  </para>

<screen><prompt>root@minion &gt; </prompt><command>systemctl</command> restart nfs-ganesha</screen>

  <para>
   启动或重启动 NFS Ganesha 时，NFS v4 会有 90 秒的超时宽限期。在宽限期内，会主动拒绝来自客户端的新请求。因此，当 NFS 处于宽限状态时，客户端可能会发生请求处理速度变慢的情况。
  </para>
 </sect1>
 <sect1 xml:id="ceph-nfsganesha-loglevel">
  <title>设置日志级别</title>

  <para>
   通过编辑文件 <filename>/etc/sysconfig/nfs-ganesha</filename>，可更改默认调试级别 <literal>NIV_EVENT</literal>。将 <literal>NIV_EVENT</literal> 替换为 <literal>NIV_DEBUG</literal> 或 <literal>NIV_FULL_DEBUG</literal>。提高日志详细程度可能会在日志文件中产生大量数据。
  </para>

<screen>OPTIONS="-L /var/log/ganesha/ganesha.log -f /etc/ganesha/ganesha.conf -N NIV_EVENT"</screen>

  <para>
   更改日志级别时，需要重启动服务。
  </para>
 </sect1>
 <sect1 xml:id="ceph-nfsganesha-verify">
  <title>校验导出的 NFS 共享</title>

  <para>
   使用 NFS v3 时，可以在 NFS Ganesha 服务器节点上校验是否导出了 NFS 共享：
  </para>

<screen><prompt>root@minion &gt; </prompt><command>showmount</command> -e
/ (everything)</screen>
 </sect1>
 <sect1 xml:id="ceph-nfsganesha-mount">
  <title>装入导出的 NFS 共享</title>

  <para>
   要在客户端主机上装入导出的 NFS 共享（根据<xref linkend="ceph-nfsganesha-config"/>中的配置），请运行以下命令：
  </para>

<screen><prompt>root # </prompt><command>mount</command> -t nfs -o rw,noatime,sync \
 <replaceable>nfs_ganesha_server_hostname:/ /path/to/local/mountpoint</replaceable></screen>
 </sect1>
</chapter>
