<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="admin_about.xml" version="5.0" xml:id="cha-storage-about">
 <title>SESとCeph</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
   <dm:release>SES 7</dm:release>
  </dm:docmanager>
 </info>
 <para>
  SUSE Enterprise
  Storageは、スケーラビリティ、信頼性、およびパフォーマンスを目的として設計された、Cephテクノロジに基づく分散ストレージシステムです。Cephクラスタは、Ethernetなどの一般的なネットワーク内にあるコモディティサーバで実行できます。クラスタは、数千台のサーバ(以降、ノードと呼びます)とペタバイトの域にまで容易に拡張できます。データを保存および取得するためのアロケーションテーブルを持つ従来のシステムとは異なり、Cephは決定的アルゴリズムを使用してデータの記憶域を割り当て、集中化された情報構造を持ちません。Cephでは、Storage
  Cluster内でのハードウェアの追加や削除は、例外ではなく標準の動作であると想定されています。Cephクラスタは、データの分散と再分散、データの複製、障害検出、回復などの管理タスクを自動化します。Cephは自己修復機能と自己管理機能の両方を備えているため、管理と予算のオーバーヘッドが削減されます。
 </para>
 <para>
  この章では、SUSE Enterprise Storage 7の大まかな概要と、最も重要なコンポーネントについて簡単に説明します。
 </para>
 <sect1 xml:id="storage-intro-features">
  <title>Cephの特徴</title>

  <para>
   Ceph環境には次のような特徴があります。
  </para>

  <variablelist>
   <varlistentry>
    <term>拡張性</term>
    <listitem>
     <para>
      Cephは数千台のノードにまで拡張でき、ペタバイトの域のストレージを管理できます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>コモディティハードウェア</term>
    <listitem>
     <para>
      Cephクラスタを実行するのに特別なハードウェアは必要ありません。詳細については、<xref linkend="storage-bp-hwreq"/>を参照してください。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>自己管理</term>
    <listitem>
     <para>
      Cephクラスタは自己管理型です。ノードが追加または削除された場合、あるいはノードに障害が発生した場合、クラスタは自動的にデータを再分散します。過負荷状態のディスクを認識する機能もあります。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>SPOF (Single Point of Failure)を排除</term>
    <listitem>
     <para>
      クラスタ内のノードが重要な情報を単独で保存することはありません。冗長性の数は設定が可能です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>オープンソースのソフトウェア</term>
    <listitem>
     <para>
      Cephは、特定のハードウェアやベンダーとは無関係のオープンソースソフトウェアソリューションです。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="storage-intro-core">
  <title>Cephのコアコンポーネント</title>

  <para>
   Cephの能力を最大限活用するには、その基本的なコンポーネントと概念を理解する必要があります。このセクションでは、他の章で頻繁に参照されるCephの機能をいくつか紹介します。
  </para>

  <sect2 xml:id="storage-intro-core-rados">
   <title>RADOS</title>
   <para>
    Cephの基本コンポーネントは「RADOS (Reliable Autonomic Distributed Object
    Store)<emphasis/>
    <emphasis/>」と呼ばれます。これは、クラスタに保存されるデータの管理を受け持ちます。通常、Ceph内のデータはオブジェクトとして保存されています。各オブジェクトはIDとデータで構成されます。
   </para>
   <para>
    RADOSは、保存オブジェクトへのアクセス方法として次の方法を備えており、さまざまな使用事例に対応します。
   </para>
   <variablelist>
    <varlistentry>
     <term>Object Gateway</term>
     <listitem>
      <para>
       Object Gatewayは、RADOS Object StoreのHTTP
       RESTゲートウェイです。これにより、Cephクラスタに保存されているオブジェクトへの直接アクセスが可能になります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>RADOS Block Device</term>
     <listitem>
      <para>
       RADOS Block Device
       (RBD)には他のブロックデバイスと同じようにアクセスできます。たとえば、仮想化を行う場合、RBDと<systemitem class="library">libvirt</systemitem>を組み合わせて使用できます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>CephFS</term>
     <listitem>
      <para>
       Ceph File SystemはPOSIX互換のファイルシステムです。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="library">librados</systemitem></term>
     <listitem>
      <para>
       <systemitem class="library">librados</systemitem>は、Storage
       Clusterを直接操作できるアプリケーションを作成するためのライブラリで、さまざまなプログラミング言語で使用できます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Object
    GatewayとRBDは<systemitem class="library">librados</systemitem>を使用するのに対し、CephFSはRADOSと直接対話します。<xref linkend="storage-intro-core-rados-figure"/>を参照してください。
   </para>
   <figure xml:id="storage-intro-core-rados-figure">
    <title>Ceph Object Storeのインタフェース</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="rados-structure.svg" width="70%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="rados-structure.png" width="70%"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>

  <sect2 xml:id="storage-intro-core-crush">
   <title>CRUSH</title>
   <para>
    Cephクラスタの中核を成すのは「CRUSH」<emphasis/>アルゴリズムです。CRUSHは「Controlled Replication
    Under Scalable
    Hashing」<emphasis/>の略語です。CRUSHはストレージの割り当てを扱う機能で、指定が必要なパラメータは比較的少なくなっています。つまり、オブジェクトの保存位置を計算するのに必要な情報はごくわずかです。そのパラメータは、ヘルス状態を含むクラスタの現在のマップ、管理者定義の配置ルール、および保存または取得する必要があるオブジェクトの名前です。この情報により、Cephクラスタ内のすべてのノードは、オブジェクトとそのレプリカが保存されている場所を計算できます。このため、データの読み書きが非常に効率化されます。CRUSHは、データをクラスタ内のすべてのノードに均等に分散しようとします。
   </para>
   <para>
    「CRUSHマップ」<emphasis/>には、クラスタにオブジェクトを保存するための、すべてのストレージノードと管理者定義の配置ルールが記述されています。CRUSHマップは階層構造を定義し、その階層構造は通常、クラスタの物理構造に対応します。たとえば、データが含まれるディスクがホストにあり、ホストがラックに格納されているとします。さらに、ラックは複数の列に収容されていて、ラック列はデータセンターにあるとします。この構造を使用して「障害ドメイン」<emphasis/>を定義できます。Cephは、それに従ってレプリケーションが特定の障害ドメインの異なるブランチに保存されるようにします。
   </para>
   <para>
    障害ドメインがラックに設定されている場合、オブジェクトのレプリケーションは異なるラックに分散されます。これによって、ラック内のスイッチの障害によって発生する停止を緩和できます。1台の配電ユニットで1つのラック列に電力を供給している場合は、障害ドメインを列に設定できます。配電ユニットに障害が発生しても、引き続き他の列で複製されたデータを利用できます。
   </para>
  </sect2>

  <sect2 xml:id="storage-intro-core-nodes">
   <title>Cephのノードとデーモン</title>
   <para>
    Cephでは、ノードとはクラスタを形成しているサーバです。ノードでは複数の種類のデーモンを実行できます。各ノードで実行するデーモンは1種類だけにすることをお勧めします。ただし、Ceph
    Managerデーモンは例外で、Ceph Monitorと一緒に配置できます。各クラスタには、少なくともCeph Monitor、Ceph
    Manager、およびCeph OSDデーモンが必要です。
   </para>
   <variablelist>
    <varlistentry>
     <term>管理ノード</term>
     <listitem>
      <para>
       「管理ノード」<emphasis/>とは、コマンドを実行してクラスタを管理するCephクラスタノードを指します。管理ノードはCephクラスタの中心となる場所です。これは、Salt
       Minionサービスに対してクエリと命令を行って他のクラスタノードを管理する役割があるためです。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ceph Monitor</term>
     <listitem>
      <para>
       <emphasis/>「Ceph
       Monitor」(多くの場合、「MON」と省略<emphasis/>)ノードは、クラスタのヘルス状態に関する情報、すべてのノードのマップ、およびデータ分散ルールを維持します(<xref linkend="storage-intro-core-crush"/>を参照してください)。
      </para>
      <para>
       障害または衝突が発生した場合、クラスタ内のCeph
       Monitorノードは、どの情報が正しいかを多数決で決定します。必ず多数決が得られるように、奇数個(少なくとも3個以上)のCeph
       Monitorノードを設定することをお勧めします。
      </para>
      <para>
       複数のサイトを使用する場合、Ceph Monitorノードは奇数個のサイトに分散する必要があります。サイトあたりのCeph
       Monitorノードの数は、1つのサイトに障害が発生したときに、50%を超えるCeph
       Monitorノードの機能が維持される数にする必要があります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ceph Manager</term>
     <listitem>
      <para>
       Ceph Managerはクラスタ全体から状態情報を収集します。Ceph ManagerデーモンはCeph
       Monitorデーモンと共に動作します。追加のモニタリング機能を提供し、外部のモニタリングシステムや管理システムとのインタフェースとして機能します。これには、他のサービスも含まれます。たとえば、CephダッシュボードWeb
       UIはCeph Managerと同じノードで実行されます。
      </para>
      <para>
       Ceph Managerには、動作確認以外の追加設定は必要ありません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ceph OSD</term>
     <listitem>
      <para>
       「Ceph
       OSD」<emphasis/>は、「オブジェクトストレージデバイス」<emphasis/>を処理するデーモンです。OSDは、物理ストレージユニットまたは論理ストレージユニット(ハードディスクまたはパーティション)になります。オブジェクトストレージデバイスは、物理ディスク/パーティションにも、論理ボリュームにもできます。このデーモンはほかにも、データのレプリケーションや、ノードが追加または削除された場合のリバランスも処理します。
      </para>
      <para>
       Ceph OSDデーモンはモニターデーモンと通信して、他のOSDデーモンの状態をモニターデーモンに提供します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    CephFS、Object Gateway、NFS Ganesha、またはiSCSI Gatewayを使用するには、追加のノードが必要です。
   </para>
   <variablelist>
    <varlistentry>
     <term>MDS (メタデータサーバ)</term>
     <listitem>
      <para>
       CephFSのメタデータは自身のRADOSプールに保存されます(<xref linkend="storage-intro-structure-pool"/>を参照してください)。メタデータサーバはスマートなメタデータのキャッシュ層として機能し、必要に応じてアクセスをシリアル化します。これにより、明示的な同期を取ることなく多数のクライアントからの同時アクセスが可能となります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Object Gateway</term>
     <listitem>
      <para>
       Object Gatewayは、RADOS Object StoreのHTTP RESTゲートウェイです。OpenStack
       SwiftおよびAmazon S3と互換性があり、独自のユーザ管理機能を持ちます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>NFS Ganesha</term>
     <listitem>
      <para>
       NFS Ganeshaは、Object
       GatewayまたはCephFSにNFSアクセスを提供します。カーネル空間ではなくユーザ空間で動作し、Object
       GatewayまたはCephFSと直接対話します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>iSCSI Gateway</term>
     <listitem>
      <para>
       iSCSIは、クライアントからリモートサーバ上のSCSIストレージデバイス(ターゲット)にSCSIコマンドを送信できるようにするストレージネットワークプロトコルです。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Sambaゲートウェイ</term>
     <listitem>
      <para>
       Sambaゲートウェイは、CephFSに保存されているデータにSambaからアクセスできるようにします。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="storage-intro-structure">
  <title>Cephのストレージ構造</title>

  <sect2 xml:id="storage-intro-structure-pool">
   <title>プール</title>
   <para>
    Cephクラスタに保存されるオブジェクトは「プール」<emphasis/>に配置されます。プールは、外部環境に対してはクラスタの論理パーティションを表します。各プールに対して一連のルールを定義できます。たとえば、各オブジェクトのレプリケーションがいくつ存在する必要があるかなどを定義できます。プールの標準設定を「複製プール」<emphasis/>と呼びます。
   </para>
   <para>
    通常、プールにはオブジェクトが含まれていますが、RAID
    5と同様の動作をするように設定することもできます。この設定の場合、オブジェクトは追加のコーディングチャンクと共にチャンクで保存されます。コーディングチャンクには冗長な情報が含まれます。データとコーディングチャンクの数は管理者が定義できます。この設定の場合、プールは「イレージャコーディングプール(ECプール)」<emphasis/>と呼ばれます。<emphasis/>
   </para>
  </sect2>

  <sect2 xml:id="storage-intro-structure-pg">
   <title>配置グループ</title>
   <para>
    <emphasis/>「配置グループ」(PG)は、プール内でデータを分散するために使用されます。プールの作成時に、一定数の配置グループが設定されます。配置グループは、オブジェクトをグループ化するために内部的に使用され、Cephクラスタのパフォーマンスにおける重要な要因です。オブジェクトのPGはオブジェクトの名前によって決定されます。
   </para>
  </sect2>

  <sect2 xml:id="storage-intro-structure-example">
   <title>例</title>
   <para>
    このセクションでは、Cephのデータ管理の仕組みを簡単な例で説明します(<xref linkend="storage-intro-structure-example-figure"/>を参照してください)。この例は、Cephクラスタの推奨設定を表すものではありません。このハードウェアセットアップは、3つのストレージノードまたはCeph
    OSD
    (<literal>ホスト1</literal>、<literal>ホスト2</literal>、<literal>ホスト3</literal>)で構成されます。各ノードにはハードディスクが3つあり、それぞれがOSDとして使用されます(<literal>osd.1</literal>～<literal>osd.9</literal>)。この例では、Ceph
    Monitorノードを無視しています。
   </para>
   <note>
    <title>Ceph OSDとOSDの違い</title>
    <para>
     <emphasis/>「Ceph OSD」または「Ceph
     OSDデーモン」<emphasis/>は、ノード上で実行されるデーモンを指すのに対し、「OSD」<emphasis/>という語はそのデーモンが対話する論理ディスクを指します。
    </para>
   </note>
   <para>
    クラスタには<literal>プールA</literal>と<literal>プールB</literal>の2つのプールがあります。プールAはオブジェクトを2回だけ複製するのに対し、プールBの災害耐性はより重要であるため、各オブジェクトのレプリケーションを3つ保持します。
   </para>
   <para>
    たとえばREST
    API経由でアプリケーションがオブジェクトをプールに配置すると、プールとオブジェクト名に基づいて配置グループ(<literal>PG1</literal>～<literal>PG4</literal>)が選択されます。続いて、CRUSHアルゴリズムにより、オブジェクトが含まれている配置グループに基づいて、オブジェクトを保存するOSDが計算されます。
   </para>
   <para>
    この例では、障害ドメインはホストに設定されています。これにより、オブジェクトのレプリケーションが確実に別のホストに保存されるようにします。プールに設定されているレプリケーションレベルに応じて、オブジェクトは、配置グループによって使用される2つまたは3つのOSDに保存されます。
   </para>
   <para>
    オブジェクトを書き込むアプリケーションは、プライマリCeph OSDである1つのCeph OSDとのみ対話します。プライマリCeph
    OSDはレプリケーションを処理し、他のすべてのOSDがオブジェクトを保存したら、書き込みプロセスの完了を確認します。
   </para>
   <para>
    <literal>osd.5</literal>に障害が発生した場合、<literal>PG1</literal>のすべてのオブジェクトは<literal>osd.1</literal>で引き続き利用可能です。OSDに障害が発生したことをクラスタが認識するとすぐに、別のOSDが処理を引き継ぎます。この例では、<literal>osd.4</literal>が<literal>osd.5</literal>の代わりとして使用されます。その後、<literal>osd.1</literal>に保存されているオブジェクトが<literal>osd.4</literal>に複製され、レプリケーションレベルが復元されます。
   </para>
   <figure xml:id="storage-intro-structure-example-figure">
    <title>小規模なCephの例</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="data-structure-example.svg" width="100%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="data-structure-example.png" width="100%"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    新しいOSDを持つ新しいノードがクラスタに追加されると、クラスタマップが変更されます。それに従って、CRUSH機能はオブジェクトに対して別の場所を返します。新しい場所を受け取ったオブジェクトは、別の場所に移動されます。このプロセスにより、すべてのOSDがバランス良く使用されます。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="about-bluestore">
  <title>BlueStore</title>

  <para>
   SES
   5から、BlueStoreがCephの新しいデフォルトストレージバックエンドになりました。BlueStoreはFileStoreよりもパフォーマンスが高く、データの完全なチェックサムや組み込みの圧縮機能を備えています。
  </para>

  <para>
   BlueStoreは、1つ、2つ、または3つのいずれかのストレージデバイスを管理します。最もシンプルなケースでは、BlueStoreは1つのプライマリストレージデバイスを使用します。通常、ストレージデバイスは、次の2つの部分にパーティション分割されます。
  </para>

  <orderedlist>
   <listitem>
    <para>
     BlueFSという名前の小容量のパーティション。RocksDBで必要な、ファイルシステムに似た機能を実装します。
    </para>
   </listitem>
   <listitem>
    <para>
     通常、デバイスの残りの部分は、その部分を占有する大容量のパーティションになります。これはBlueStoreによって直接管理され、実際のデータがすべて含まれます。通常、このプライマリデバイスは、データディレクトリ内ではブロックシンボリックリンクで識別されます。
    </para>
   </listitem>
  </orderedlist>

  <para>
   次のように、2つの追加デバイスにわたってBlueStoreを展開することもできます。
  </para>

  <para>
   <emphasis/>「WALデバイス」は、BlueStoreの内部ジャーナルまたは先書きログに使用できます。これは、データディレクトリでは、シンボリックリンク<literal>block.wal</literal>で識別されます。別個のWALデバイスを使用すると役立つのは、そのデバイスがプライマリデバイスまたはDBデバイスより高速な場合だけです。たとえば、次のような場合です。
  </para>

  <itemizedlist>
   <listitem>
    <para>
     WALデバイスがNVMeで、DBデバイスがSSD、データデバイスがSSDまたはHDDである。
    </para>
   </listitem>
   <listitem>
    <para>
     WALデバイスとDBデバイスの両方が別個のSSDで、データデバイスがSSDまたはHDDである。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   <emphasis/>「DBデバイス」は、BlueStoreの内部メタデータを保存するために使用できます。BlueStore
   (または埋め込みのRocksDB)は、パフォーマンスを向上させるため、できる限り多くのメタデータをDBデバイス上に配置します。ここでも、共有DBデバイスをプロビジョニングすると役に立つのは、そのデバイスがプライマリデバイスより高速な場合だけです。
  </para>

  <tip>
   <title>DBサイズの計画</title>
   <para>
    DBデバイスが十分なサイズになるよう慎重に計画してください。DBデバイスがいっぱいになると、メタデータがプライマリデバイスにあふれ、OSDのパフォーマンスが大きく低下します。
   </para>
   <para>
    <command>ceph daemon osd<replaceable>.ID</replaceable> perf
    dump</command>コマンドを使用して、WAL/DBパーティションがいっぱいであふれそうかどうかを調べることができます。<option>slow_used_bytes</option>の値に、あふれているデータの量が表示されます。
   </para>
<screen>
<prompt>cephuser@adm &gt; </prompt>ceph daemon osd<replaceable>.ID</replaceable> perf dump | jq '.bluefs'
"db_total_bytes": 1073741824,
"db_used_bytes": 33554432,
"wal_total_bytes": 0,
"wal_used_bytes": 0,
"slow_total_bytes": 554432,
"slow_used_bytes": 554432,
</screen>
  </tip>
 </sect1>
 <sect1 xml:id="storage-moreinfo">
  <title>追加情報</title>

  <itemizedlist>
   <listitem>
    <para>
     コミュニティプロジェクトとして、Cephには、独自の広範なオンラインヘルプがあります。このマニュアルに記載されていないトピックについては、<link xlink:href="https://docs.ceph.com/en/octopus/"/>を参照してください。
    </para>
   </listitem>
   <listitem>
    <para>
     S.A. Weil、S.A. Brandt、E.L. Miller、C. Maltzahn<emphasis/>による元のドキュメント『CRUSH:
     Controlled, Scalable, Decentralized Placement of Replicated
     Data』<emphasis/>には、Cephの内部動作に関する有益な洞察が記載されています。特に大規模クラスタを展開する場合には、これを一読することをお勧めします。このドキュメントは<link xlink:href="http://www.ssrc.ucsc.edu/papers/weil-sc06.pdf"/>にあります。
    </para>
   </listitem>
   <listitem>
    <para>
     SUSE Enterprise Storageは、SUSE OpenStack以外の配布パッケージで使用できます。Cephクライアントは、SUSE
     Enterprise Storageと互換性があるレベルである必要があります。
    </para>
    <note>
     <para>
      SUSEはCeph展開のサーバコンポーネントをサポートし、クライアントはOpenStack配布パッケージベンダーによってサポートされます。
     </para>
    </note>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
