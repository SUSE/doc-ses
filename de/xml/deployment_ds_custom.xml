<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="deployment_ds_custom.xml" version="5.0" xml:id="ceph-deploy-ds-custom">
 <title>Anpassen der Standardkonfiguration</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>Ja</dm:translation>
   <dm:release>SES 6</dm:release>
  </dm:docmanager>
 </info>
 <para>
  Sie können die in Phase 2 generierte Cluster-Konfiguration ändern (weitere Informationen hierzu finden Sie im Abschnitt <xref linkend="deepsea-stage-description"/>). Beispielsweise müssen Sie die Netzwerkeinstellungen ändern oder eine standardmäßig auf dem Admin Node installierte Software. Ersteres erfolgt durch Ändern des Pillar, der nach Phase 2 aktualisiert wurde. Letzteres wird normalerweise durch Erstellen einer benutzerdefinierten <literal>sls</literal>-Datei ausgeführt, die dann zum Pillar hinzugefügt wird. Detaillierte Informationen erhalten Sie in den folgenden Abschnitten.
 </para>
 <sect1 xml:id="using-customized-files">
  <title>Verwenden benutzerdefinierter Konfigurationsdateien</title>

  <para>
   In diesem Abschnitt sind einige Aufgaben aufgeführt, für die Sie zunächst Ihre eigenen <literal>sls</literal>-Dateien hinzufügen/ändern müssen. Dieses Verfahren wird normalerweise angewendet, wenn Sie den standardmäßigen Bereitstellungsprozess ändern müssen.
  </para>

  <tip>
   <title>Präfix für benutzerdefinierte SLS-Dateien</title>
   <para>
    Ihre benutzerdefinierten SLS-Dateien befinden sich im selben Unterverzeichnis wie die SLS-Dateien von DeepSea. Stellen Sie die Zeichenkette <filename>custom-</filename> als Präfix vor den Namen Ihrer SLS-Dateien, um zu verhindern, dass sie von den möglicherweise neu hinzugefügten Dateien aus dem DeepSea-Paket überschrieben werden.
   </para>
  </tip>

  <sect2>
   <title>Deaktivieren eines Bereitstellungschritts</title>
   <para>
    Wenn Sie eine spezifische Aufgabe außerhalb des DeepSea-Bereitstellungsvorgangs ausführen und sie daher überspringen müssen, erstellen Sie eine "no-operation"-Datei anhand des folgenden Beispiels:
   </para>
   <procedure>
    <title>Deaktivieren der Zeitsynchronisierung</title>
    <step>
     <para>
      Erstellen Sie die Datei <filename>/srv/salt/ceph/time/disabled.sls</filename> mit folgendem Inhalt und speichern Sie sie:
     </para>
<screen>disable time setting:
test.nop</screen>
    </step>
    <step>
     <para>
      Bearbeiten Sie die Datei <filename>/srv/pillar/ceph/stack/global.yml</filename>, fügen Sie die folgende Zeile hinzu und speichern Sie sie:
     </para>
<screen>time_init: disabled</screen>
    </step>
    <step>
     <para>
      Verifizieren Sie das Ergebnis durch Aktualisieren des Pillar und Ausführen des folgenden Schritts:
     </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> saltutil.pillar_refresh
<prompt>root@master # </prompt>salt 'admin.ceph' state.apply ceph.time
admin.ceph:
  Name: disable time setting - Function: test.nop - Result: Clean

Summary for admin.ceph
------------
Succeeded: 1
Failed:    0
------------
Total states run:     1</screen>
     <note>
      <title>Eindeutige Kennung</title>
      <para>
       Die Aufgabenkennung „disable time setting“ kann durch eine eindeutige Bezeichnung in einer <literal>sls</literal>-Datei ersetzt werden. Geben Sie eindeutige Beschreibungen an, um zu verhindern, dass Kennungen missverständlich sind.
      </para>
     </note>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="deepsea-replacing-step">
   <title>Ersetzen eines Bereitstellungschritts</title>
   <para>
    Wenn Sie das Standardverhalten eines bestimmten Schritts durch ein benutzerdefiniertes Verhalten ersetzen müssen, erstellen Sie eine benutzerdefinierte <literal>sls</literal>-Datei mit dem entsprechenden Inhalt.
   </para>
   <para>
    Standardmäßig erstellt <filename>/srv/salt/ceph/pool/default.sls</filename> ein RBD-Image namens „demo“. In unserem Beispiel soll dieses Image nicht erstellt werden, sondern zwei Images namens „archive1“ und „archive2“.
   </para>
   <procedure>
    <title>Ersetzen des RBD-Image <emphasis>demo</emphasis> durch zwei benutzerdefinierte RBD-Images</title>
    <step>
     <para>
      Erstellen Sie die Datei <filename>/srv/salt/ceph/pool/custom.sls</filename> mit folgendem Inhalt und speichern Sie sie:
     </para>
<screen>wait:
  module.run:
    - name: wait.out
    - kwargs:
        'status': "HEALTH_ERR"<co xml:id="co-deepsea-replace-wait"/>
    - fire_event: True

archive1:
  cmd.run:
    - name: "rbd -p rbd create archive1 --size=1024"<co xml:id="co-deepsea-replace-rbd"/>
    - unless: "rbd -p rbd ls | grep -q archive1$"
    - fire_event: True

archive2:
  cmd.run:
    - name: "rbd -p rbd create archive2 --size=768"
    - unless: "rbd -p rbd ls | grep -q archive2$"
    - fire_event: True</screen>
     <calloutlist>
      <callout arearefs="co-deepsea-replace-wait">
       <para>
        Das <emphasis role="bold">wait</emphasis>-Modul pausiert bis der Status <literal>HEALTH_ERR</literal> des Ceph Clusters nicht mehr erscheint. Bei Neuinstallationen weist ein Ceph Cluster diesen Status möglicherweise so lange auf, bis eine ausreichende Anzahl von OSDs verfügbar und die Erstellung der Pools abgeschlossen ist.
       </para>
      </callout>
      <callout arearefs="co-deepsea-replace-rbd">
       <para>
        Das Kommando <command>rbd</command> ist nicht idempotent. Wird dasselbe Erstellungskommando erneut ausgeführt, wenn das Image bereits vorhanden ist, ist der Salt-Zustand fehlerhaft. Durch die Anweisung <emphasis role="bold">unless</emphasis> wird dies verhindert.
       </para>
      </callout>
     </calloutlist>
    </step>
    <step>
     <para>
      Sie müssen die Datei <filename>/srv/pillar/ceph/stack/ceph/cluster.yml</filename> bearbeiten, die folgende Zeile hinzufügen und sie speichern, um die neu erstellte benutzerdefinierte Datei statt der Standarddatei aufrufen zu können:
     </para>
<screen>pool_init: custom</screen>
    </step>
    <step>
     <para>
      Verifizieren Sie das Ergebnis durch Aktualisieren des Pillar und Ausführen des folgenden Schritts:
     </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> saltutil.pillar_refresh
<prompt>root@master # </prompt>salt 'admin.ceph' state.apply ceph.pool</screen>
    </step>
   </procedure>
   <note>
    <title>Autorisierung</title>
    <para>
     Für die Erstellung von Pools oder Images ist eine ausreichende Autorisierung erforderlich. Der <literal>admin.ceph</literal>-Minion verfügt über einen Admin-Schlüsselbund.
    </para>
   </note>
   <tip>
    <title>Alternative Methode</title>
    <para>
     Alternativ können Sie die Variable in Datei <filename>/srv/pillar/ceph/stack/ceph/roles/master.yml</filename> ändern. Durch Verwendung dieser Datei wird die Fülle von Pillar-Daten für andere Minions reduziert.
    </para>
   </tip>
  </sect2>

  <sect2>
   <title>Bearbeiten eines Bereitstellungschritts</title>
   <para>
    Manchmal benötigen Sie zum Ausführen zusätzlicher Aufgaben möglicherweise einen bestimmten Schritt. Es ist nicht zu empfehlen, die entsprechende Zustandsdatei zu bearbeiten, weil ein zukünftiges Update dadurch kompliziert werden könnte. Erstellen Sie stattdessen zum Ausführen der zusätzlichen Aufgaben eine separate Datei, die mit dem übereinstimmt, was in <xref linkend="deepsea-replacing-step"/> beschrieben ist.
   </para>
   <para>
    Geben Sie der neuen <literal>sls</literal>-Datei einen beschreibenden Namen. Beispiel: Wenn Sie zwei RBD-Images zusätzlich zum Demo-Image erstellen müssen, geben Sie der Datei den Namen <filename>archive.sls</filename>.
   </para>
   <procedure>
    <title>Erstellen von zwei zusätzlichen RBD-Images</title>
    <step>
     <para>
      Erstellen Sie die Datei <filename>/srv/salt/ceph/pool/custom.sls</filename> mit folgendem Inhalt und speichern Sie sie:
     </para>
<screen>include:
 - .archive
 - .default</screen>
     <tip>
      <title>Reihenfolge angeben</title>
      <para>
       In diesem Beispiel erstellt Salt die <emphasis>archive</emphasis>-Images und dann das <emphasis>demo</emphasis>-Image. Die Reihenfolge spielt in diesem Beispiel keine Rolle. Vertauschen Sie die Zeilen nach der Anweisung <literal>include:</literal>, um die Reihenfolge zu ändern.
      </para>
      <para>
       Sie können die Zeile mit „include“ direkt zu <filename>archive.sls</filename> hinzufügen und alle Images werden ebenfalls erstellt. Allerdings verarbeitet Salt die Schritte in der enthaltenen Datei zuerst, unabhängig davon wo die Zeile mit „include“ platziert wird. Obwohl dieses Verhalten durch die Anweisungen <emphasis>requires</emphasis> und <emphasis>order</emphasis> außer Kraft gesetzt werden kann, garantiert eine separate Datei, die die anderen enthält, die Einhaltung der Reihenfolge und verringert die Gefahr von Verwechslungen.
      </para>
     </tip>
    </step>
    <step>
     <para>
      Bearbeiten Sie die Datei <filename>/srv/pillar/ceph/stack/ceph/cluster.yml</filename>, fügen Sie die folgende Zeile hinzu und speichern Sie sie:
     </para>
<screen>pool_init: custom</screen>
    </step>
    <step>
     <para>
      Verifizieren Sie das Ergebnis durch Aktualisieren des Pillar und Ausführen des folgenden Schritts:
     </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> saltutil.pillar_refresh
<prompt>root@master # </prompt>salt 'admin.ceph' state.apply ceph.pool</screen>
    </step>
   </procedure>
  </sect2>

  <sect2>
   <title>Bearbeiten einer Bereitstellungsphase</title>
   <para>
    Wenn Sie einen völlig anderen Bereitstellungsschritt hinzufügen müssen, erstellen Sie drei neue Dateien: eine <literal>sls</literal>-Datei, die das Kommando ausführt, eine Orchestrierungsdatei sowie eine benutzerdefinierte Datei, die den neuen Schritt mit den ursprünglichen Bereitstellungsschritten abstimmt.
   </para>
   <para>
    Beispiel: Wenn Sie <command>logrotate</command> auf allen Minions als Teil der Vorbereitungsphase ausführen müssen:
   </para>
   <para>
    Erstellen Sie zunächst eine <literal>sls</literal>-Datei und fügen Sie das Kommando <command>logrotate</command> hinzu.
   </para>
   <procedure>
    <title>Ausführen von <command>logrotate</command> auf allen Salt-Minions</title>
    <step>
     <para>
      Erstellen Sie ein Verzeichnis wie <filename>/srv/salt/ceph/logrotate</filename>.
     </para>
    </step>
    <step>
     <para>
      Erstellen Sie <filename>/srv/salt/ceph/logrotate/init.sls</filename> mit dem folgenden Inhalt und speichern Sie die Datei:
     </para>
<screen>rotate logs:
  cmd.run:
    - name: "/usr/sbin/logrotate /etc/logrotate.conf"</screen>
    </step>
    <step>
     <para>
      Verifizieren Sie, dass das Kommando an einem Minion funktioniert:
     </para>
<screen><prompt>root@master # </prompt>salt 'admin.ceph' state.apply ceph.logrotate</screen>
    </step>
   </procedure>
   <para>
    Fügen Sie die Orchestrierungsdatei der Phase 0 <emphasis>prep</emphasis> hinzu, da sie vor allen anderen Vorbereitungsschritten ausgeführt werden muss:
   </para>
   <procedure>
    <step>
     <para>
      Erstellen Sie <filename>/srv/salt/ceph/stage/prep/logrotate.sls</filename> mit dem folgenden Inhalt und speichern Sie die Datei:
     </para>
<screen>logrotate:
  salt.state:
    - tgt: '*'
    - sls: ceph.logrotate</screen>
    </step>
    <step>
     <para>
      Verifizieren Sie, dass die Orchestrierungsdatei funktioniert:
     </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.prep.logrotate</screen>
    </step>
   </procedure>
   <para>
    Die letzte Datei ist die benutzerdefinierte Datei. Sie enthält den zusätzlichen Schritt sowie die ursprünglichen Schritte:
   </para>
   <procedure>
    <step>
     <para>
      Erstellen Sie <filename>/srv/salt/ceph/stage/prep/custom.sls</filename> mit dem folgenden Inhalt und speichern Sie die Datei:
     </para>
<screen>include:
  - .logrotate
  - .master
  - .minion</screen>
    </step>
    <step>
     <para>
      Setzen Sie das Standardverhalten außer Kraft. Bearbeiten Sie die Datei <filename>/srv/pillar/ceph/stack/global.yml</filename>, fügen Sie die folgende Zeile hinzu und speichern Sie sie:
     </para>
<screen>stage_prep: custom</screen>
    </step>
    <step>
     <para>
      Verifizieren Sie, dass Phase 0 funktioniert:
     </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.0</screen>
    </step>
   </procedure>
   <note>
    <title>Wieso <filename>global.yml</filename>?</title>
    <para>
     Die Datei <filename>global.yml</filename> wird anstelle der Datei <filename>cluster.yml</filename> gewählt, weil in der Phase <emphasis>prep</emphasis> noch kein Minion zum Ceph Cluster gehört und keinen Zugriff auf Einstellungen in <filename>cluster.yml</filename> hat.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="ds-disable-reboots">
   <title>Updates und Neustarts in Phase 0</title>
   <para>
    In Phase 0 (weitere Informationen zu DeepSea-Phasen siehe <xref linkend="deepsea-stage-description"/>) werden der Salt Master und die Salt Minions optional neu gestartet, da für neue Pakete, beispielsweise
    <package>kernel</package>, ein Neustart des Systems erforderlich ist.
   </para>
   <para>
    Aus dem Standardverhalten werden verfügbare neue Updates installiert und die Knoten werden selbst bei einem Kernel-Update <emphasis>nicht</emphasis> neu gestartet.
   </para>
   <para>
    Sie können das standardmäßige Update-/Neustartverhalten der DeepSea-Phase 0 ändern. Fügen Sie hierzu die Optionen <option>stage_prep_master</option> und <option>stage_prep_minion</option> in die <filename>/srv/pillar/ceph/stack/global.yml</filename> Datei ein oder ändern Sie diese Optionen. Mit <option>_prep_master</option> wird das Verhalten des Salt Masters in Phase festgelegt, mit <option>stage_prep_minion</option> das Verhalten aller Minions. Die folgenden Parameter sind verfügbar:
   </para>
   <variablelist>
    <varlistentry>
     <term>default</term>
     <listitem>
      <para>
       Installiert die Updates ohne Neustart.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>default-update-reboot</term>
     <listitem>
      <para>
       Installiert die Updates und neustartet nach dem Update-Vorgang.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>default-no-update-reboot</term>
     <listitem>
      <para>
       Neustart ohne Installation der Updates.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>default-no-update-no-reboot</term>
     <listitem>
      <para>
       Updates werden nicht installiert und es wird kein Neustart durchgeführt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Wenn beispielsweise keine Updates auf den Cluster Nodes installiert und die Cluster Nodes nicht neu gestartet werden sollen, bearbeiten Sie <filename>/srv/pillar/ceph/stack/global.yml</filename> und fügen Sie die folgenden Zeilen ein:
   </para>
<screen>
stage_prep_master: default-no-update-no-reboot
stage_prep_minion: default-no-update-no-reboot
</screen>
   <tip>
    <title>Werte und zugehörige Dateien</title>
    <para>
     Die Werte von <option>stage_prep_master</option> entsprechen den Dateinamen in <filename>/srv/salt/ceph/stage/0/master</filename>, die Werte von <option>stage_prep_minion</option> dagegen den Dateien in <filename>/srv/salt/ceph/stage/0/minion</filename>:
    </para>
<screen>
<prompt>root@master # </prompt>ls -l /srv/salt/ceph/stage/0/master
default-no-update-no-reboot.sls
default-no-update-reboot.sls
default-update-reboot.sls
[...]

<prompt>root@master # </prompt>ls -l /srv/salt/ceph/stage/0/minion
default-no-update-no-reboot.sls
default-no-update-reboot.sls
default-update-reboot.sls
[...]
</screen>
   </tip>
  </sect2>
 </sect1>
 <sect1 xml:id="discovered-configuration-modification">
  <title>Bearbeiten der ermittelten Konfiguration</title>

  <para>
   Nach Abschluss von Phase 2 möchten Sie möglicherweise die ermittelte Konfiguration ändern. Führen Sie zur Anzeige der aktuellen Einstellungen Folgendes aus:
  </para>

<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> pillar.items</screen>

  <para>
   Die Ausgabe der Standardkonfiguration für einen einzelnen Minion ähnelt normalerweise der folgenden Ausgabe:
  </para>

<screen>----------
    available_roles:
        - admin
        - mon
        - storage
        - mds
        - igw
        - rgw
        - client-cephfs
        - client-radosgw
        - client-iscsi
        - mds-nfs
        - rgw-nfs
        - master
    cluster:
        ceph
    cluster_network:
        172.16.22.0/24
    fsid:
        e08ec63c-8268-3f04-bcdb-614921e94342
    master_minion:
        admin.ceph
    mon_host:
        - 172.16.21.13
        - 172.16.21.11
        - 172.16.21.12
    mon_initial_members:
        - mon3
        - mon1
        - mon2
    public_address:
        172.16.21.11
    public_network:
        172.16.21.0/24
    roles:
        - admin
        - mon
        - mds
    time_server:
        admin.ceph
    time_service:
        ntp</screen>

  <para>
   Die oben genannten Einstellungen werden auf verschiedene Konfigurationsdateien verteilt. Die Verzeichnisstruktur mit diesen Dateien ist im Verzeichnis<filename>/srv/pillar/ceph/stack/stack.cfg</filename> definiert. Die folgenden Dateien beschreiben normalerweise Ihren Cluster:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <filename>/srv/pillar/ceph/stack/global.yml</filename> - die Datei hat Auswirkungen auf alle Minions im Salt Cluster.
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/srv/pillar/ceph/stack/<replaceable>ceph</replaceable>/cluster.yml</filename> - die Datei hat Auswirkungen auf alle Minions im Ceph Cluster namens <literal>ceph</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/srv/pillar/ceph/stack/<replaceable>ceph</replaceable>/roles/<replaceable>role</replaceable>.yml</filename> - die Datei hat Auswirkungen auf alle Minions, denen eine spezifische Rolle im <literal>ceph</literal> Cluster zugewiesen wurde.
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/srv/pillar/ceph/stack/<replaceable>ceph</replaceable>minions/<replaceable>MINION_ID</replaceable>/yml</filename> – die Datei hat Auswirkungen auf den einzelnen Minion.
    </para>
   </listitem>
  </itemizedlist>

  <note>
   <title>Überschreiben von Verzeichnissen mit Standardwerten</title>
   <para>
    In einem parallelen Verzeichnis ist die Standard-Konfigurationseinrichtung gespeichert unter <filename>/srv/pillar/ceph/stack/default</filename>. Ändern Sie hier keine Werte, weil diese überschrieben werden.
   </para>
  </note>

  <para>
   Das normale Verfahren zum Ändern der gesammelten Konfiguration ist wie folgt:
  </para>

  <procedure>
   <step>
    <para>
     Suchen Sie den Standort des Konfigurationselements, das Sie ändern müssen. Wenn Sie beispielsweise eine auf den Cluster bezogene Einstellung wie das Cluster-Netzwerk ändern müssen, bearbeiten Sie die Datei <filename>/srv/pillar/ceph/stack/ceph/cluster.yml</filename>.
    </para>
   </step>
   <step>
    <para>
     Speichern Sie die Datei.
    </para>
   </step>
   <step>
    <para>
     Führen Sie zum Verifizieren der Änderungen Folgendes aus:
    </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> saltutil.pillar_refresh</screen>
    <para>
     und danach
    </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> pillar.items</screen>
   </step>
  </procedure>

  <sect2 xml:id="ds-modify-ipv6">
   <title>Aktivieren von IPv6 für die Ceph Cluster-Implementierung</title>
   <para>
    Die IPv4-Netzwerkadressierung ist derzeit gängig; IPv6 muss daher als benutzerdefinierte Anpassung aktiviert werden. DeepSea bietet keine automatische Erkennung von IPv6-Adressen.
   </para>
   <para>
    Zum Konfigurieren von IPv6 legen Sie in den Variablen <option>public_network</option> und <option>cluster_network</option> in der Datei <filename>/srv/pillar/ceph/stack/global.yml</filename> gültige IPv6-Subnetze fest. Beispiel:
   </para>
<screen>
public_network: fd00:10::/64
cluster_network: fd00:11::/64
</screen>
   <para>
    Führen Sie dann die DeepSea-Phase 2 aus und prüfen Sie, ob die Netzwerkinformationen mit den Einstellungen übereinstimmen. In Phase 3 wird <filename>ceph.conf</filename> mit den erforderlichen Flaggen erzeugt.
   </para>
   <important>
    <title>Keine Unterstützung für Dual Stack</title>
    <para>
     Ceph bietet keine Unterstützung für Dual Stack – die gleichzeitige Ausführung von Ceph auf IPv4 und IPv6 ist nicht möglich. Die DeepSea-Validierung lehnt einen fehlerhaften Abgleich zwischen <option>public_network</option> und <option>cluster_network</option> bzw. innerhalb der einzelnen Variablen ab. Im folgenden Beispiel schlägt die Validierung fehl.
    </para>
<screen>
public_network: "192.168.10.0/24 fd00:10::/64"
</screen>
   </important>
   <tip>
    <title>Keine Verwendung von <literal>fe80::/10 link-local</literal>-Adressen</title>
    <para>
     Verwenden Sie keine <literal>fe80::/10 link-local</literal>-Adressen. Allen Netzwerkschnittstellen ist eine <literal>fe80</literal>-Adresse zugewiesen und für das ordnungsgemäße Routing ist ein Schnittstellen-Qualifizierer erforderlich. Weisen Sie entweder IPv6-Adressen zu, die Ihrem Standort zugeordnet sind, oder verwenden Sie <literal>fd00::/8</literal>. Diese Adressen sind Teil der ULA und sind nicht global routingfähig.
    </para>
   </tip>
  </sect2>
 </sect1>
</chapter>
